// go-pst is a library for reading Personal Storage Table (.pst) files (written in Go/Golang).
//
// Copyright 2023 Marten Mooij
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//go:generate msgp -tests=false

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: appointment.proto

package properties

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Appointment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies a list of all the attendees except for the organizer, including resources and unsendable attendees.
	AllAttendeesString *string `protobuf:"bytes,1,opt,name=all_attendees_string,json=allAttendeesString,proto3,oneof" json:"all_attendees_string,omitempty" msg:"3333631,omitempty"`  
	// This property is set to TRUE.
	AllowExternalCheck *bool `protobuf:"varint,2,opt,name=allow_external_check,json=allowExternalCheck,proto3,oneof" json:"allow_external_check,omitempty" msg:"3335011,omitempty"`  
	// Specifies a bit field that describes the auxiliary state of the object.
	AppointmentAuxiliaryFlags *int32 `protobuf:"varint,3,opt,name=appointment_auxiliary_flags,json=appointmentAuxiliaryFlags,proto3,oneof" json:"appointment_auxiliary_flags,omitempty" msg:"332873,omitempty"`  
	// Specifies the color to be used when displaying the Calendar object.
	AppointmentColor *int32 `protobuf:"varint,4,opt,name=appointment_color,json=appointmentColor,proto3,oneof" json:"appointment_color,omitempty" msg:"333003,omitempty"`  
	// Indicates whether a Meeting Response object is a counter proposal.
	AppointmentCounterProposal *bool `protobuf:"varint,5,opt,name=appointment_counter_proposal,json=appointmentCounterProposal,proto3,oneof" json:"appointment_counter_proposal,omitempty" msg:"3336711,omitempty"`  
	// Specifies the length of the event, in minutes.
	AppointmentDuration *int32 `protobuf:"varint,6,opt,name=appointment_duration,json=appointmentDuration,proto3,oneof" json:"appointment_duration,omitempty" msg:"332993,omitempty"`  
	// Indicates the date that the appointment ends.
	AppointmentEndDate *int64 `protobuf:"varint,7,opt,name=appointment_end_date,json=appointmentEndDate,proto3,oneof" json:"appointment_end_date,omitempty" msg:"3329764,omitempty"`  
	// Indicates the time that the appointment ends.
	AppointmentEndTime *int64 `protobuf:"varint,8,opt,name=appointment_end_time,json=appointmentEndTime,proto3,oneof" json:"appointment_end_time,omitempty" msg:"3329664,omitempty"`  
	// Specifies the end date and time for the event.
	AppointmentEndWhole *int64 `protobuf:"varint,9,opt,name=appointment_end_whole,json=appointmentEndWhole,proto3,oneof" json:"appointment_end_whole,omitempty" msg:"3329464,omitempty"`  
	// Indicates to the organizer the last sequence number that was sent to any attendee.
	AppointmentLastSequence *int32 `protobuf:"varint,10,opt,name=appointment_last_sequence,json=appointmentLastSequence,proto3,oneof" json:"appointment_last_sequence,omitempty" msg:"332833,omitempty"`  
	// Indicates the message class of the Meeting object to be generated from the Meeting Request object.
	AppointmentMessageClass *string `protobuf:"bytes,11,opt,name=appointment_message_class,json=appointmentMessageClass,proto3,oneof" json:"appointment_message_class,omitempty" msg:"3631,omitempty"`  
	// Indicates whether attendees are not allowed to propose a new date and/or time for the meeting.
	AppointmentNotAllowPropose *bool `protobuf:"varint,12,opt,name=appointment_not_allow_propose,json=appointmentNotAllowPropose,proto3,oneof" json:"appointment_not_allow_propose,omitempty" msg:"3337011,omitempty"`  
	// Specifies the number of attendees who have sent counter proposals that have not been accepted or rejected by the organizer.
	AppointmentProposalNumber *int32 `protobuf:"varint,13,opt,name=appointment_proposal_number,json=appointmentProposalNumber,proto3,oneof" json:"appointment_proposal_number,omitempty" msg:"333693,omitempty"`  
	// Indicates the proposed value for the PidLidAppointmentDuration property (section 2.11) for a counter proposal.
	AppointmentProposedDuration *int32 `protobuf:"varint,14,opt,name=appointment_proposed_duration,json=appointmentProposedDuration,proto3,oneof" json:"appointment_proposed_duration,omitempty" msg:"333663,omitempty"`  
	// Specifies the proposed value for the PidLidAppointmentEndWhole property (section 2.14) for a counter proposal.
	AppointmentProposedEndWhole *int64 `protobuf:"varint,15,opt,name=appointment_proposed_end_whole,json=appointmentProposedEndWhole,proto3,oneof" json:"appointment_proposed_end_whole,omitempty" msg:"3336164,omitempty"`  
	// Specifies the proposed value for the PidLidAppointmentStartWhole property (section 2.29) for a counter proposal.
	AppointmentProposedStartWhole *int64 `protobuf:"varint,16,opt,name=appointment_proposed_start_whole,json=appointmentProposedStartWhole,proto3,oneof" json:"appointment_proposed_start_whole,omitempty" msg:"3336064,omitempty"`  
	// Specifies the dates and times when a recurring series occurs.
	AppointmentRecur []byte `protobuf:"bytes,17,opt,name=appointment_recur,json=appointmentRecur,proto3,oneof" json:"appointment_recur,omitempty" msg:"33302258,omitempty"`  
	// Specifies the user who last replied to the meeting request or meeting update.
	AppointmentReplyName *string `protobuf:"bytes,18,opt,name=appointment_reply_name,json=appointmentReplyName,proto3,oneof" json:"appointment_reply_name,omitempty" msg:"3332831,omitempty"`  
	// Specifies the date and time at which the attendee responded to a received meeting request or Meeting Update object.
	AppointmentReplyTime *int64 `protobuf:"varint,19,opt,name=appointment_reply_time,json=appointmentReplyTime,proto3,oneof" json:"appointment_reply_time,omitempty" msg:"3331264,omitempty"`  
	// Specifies the sequence number of a Meeting object.
	AppointmentSequence *int32 `protobuf:"varint,20,opt,name=appointment_sequence,json=appointmentSequence,proto3,oneof" json:"appointment_sequence,omitempty" msg:"332813,omitempty"`  
	// Indicates the date and time at which the PidLidAppointmentSequence property (section 2.25) was last modified.
	AppointmentSequenceTime *int64 `protobuf:"varint,21,opt,name=appointment_sequence_time,json=appointmentSequenceTime,proto3,oneof" json:"appointment_sequence_time,omitempty" msg:"3328264,omitempty"`  
	// Identifies the date that the appointment starts.
	AppointmentStartDate *int64 `protobuf:"varint,22,opt,name=appointment_start_date,json=appointmentStartDate,proto3,oneof" json:"appointment_start_date,omitempty" msg:"3329864,omitempty"`  
	// Identifies the time that the appointment starts.
	AppointmentStartTime *int64 `protobuf:"varint,23,opt,name=appointment_start_time,json=appointmentStartTime,proto3,oneof" json:"appointment_start_time,omitempty" msg:"3329564,omitempty"`  
	// Specifies the start date and time of the appointment.
	AppointmentStartWhole *int64 `protobuf:"varint,24,opt,name=appointment_start_whole,json=appointmentStartWhole,proto3,oneof" json:"appointment_start_whole,omitempty" msg:"3329364,omitempty"`  
	// Specifies a bit field that describes the state of the object.
	AppointmentStateFlags *int32 `protobuf:"varint,25,opt,name=appointment_state_flags,json=appointmentStateFlags,proto3,oneof" json:"appointment_state_flags,omitempty" msg:"333033,omitempty"`  
	// Specifies whether the event is an all-day event.
	AppointmentSubType *bool `protobuf:"varint,26,opt,name=appointment_sub_type,json=appointmentSubType,proto3,oneof" json:"appointment_sub_type,omitempty" msg:"3330111,omitempty"`  
	// Specifies time zone information that indicates the time zone of the PidLidAppointmentEndWhole property (section 2.14).
	AppointmentTimeZoneDefinitionEndDisplay []byte `protobuf:"bytes,27,opt,name=appointment_time_zone_definition_end_display,json=appointmentTimeZoneDefinitionEndDisplay,proto3,oneof" json:"appointment_time_zone_definition_end_display,omitempty" msg:"33375258,omitempty"`  
	// Specifies time zone information that describes how to convert the meeting date and time on a recurring series to and from UTC.
	AppointmentTimeZoneDefinitionRecur []byte `protobuf:"bytes,28,opt,name=appointment_time_zone_definition_recur,json=appointmentTimeZoneDefinitionRecur,proto3,oneof" json:"appointment_time_zone_definition_recur,omitempty" msg:"33376258,omitempty"`  
	// Specifies time zone information that indicates the time zone of the PidLidAppointmentStartWhole property (section 2.29).
	AppointmentTimeZoneDefinitionStartDisplay []byte `protobuf:"bytes,29,opt,name=appointment_time_zone_definition_start_display,json=appointmentTimeZoneDefinitionStartDisplay,proto3,oneof" json:"appointment_time_zone_definition_start_display,omitempty" msg:"33374258,omitempty"`  
	// Contains a list of unsendable attendees.
	AppointmentUnsendableRecipients []byte `protobuf:"bytes,30,opt,name=appointment_unsendable_recipients,json=appointmentUnsendableRecipients,proto3,oneof" json:"appointment_unsendable_recipients,omitempty" msg:"33373258,omitempty"`  
	// Indicates the time at which the appointment was last updated.
	AppointmentUpdateTime *int64 `protobuf:"varint,31,opt,name=appointment_update_time,json=appointmentUpdateTime,proto3,oneof" json:"appointment_update_time,omitempty" msg:"3331864,omitempty"`  
	// Specifies the date and time at which the meeting-related object was sent.
	AttendeeCriticalChange *int64 `protobuf:"varint,32,opt,name=attendee_critical_change,json=attendeeCriticalChange,proto3,oneof" json:"attendee_critical_change,omitempty" msg:"164,omitempty"`  
	// Indicates whether the value of the PidLidLocation property (section 2.159) is set to the PidTagDisplayName property (section 2.676).
	AutoFillLocation *bool `protobuf:"varint,33,opt,name=auto_fill_location,json=autoFillLocation,proto3,oneof" json:"auto_fill_location,omitempty" msg:"3333811,omitempty"`  
	// Specifies whether to automatically start the conferencing application when a reminder for the start of a meeting is executed.
	AutoStartCheck *bool `protobuf:"varint,34,opt,name=auto_start_check,json=autoStartCheck,proto3,oneof" json:"auto_start_check,omitempty" msg:"3334811,omitempty"`  
	// Specifies the availability of a user for the event described by the object.
	BusyStatus *int32 `protobuf:"varint,35,opt,name=busy_status,json=busyStatus,proto3,oneof" json:"busy_status,omitempty" msg:"332853,omitempty"`  
	// Contains the value of the CalendarType field from the PidLidAppointmentRecur property (section 2.22).
	CalendarType *int32 `protobuf:"varint,36,opt,name=calendar_type,json=calendarType,proto3,oneof" json:"calendar_type,omitempty" msg:"283,omitempty"`  
	// Contains a list of all the sendable attendees who are also optional attendees.
	CcAttendeesString *string `protobuf:"bytes,37,opt,name=cc_attendees_string,json=ccAttendeesString,proto3,oneof" json:"cc_attendees_string,omitempty" msg:"3334031,omitempty"`  
	// Specifies a bit field that indicates how the Meeting object has changed.
	ChangeHighlight *int32 `protobuf:"varint,38,opt,name=change_highlight,json=changeHighlight,proto3,oneof" json:"change_highlight,omitempty" msg:"332843,omitempty"`  
	// Contains the value of the PidLidGlobalObjectId property (section 2.142) for an object that represents an Exception object to a recurring series, where the Year, Month, and Day fields are all zero.
	CleanGlobalObjectId []byte `protobuf:"bytes,39,opt,name=clean_global_object_id,json=cleanGlobalObjectId,proto3,oneof" json:"clean_global_object_id,omitempty" msg:"35258,omitempty"`  
	// Indicates what actions the user has taken on this Meeting object.
	ClientIntent *int32 `protobuf:"varint,40,opt,name=client_intent,json=clientIntent,proto3,oneof" json:"client_intent,omitempty" msg:"213,omitempty"`  
	// Specifies the end date and time of the event in UTC.
	ClipEnd *int64 `protobuf:"varint,41,opt,name=clip_end,json=clipEnd,proto3,oneof" json:"clip_end,omitempty" msg:"3333464,omitempty"`  
	// Specifies the start date and time of the event in UTC.
	ClipStart *int64 `protobuf:"varint,42,opt,name=clip_start,json=clipStart,proto3,oneof" json:"clip_start,omitempty" msg:"3333364,omitempty"`  
	// Specifies the document to be launched when the user joins the meeting.
	CollaborateDoc *string `protobuf:"bytes,43,opt,name=collaborate_doc,json=collaborateDoc,proto3,oneof" json:"collaborate_doc,omitempty" msg:"3335131,omitempty"`  
	// When set to TRUE (0x00000001), the PidLidConferencingCheck property indicates that the associated meeting is one of the following types:
	ConferencingCheck *bool `protobuf:"varint,44,opt,name=conferencing_check,json=conferencingCheck,proto3,oneof" json:"conferencing_check,omitempty" msg:"3334411,omitempty"`  
	// Specifies the type of the meeting.
	ConferencingType *int32 `protobuf:"varint,45,opt,name=conferencing_type,json=conferencingType,proto3,oneof" json:"conferencing_type,omitempty" msg:"333453,omitempty"`  
	// Identifies the day interval for the recurrence pattern.
	DayInterval *int32 `protobuf:"varint,46,opt,name=day_interval,json=dayInterval,proto3,oneof" json:"day_interval,omitempty" msg:"172,omitempty"`  
	// Identifies the day of the month for the appointment or meeting.
	DayOfMonth *int32 `protobuf:"varint,47,opt,name=day_of_month,json=dayOfMonth,proto3,oneof" json:"day_of_month,omitempty" msg:"40963,omitempty"`  
	// Indicates whether a delegate responded to the meeting request.
	DelegateMail *bool `protobuf:"varint,48,opt,name=delegate_mail,json=delegateMail,proto3,oneof" json:"delegate_mail,omitempty" msg:"911,omitempty"`  
	// Specifies the directory server to be used.
	Directory *string `protobuf:"bytes,49,opt,name=directory,proto3,oneof" json:"directory,omitempty" msg:"3334631,omitempty"`  
	// Identifies the end date of the recurrence range.
	EndRecurrenceDate *int32 `protobuf:"varint,50,opt,name=end_recurrence_date,json=endRecurrenceDate,proto3,oneof" json:"end_recurrence_date,omitempty" msg:"153,omitempty"`  
	// Identifies the end time of the recurrence range.
	EndRecurrenceTime *int32 `protobuf:"varint,51,opt,name=end_recurrence_time,json=endRecurrenceTime,proto3,oneof" json:"end_recurrence_time,omitempty" msg:"163,omitempty"`  
	// Specifies the date and time, in UTC, within a recurrence pattern that an exception will replace.
	ExceptionReplaceTime *int64 `protobuf:"varint,52,opt,name=exception_replace_time,json=exceptionReplaceTime,proto3,oneof" json:"exception_replace_time,omitempty" msg:"3332064,omitempty"`  
	// Indicates that the object is a Recurring Calendar object with one or more exceptions, and that at least one of the Exception Embedded Message objects has at least one RecipientRow structure, as described in [MS-OXCDATA] section 2.8.3.
	FExceptionalAttendees *bool `protobuf:"varint,53,opt,name=f_exceptional_attendees,json=fExceptionalAttendees,proto3,oneof" json:"f_exceptional_attendees,omitempty" msg:"3332311,omitempty"`  
	// Indicates that the Exception Embedded Message object has a body that differs from the Recurring Calendar object.
	FExceptionalBody *bool `protobuf:"varint,54,opt,name=f_exceptional_body,json=fExceptionalBody,proto3,oneof" json:"f_exceptional_body,omitempty" msg:"3328611,omitempty"`  
	// Indicates whether invitations have been sent for the meeting that this Meeting object represents.
	FInvited *bool `protobuf:"varint,55,opt,name=f_invited,json=fInvited,proto3,oneof" json:"f_invited,omitempty" msg:"3332111,omitempty"`  
	// Indicates whether the Meeting Request object represents an exception to a recurring series, and whether it was forwarded (even when forwarded by the organizer) rather than being an invitation sent by the organizer.
	ForwardInstance *bool `protobuf:"varint,56,opt,name=forward_instance,json=forwardInstance,proto3,oneof" json:"forward_instance,omitempty" msg:"3329011,omitempty"`  
	// Contains a list of RecipientRow structures, as described in [MS-OXCDATA] section 2.8.3, that indicate the recipients of a meeting forward.
	ForwardNotificationRecipients []byte `protobuf:"bytes,57,opt,name=forward_notification_recipients,json=forwardNotificationRecipients,proto3,oneof" json:"forward_notification_recipients,omitempty" msg:"33377258,omitempty"`  
	// Indicates whether the Calendar folder from which the meeting was opened is another user's calendar.
	FOthersAppointment *bool `protobuf:"varint,58,opt,name=f_others_appointment,json=fOthersAppointment,proto3,oneof" json:"f_others_appointment,omitempty" msg:"3332711,omitempty"`  
	// Contains an ID for an object that represents an exception to a recurring series.
	GlobalObjectId []byte `protobuf:"bytes,59,opt,name=global_object_id,json=globalObjectId,proto3,oneof" json:"global_object_id,omitempty" msg:"3258,omitempty"`  
	// Identifies the day of the week for the appointment or meeting.
	ICalendarDayOfWeekMask *int32 `protobuf:"varint,60,opt,name=i_calendar_day_of_week_mask,json=iCalendarDayOfWeekMask,proto3,oneof" json:"i_calendar_day_of_week_mask,omitempty" msg:"40973,omitempty"`  
	// Contains the contents of the iCalendar MIME part of the original MIME message.
	InboundiCalStream []byte `protobuf:"bytes,61,opt,name=inboundi_cal_stream,json=inboundiCalStream,proto3,oneof" json:"inboundi_cal_stream,omitempty" msg:"33402258,omitempty"`  
	// Contains the value of the PidLidBusyStatus property (section 2.47) on the Meeting object in the organizer's calendar at the time that the Meeting Request object or Meeting Update object was sent.
	IntendedBusyStatus *int32 `protobuf:"varint,62,opt,name=intended_busy_status,json=intendedBusyStatus,proto3,oneof" json:"intended_busy_status,omitempty" msg:"333163,omitempty"`  
	// Indicates whether the object represents an exception (including an orphan instance).
	IsException *bool `protobuf:"varint,63,opt,name=is_exception,json=isException,proto3,oneof" json:"is_exception,omitempty" msg:"1011,omitempty"`  
	// Specifies whether the object is associated with a recurring series.
	IsRecurring *bool `protobuf:"varint,64,opt,name=is_recurring,json=isRecurring,proto3,oneof" json:"is_recurring,omitempty" msg:"511,omitempty"`  
	// Indicates whether the user did not include any text in the body of the Meeting Response object.
	IsSilent *bool `protobuf:"varint,65,opt,name=is_silent,json=isSilent,proto3,oneof" json:"is_silent,omitempty" msg:"411,omitempty"`  
	// Specifies the location of the event.
	Location *string `protobuf:"bytes,66,opt,name=location,proto3,oneof" json:"location,omitempty" msg:"3328831,omitempty"`  
	// Indicates the type of Meeting Request object or Meeting Update object.
	MeetingType *int32 `protobuf:"varint,67,opt,name=meeting_type,json=meetingType,proto3,oneof" json:"meeting_type,omitempty" msg:"383,omitempty"`  
	// Specifies the URL of the Meeting Workspace that is associated with a Calendar object.
	MeetingWorkspaceUrl *string `protobuf:"bytes,68,opt,name=meeting_workspace_url,json=meetingWorkspaceUrl,proto3,oneof" json:"meeting_workspace_url,omitempty" msg:"3328931,omitempty"`  
	// Indicates the monthly interval of the appointment or meeting.
	MonthInterval *int32 `protobuf:"varint,69,opt,name=month_interval,json=monthInterval,proto3,oneof" json:"month_interval,omitempty" msg:"192,omitempty"`  
	// Indicates the month of the year in which the appointment or meeting occurs.
	MonthOfYear *int32 `protobuf:"varint,70,opt,name=month_of_year,json=monthOfYear,proto3,oneof" json:"month_of_year,omitempty" msg:"41023,omitempty"`  
	// Indicates the calculated month of the year in which the appointment or meeting occurs.
	MonthOfYearMask *int32 `protobuf:"varint,71,opt,name=month_of_year_mask,json=monthOfYearMask,proto3,oneof" json:"month_of_year_mask,omitempty" msg:"233,omitempty"`  
	// Specifies the URL to be launched when the user joins the meeting.
	NetShowUrl *string `protobuf:"bytes,72,opt,name=net_show_url,json=netShowUrl,proto3,oneof" json:"net_show_url,omitempty" msg:"3335231,omitempty"`  
	// Indicates whether the recurrence pattern has an end date.
	NoEndDateFlag *bool `protobuf:"varint,73,opt,name=no_end_date_flag,json=noEndDateFlag,proto3,oneof" json:"no_end_date_flag,omitempty" msg:"410711,omitempty"`  
	// Contains a list of all of the unsendable attendees who are also resources.
	NonSendableBcc *string `protobuf:"bytes,74,opt,name=non_sendable_bcc,json=nonSendableBcc,proto3,oneof" json:"non_sendable_bcc,omitempty" msg:"3410431,omitempty"`  
	// Contains a list of all of the unsendable attendees who are also optional attendees.
	NonSendableCc *string `protobuf:"bytes,75,opt,name=non_sendable_cc,json=nonSendableCc,proto3,oneof" json:"non_sendable_cc,omitempty" msg:"3410331,omitempty"`  
	// Contains a list of all of the unsendable attendees who are also required attendees.
	NonSendableTo *string `protobuf:"bytes,76,opt,name=non_sendable_to,json=nonSendableTo,proto3,oneof" json:"non_sendable_to,omitempty" msg:"3410231,omitempty"`  
	// Indicates the number of occurrences in the recurring appointment or meeting.
	Occurrences *int32 `protobuf:"varint,77,opt,name=occurrences,proto3,oneof" json:"occurrences,omitempty" msg:"41013,omitempty"`  
	// Indicates the original value of the PidLidLocation property (section 2.159) before a meeting update.
	OldLocation *string `protobuf:"bytes,78,opt,name=old_location,json=oldLocation,proto3,oneof" json:"old_location,omitempty" msg:"4031,omitempty"`  
	// Indicates the recurrence pattern for the appointment or meeting.
	OldRecurrenceType *int32 `protobuf:"varint,79,opt,name=old_recurrence_type,json=oldRecurrenceType,proto3,oneof" json:"old_recurrence_type,omitempty" msg:"242,omitempty"`  
	// Indicates the original value of the PidLidAppointmentEndWhole property (section 2.14) before a meeting update.
	OldWhenEndWhole *int64 `protobuf:"varint,80,opt,name=old_when_end_whole,json=oldWhenEndWhole,proto3,oneof" json:"old_when_end_whole,omitempty" msg:"4264,omitempty"`  
	// Indicates the original value of the PidLidAppointmentStartWhole property (section 2.29) before a meeting update.
	OldWhenStartWhole *int64 `protobuf:"varint,81,opt,name=old_when_start_whole,json=oldWhenStartWhole,proto3,oneof" json:"old_when_start_whole,omitempty" msg:"4164,omitempty"`  
	// Specifies the password for a meeting on which the PidLidConferencingType property (section 2.66) has the value 0x00000002.
	OnlinePassword *string `protobuf:"bytes,82,opt,name=online_password,json=onlinePassword,proto3,oneof" json:"online_password,omitempty" msg:"3335331,omitempty"`  
	// Specifies optional attendees.
	OptionalAttendees *string `protobuf:"bytes,83,opt,name=optional_attendees,json=optionalAttendees,proto3,oneof" json:"optional_attendees,omitempty" msg:"731,omitempty"`  
	// Specifies the email address of the organizer.
	OrganizerAlias *string `protobuf:"bytes,84,opt,name=organizer_alias,json=organizerAlias,proto3,oneof" json:"organizer_alias,omitempty" msg:"3334731,omitempty"`  
	// Specifies the EntryID of the delegator’s message store.
	OriginalStoreEntryId []byte `protobuf:"bytes,85,opt,name=original_store_entry_id,json=originalStoreEntryId,proto3,oneof" json:"original_store_entry_id,omitempty" msg:"33335258,omitempty"`  
	// Specifies the date and time at which a Meeting Request object was sent by the organizer.
	OwnerCriticalChange *int64 `protobuf:"varint,86,opt,name=owner_critical_change,json=ownerCriticalChange,proto3,oneof" json:"owner_critical_change,omitempty" msg:"2664,omitempty"`  
	// Indicates the name of the owner of the mailbox.
	OwnerName *string `protobuf:"bytes,87,opt,name=owner_name,json=ownerName,proto3,oneof" json:"owner_name,omitempty" msg:"3332631,omitempty"`  
	// Identifies the length, in minutes, of the appointment or meeting.
	RecurrenceDuration *int32 `protobuf:"varint,88,opt,name=recurrence_duration,json=recurrenceDuration,proto3,oneof" json:"recurrence_duration,omitempty" msg:"41093,omitempty"`  
	// Specifies a description of the recurrence pattern of the Calendar object.
	RecurrencePattern *string `protobuf:"bytes,89,opt,name=recurrence_pattern,json=recurrencePattern,proto3,oneof" json:"recurrence_pattern,omitempty" msg:"3333031,omitempty"`  
	// Specifies the recurrence type of the recurring series.
	RecurrenceType *int32 `protobuf:"varint,90,opt,name=recurrence_type,json=recurrenceType,proto3,oneof" json:"recurrence_type,omitempty" msg:"333293,omitempty"`  
	// Specifies whether the object represents a recurring series.
	Recurring *bool `protobuf:"varint,91,opt,name=recurring,proto3,oneof" json:"recurring,omitempty" msg:"3331511,omitempty"`  
	// Specifies the interval, in minutes, between the time at which the reminder first becomes overdue and the start time of the Calendar object.
	ReminderDelta *int32 `protobuf:"varint,92,opt,name=reminder_delta,json=reminderDelta,proto3,oneof" json:"reminder_delta,omitempty" msg:"340493,omitempty"`  
	// Specifies the filename of the sound that a client is to play when the reminder for that object becomes overdue.
	ReminderFileParameter *string `protobuf:"bytes,93,opt,name=reminder_file_parameter,json=reminderFileParameter,proto3,oneof" json:"reminder_file_parameter,omitempty" msg:"3407931,omitempty"`  
	// Specifies whether the client is to respect the current values of the  PidLidReminderPlaySound property (section 2.221) and the PidLidReminderFileParameter property (section 2.219), or use the default values for those properties.
	ReminderOverride *bool `protobuf:"varint,94,opt,name=reminder_override,json=reminderOverride,proto3,oneof" json:"reminder_override,omitempty" msg:"3407611,omitempty"`  
	// Specifies whether the client is to play a sound when the reminder becomes overdue.
	ReminderPlaySound *bool `protobuf:"varint,95,opt,name=reminder_play_sound,json=reminderPlaySound,proto3,oneof" json:"reminder_play_sound,omitempty" msg:"3407811,omitempty"`  
	// Specifies whether a reminder is set on the object.
	ReminderSet *bool `protobuf:"varint,96,opt,name=reminder_set,json=reminderSet,proto3,oneof" json:"reminder_set,omitempty" msg:"3405111,omitempty"`  
	// Specifies the point in time when a reminder transitions from pending to overdue.
	ReminderSignalTime *int64 `protobuf:"varint,97,opt,name=reminder_signal_time,json=reminderSignalTime,proto3,oneof" json:"reminder_signal_time,omitempty" msg:"3414464,omitempty"`  
	// Specifies the initial signal time for objects that are not Calendar objects.
	ReminderTime *int64 `protobuf:"varint,98,opt,name=reminder_time,json=reminderTime,proto3,oneof" json:"reminder_time,omitempty" msg:"3405064,omitempty"`  
	// Indicates the time and date of the reminder for the appointment or meeting.
	ReminderTimeDate *int64 `protobuf:"varint,99,opt,name=reminder_time_date,json=reminderTimeDate,proto3,oneof" json:"reminder_time_date,omitempty" msg:"3405364,omitempty"`  
	// Indicates the time of the reminder for the appointment or meeting.
	ReminderTimeTime *int64 `protobuf:"varint,100,opt,name=reminder_time_time,json=reminderTimeTime,proto3,oneof" json:"reminder_time_time,omitempty" msg:"3405264,omitempty"`  
	// This property is not set and, if set, is ignored.
	ReminderType *int32 `protobuf:"varint,101,opt,name=reminder_type,json=reminderType,proto3,oneof" json:"reminder_type,omitempty" msg:"340773,omitempty"`  
	// Identifies required attendees for the appointment or meeting.
	RequiredAttendees *string `protobuf:"bytes,102,opt,name=required_attendees,json=requiredAttendees,proto3,oneof" json:"required_attendees,omitempty" msg:"631,omitempty"`  
	// Identifies resource attendees for the appointment or meeting.
	ResourceAttendees *string `protobuf:"bytes,103,opt,name=resource_attendees,json=resourceAttendees,proto3,oneof" json:"resource_attendees,omitempty" msg:"831,omitempty"`  
	// Specifies the response status of an attendee.
	ResponseStatus *int32 `protobuf:"varint,104,opt,name=response_status,json=responseStatus,proto3,oneof" json:"response_status,omitempty" msg:"333043,omitempty"`  
	// Indicates whether the Meeting Request object or Meeting Update object has been processed.
	ServerProcessed *bool `protobuf:"varint,105,opt,name=server_processed,json=serverProcessed,proto3,oneof" json:"server_processed,omitempty" msg:"3425211,omitempty"`  
	// Indicates what processing actions have been taken on this Meeting Request object or Meeting Update object.
	ServerProcessingActions *int32 `protobuf:"varint,106,opt,name=server_processing_actions,json=serverProcessingActions,proto3,oneof" json:"server_processing_actions,omitempty" msg:"342533,omitempty"`  
	// Indicates that the original MIME message contained a single MIME part.
	SingleBodyiCal *bool `protobuf:"varint,107,opt,name=single_bodyi_cal,json=singleBodyiCal,proto3,oneof" json:"single_bodyi_cal,omitempty" msg:"3340311,omitempty"`  
	// Identifies the start date of the recurrence pattern.
	StartRecurrenceDate *int32 `protobuf:"varint,108,opt,name=start_recurrence_date,json=startRecurrenceDate,proto3,oneof" json:"start_recurrence_date,omitempty" msg:"133,omitempty"`  
	// Identifies the start time of the recurrence pattern.
	StartRecurrenceTime *int32 `protobuf:"varint,109,opt,name=start_recurrence_time,json=startRecurrenceTime,proto3,oneof" json:"start_recurrence_time,omitempty" msg:"143,omitempty"`  
	// Specifies information about the time zone of a recurring meeting.
	TimeZone *int32 `protobuf:"varint,110,opt,name=time_zone,json=timeZone,proto3,oneof" json:"time_zone,omitempty" msg:"123,omitempty"`  
	// Specifies a human-readable description of the time zone that is represented by the data in the PidLidTimeZoneStruct property (section 2.342).
	TimeZoneDescription *string `protobuf:"bytes,111,opt,name=time_zone_description,json=timeZoneDescription,proto3,oneof" json:"time_zone_description,omitempty" msg:"3333231,omitempty"`  
	// Specifies time zone information for a recurring meeting.
	TimeZoneStruct []byte `protobuf:"bytes,112,opt,name=time_zone_struct,json=timeZoneStruct,proto3,oneof" json:"time_zone_struct,omitempty" msg:"33331258,omitempty"`  
	// Contains a list of all of the sendable attendees who are also required attendees.
	ToAttendeesString *string `protobuf:"bytes,113,opt,name=to_attendees_string,json=toAttendeesString,proto3,oneof" json:"to_attendees_string,omitempty" msg:"3333931,omitempty"`  
	// Identifies the number of weeks that occur between each meeting.
	WeekInterval *int32 `protobuf:"varint,114,opt,name=week_interval,json=weekInterval,proto3,oneof" json:"week_interval,omitempty" msg:"182,omitempty"`  
	// Contains the value of the PidLidLocation property (section 2.159) from the associated Meeting object.
	Where *string `protobuf:"bytes,115,opt,name=where,proto3,oneof" json:"where,omitempty" msg:"231,omitempty"`  
	// Indicates the yearly interval of the appointment or meeting.
	YearInterval *int32 `protobuf:"varint,116,opt,name=year_interval,json=yearInterval,proto3,oneof" json:"year_interval,omitempty" msg:"202,omitempty"`  
	LocationUrl *string `protobuf:"bytes,117,opt,name=location_url,json=locationUrl,proto3,oneof" json:"location_url,omitempty"`
	// Specifies whether to allow the meeting to be forwarded.
	MeetingDoNotForward *bool `protobuf:"varint,118,opt,name=meeting_do_not_forward,json=meetingDoNotForward,proto3,oneof" json:"meeting_do_not_forward,omitempty"`
	// Specifies the end time, in UTC, of the publishing range.
	FreeBusyPublishEnd *int32 `protobuf:"varint,119,opt,name=free_busy_publish_end,json=freeBusyPublishEnd,proto3,oneof" json:"free_busy_publish_end,omitempty" msg:"266963,omitempty"`  
	// Specifies the start time, in UTC, of the publishing range.
	FreeBusyPublishStart *int32 `protobuf:"varint,120,opt,name=free_busy_publish_start,json=freeBusyPublishStart,proto3,oneof" json:"free_busy_publish_start,omitempty" msg:"266953,omitempty"`  
	// Specifies the time, in UTC, that the data was published.
	FreeBusyRangeTimestamp *int64 `protobuf:"varint,121,opt,name=free_busy_range_timestamp,json=freeBusyRangeTimestamp,proto3,oneof" json:"free_busy_range_timestamp,omitempty" msg:"2672864,omitempty"`  
	// Contains the date and time, in UTC, when an appointment or meeting ends.
	ICalendarEndTime *int64 `protobuf:"varint,122,opt,name=i_calendar_end_time,json=iCalendarEndTime,proto3,oneof" json:"i_calendar_end_time,omitempty" msg:"429264,omitempty"`  
	// Contains the date and time, in UTC, for the activation of the next reminder.
	ICalendarReminderNextTime *int64 `protobuf:"varint,123,opt,name=i_calendar_reminder_next_time,json=iCalendarReminderNextTime,proto3,oneof" json:"i_calendar_reminder_next_time,omitempty" msg:"429864,omitempty"`  
	// Indicates whether a client has already processed a received task communication.
	Processed *bool `protobuf:"varint,124,opt,name=processed,proto3,oneof" json:"processed,omitempty" msg:"3200111,omitempty"`  
	// Contains a list of tombstones, where each tombstone represents a Meeting object that has been declined.
	ScheduleInfoAppointmentTombstone []byte `protobuf:"bytes,125,opt,name=schedule_info_appointment_tombstone,json=scheduleInfoAppointmentTombstone,proto3,oneof" json:"schedule_info_appointment_tombstone,omitempty" msg:"26730258,omitempty"`  
	// Indicates whether a client or server is to automatically respond to all meeting requests for the attendee or resource.
	ScheduleInfoAutoAcceptAppointments *bool `protobuf:"varint,126,opt,name=schedule_info_auto_accept_appointments,json=scheduleInfoAutoAcceptAppointments,proto3,oneof" json:"schedule_info_auto_accept_appointments,omitempty" msg:"2673311,omitempty"`  
	// Indicates whether the delegator wants to receive copies of the meeting-related objects that are sent to the delegate.
	ScheduleInfoDelegatorWantsCopy *bool `protobuf:"varint,130,opt,name=schedule_info_delegator_wants_copy,json=scheduleInfoDelegatorWantsCopy,proto3,oneof" json:"schedule_info_delegator_wants_copy,omitempty" msg:"2669011,omitempty"`  
	// Indicates whether the delegator wants to receive informational updates.
	ScheduleInfoDelegatorWantsInfo *bool `protobuf:"varint,131,opt,name=schedule_info_delegator_wants_info,json=scheduleInfoDelegatorWantsInfo,proto3,oneof" json:"schedule_info_delegator_wants_info,omitempty" msg:"2669911,omitempty"`  
	// Indicates whether a client or server, when automatically responding to meeting requests, is to decline Meeting Request objects that overlap with previously scheduled events.
	ScheduleInfoDisallowOverlappingAppts *bool `protobuf:"varint,132,opt,name=schedule_info_disallow_overlapping_appts,json=scheduleInfoDisallowOverlappingAppts,proto3,oneof" json:"schedule_info_disallow_overlapping_appts,omitempty" msg:"2673511,omitempty"`  
	// Indicates whether a client or server, when automatically responding to meeting requests, is to decline Meeting Request objects that represent a recurring series.
	ScheduleInfoDisallowRecurringAppts *bool `protobuf:"varint,133,opt,name=schedule_info_disallow_recurring_appts,json=scheduleInfoDisallowRecurringAppts,proto3,oneof" json:"schedule_info_disallow_recurring_appts,omitempty" msg:"2673411,omitempty"`  
	// Contains a value set to TRUE by the client, regardless of user input.
	ScheduleInfoDontMailDelegates *bool `protobuf:"varint,134,opt,name=schedule_info_dont_mail_delegates,json=scheduleInfoDontMailDelegates,proto3,oneof" json:"schedule_info_dont_mail_delegates,omitempty" msg:"2669111,omitempty"`  
	// This property is deprecated and is not to be used.
	ScheduleInfoFreeBusy []byte `protobuf:"bytes,135,opt,name=schedule_info_free_busy,json=scheduleInfoFreeBusy,proto3,oneof" json:"schedule_info_free_busy,omitempty" msg:"26732258,omitempty"`  
	// Set to 0x00000000 when sending and is ignored on receipt.
	ScheduleInfoResourceType *int32 `protobuf:"varint,144,opt,name=schedule_info_resource_type,json=scheduleInfoResourceType,proto3,oneof" json:"schedule_info_resource_type,omitempty" msg:"266893,omitempty"`  
}

func (x *Appointment) Reset() {
	*x = Appointment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appointment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appointment) ProtoMessage() {}

func (x *Appointment) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appointment.ProtoReflect.Descriptor instead.
func (*Appointment) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{0}
}

func (x *Appointment) GetAllAttendeesString() string {
	if x != nil && x.AllAttendeesString != nil {
		return *x.AllAttendeesString
	}
	return ""
}

func (x *Appointment) GetAllowExternalCheck() bool {
	if x != nil && x.AllowExternalCheck != nil {
		return *x.AllowExternalCheck
	}
	return false
}

func (x *Appointment) GetAppointmentAuxiliaryFlags() int32 {
	if x != nil && x.AppointmentAuxiliaryFlags != nil {
		return *x.AppointmentAuxiliaryFlags
	}
	return 0
}

func (x *Appointment) GetAppointmentColor() int32 {
	if x != nil && x.AppointmentColor != nil {
		return *x.AppointmentColor
	}
	return 0
}

func (x *Appointment) GetAppointmentCounterProposal() bool {
	if x != nil && x.AppointmentCounterProposal != nil {
		return *x.AppointmentCounterProposal
	}
	return false
}

func (x *Appointment) GetAppointmentDuration() int32 {
	if x != nil && x.AppointmentDuration != nil {
		return *x.AppointmentDuration
	}
	return 0
}

func (x *Appointment) GetAppointmentEndDate() int64 {
	if x != nil && x.AppointmentEndDate != nil {
		return *x.AppointmentEndDate
	}
	return 0
}

func (x *Appointment) GetAppointmentEndTime() int64 {
	if x != nil && x.AppointmentEndTime != nil {
		return *x.AppointmentEndTime
	}
	return 0
}

func (x *Appointment) GetAppointmentEndWhole() int64 {
	if x != nil && x.AppointmentEndWhole != nil {
		return *x.AppointmentEndWhole
	}
	return 0
}

func (x *Appointment) GetAppointmentLastSequence() int32 {
	if x != nil && x.AppointmentLastSequence != nil {
		return *x.AppointmentLastSequence
	}
	return 0
}

func (x *Appointment) GetAppointmentMessageClass() string {
	if x != nil && x.AppointmentMessageClass != nil {
		return *x.AppointmentMessageClass
	}
	return ""
}

func (x *Appointment) GetAppointmentNotAllowPropose() bool {
	if x != nil && x.AppointmentNotAllowPropose != nil {
		return *x.AppointmentNotAllowPropose
	}
	return false
}

func (x *Appointment) GetAppointmentProposalNumber() int32 {
	if x != nil && x.AppointmentProposalNumber != nil {
		return *x.AppointmentProposalNumber
	}
	return 0
}

func (x *Appointment) GetAppointmentProposedDuration() int32 {
	if x != nil && x.AppointmentProposedDuration != nil {
		return *x.AppointmentProposedDuration
	}
	return 0
}

func (x *Appointment) GetAppointmentProposedEndWhole() int64 {
	if x != nil && x.AppointmentProposedEndWhole != nil {
		return *x.AppointmentProposedEndWhole
	}
	return 0
}

func (x *Appointment) GetAppointmentProposedStartWhole() int64 {
	if x != nil && x.AppointmentProposedStartWhole != nil {
		return *x.AppointmentProposedStartWhole
	}
	return 0
}

func (x *Appointment) GetAppointmentRecur() []byte {
	if x != nil {
		return x.AppointmentRecur
	}
	return nil
}

func (x *Appointment) GetAppointmentReplyName() string {
	if x != nil && x.AppointmentReplyName != nil {
		return *x.AppointmentReplyName
	}
	return ""
}

func (x *Appointment) GetAppointmentReplyTime() int64 {
	if x != nil && x.AppointmentReplyTime != nil {
		return *x.AppointmentReplyTime
	}
	return 0
}

func (x *Appointment) GetAppointmentSequence() int32 {
	if x != nil && x.AppointmentSequence != nil {
		return *x.AppointmentSequence
	}
	return 0
}

func (x *Appointment) GetAppointmentSequenceTime() int64 {
	if x != nil && x.AppointmentSequenceTime != nil {
		return *x.AppointmentSequenceTime
	}
	return 0
}

func (x *Appointment) GetAppointmentStartDate() int64 {
	if x != nil && x.AppointmentStartDate != nil {
		return *x.AppointmentStartDate
	}
	return 0
}

func (x *Appointment) GetAppointmentStartTime() int64 {
	if x != nil && x.AppointmentStartTime != nil {
		return *x.AppointmentStartTime
	}
	return 0
}

func (x *Appointment) GetAppointmentStartWhole() int64 {
	if x != nil && x.AppointmentStartWhole != nil {
		return *x.AppointmentStartWhole
	}
	return 0
}

func (x *Appointment) GetAppointmentStateFlags() int32 {
	if x != nil && x.AppointmentStateFlags != nil {
		return *x.AppointmentStateFlags
	}
	return 0
}

func (x *Appointment) GetAppointmentSubType() bool {
	if x != nil && x.AppointmentSubType != nil {
		return *x.AppointmentSubType
	}
	return false
}

func (x *Appointment) GetAppointmentTimeZoneDefinitionEndDisplay() []byte {
	if x != nil {
		return x.AppointmentTimeZoneDefinitionEndDisplay
	}
	return nil
}

func (x *Appointment) GetAppointmentTimeZoneDefinitionRecur() []byte {
	if x != nil {
		return x.AppointmentTimeZoneDefinitionRecur
	}
	return nil
}

func (x *Appointment) GetAppointmentTimeZoneDefinitionStartDisplay() []byte {
	if x != nil {
		return x.AppointmentTimeZoneDefinitionStartDisplay
	}
	return nil
}

func (x *Appointment) GetAppointmentUnsendableRecipients() []byte {
	if x != nil {
		return x.AppointmentUnsendableRecipients
	}
	return nil
}

func (x *Appointment) GetAppointmentUpdateTime() int64 {
	if x != nil && x.AppointmentUpdateTime != nil {
		return *x.AppointmentUpdateTime
	}
	return 0
}

func (x *Appointment) GetAttendeeCriticalChange() int64 {
	if x != nil && x.AttendeeCriticalChange != nil {
		return *x.AttendeeCriticalChange
	}
	return 0
}

func (x *Appointment) GetAutoFillLocation() bool {
	if x != nil && x.AutoFillLocation != nil {
		return *x.AutoFillLocation
	}
	return false
}

func (x *Appointment) GetAutoStartCheck() bool {
	if x != nil && x.AutoStartCheck != nil {
		return *x.AutoStartCheck
	}
	return false
}

func (x *Appointment) GetBusyStatus() int32 {
	if x != nil && x.BusyStatus != nil {
		return *x.BusyStatus
	}
	return 0
}

func (x *Appointment) GetCalendarType() int32 {
	if x != nil && x.CalendarType != nil {
		return *x.CalendarType
	}
	return 0
}

func (x *Appointment) GetCcAttendeesString() string {
	if x != nil && x.CcAttendeesString != nil {
		return *x.CcAttendeesString
	}
	return ""
}

func (x *Appointment) GetChangeHighlight() int32 {
	if x != nil && x.ChangeHighlight != nil {
		return *x.ChangeHighlight
	}
	return 0
}

func (x *Appointment) GetCleanGlobalObjectId() []byte {
	if x != nil {
		return x.CleanGlobalObjectId
	}
	return nil
}

func (x *Appointment) GetClientIntent() int32 {
	if x != nil && x.ClientIntent != nil {
		return *x.ClientIntent
	}
	return 0
}

func (x *Appointment) GetClipEnd() int64 {
	if x != nil && x.ClipEnd != nil {
		return *x.ClipEnd
	}
	return 0
}

func (x *Appointment) GetClipStart() int64 {
	if x != nil && x.ClipStart != nil {
		return *x.ClipStart
	}
	return 0
}

func (x *Appointment) GetCollaborateDoc() string {
	if x != nil && x.CollaborateDoc != nil {
		return *x.CollaborateDoc
	}
	return ""
}

func (x *Appointment) GetConferencingCheck() bool {
	if x != nil && x.ConferencingCheck != nil {
		return *x.ConferencingCheck
	}
	return false
}

func (x *Appointment) GetConferencingType() int32 {
	if x != nil && x.ConferencingType != nil {
		return *x.ConferencingType
	}
	return 0
}

func (x *Appointment) GetDayInterval() int32 {
	if x != nil && x.DayInterval != nil {
		return *x.DayInterval
	}
	return 0
}

func (x *Appointment) GetDayOfMonth() int32 {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return 0
}

func (x *Appointment) GetDelegateMail() bool {
	if x != nil && x.DelegateMail != nil {
		return *x.DelegateMail
	}
	return false
}

func (x *Appointment) GetDirectory() string {
	if x != nil && x.Directory != nil {
		return *x.Directory
	}
	return ""
}

func (x *Appointment) GetEndRecurrenceDate() int32 {
	if x != nil && x.EndRecurrenceDate != nil {
		return *x.EndRecurrenceDate
	}
	return 0
}

func (x *Appointment) GetEndRecurrenceTime() int32 {
	if x != nil && x.EndRecurrenceTime != nil {
		return *x.EndRecurrenceTime
	}
	return 0
}

func (x *Appointment) GetExceptionReplaceTime() int64 {
	if x != nil && x.ExceptionReplaceTime != nil {
		return *x.ExceptionReplaceTime
	}
	return 0
}

func (x *Appointment) GetFExceptionalAttendees() bool {
	if x != nil && x.FExceptionalAttendees != nil {
		return *x.FExceptionalAttendees
	}
	return false
}

func (x *Appointment) GetFExceptionalBody() bool {
	if x != nil && x.FExceptionalBody != nil {
		return *x.FExceptionalBody
	}
	return false
}

func (x *Appointment) GetFInvited() bool {
	if x != nil && x.FInvited != nil {
		return *x.FInvited
	}
	return false
}

func (x *Appointment) GetForwardInstance() bool {
	if x != nil && x.ForwardInstance != nil {
		return *x.ForwardInstance
	}
	return false
}

func (x *Appointment) GetForwardNotificationRecipients() []byte {
	if x != nil {
		return x.ForwardNotificationRecipients
	}
	return nil
}

func (x *Appointment) GetFOthersAppointment() bool {
	if x != nil && x.FOthersAppointment != nil {
		return *x.FOthersAppointment
	}
	return false
}

func (x *Appointment) GetGlobalObjectId() []byte {
	if x != nil {
		return x.GlobalObjectId
	}
	return nil
}

func (x *Appointment) GetICalendarDayOfWeekMask() int32 {
	if x != nil && x.ICalendarDayOfWeekMask != nil {
		return *x.ICalendarDayOfWeekMask
	}
	return 0
}

func (x *Appointment) GetInboundiCalStream() []byte {
	if x != nil {
		return x.InboundiCalStream
	}
	return nil
}

func (x *Appointment) GetIntendedBusyStatus() int32 {
	if x != nil && x.IntendedBusyStatus != nil {
		return *x.IntendedBusyStatus
	}
	return 0
}

func (x *Appointment) GetIsException() bool {
	if x != nil && x.IsException != nil {
		return *x.IsException
	}
	return false
}

func (x *Appointment) GetIsRecurring() bool {
	if x != nil && x.IsRecurring != nil {
		return *x.IsRecurring
	}
	return false
}

func (x *Appointment) GetIsSilent() bool {
	if x != nil && x.IsSilent != nil {
		return *x.IsSilent
	}
	return false
}

func (x *Appointment) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *Appointment) GetMeetingType() int32 {
	if x != nil && x.MeetingType != nil {
		return *x.MeetingType
	}
	return 0
}

func (x *Appointment) GetMeetingWorkspaceUrl() string {
	if x != nil && x.MeetingWorkspaceUrl != nil {
		return *x.MeetingWorkspaceUrl
	}
	return ""
}

func (x *Appointment) GetMonthInterval() int32 {
	if x != nil && x.MonthInterval != nil {
		return *x.MonthInterval
	}
	return 0
}

func (x *Appointment) GetMonthOfYear() int32 {
	if x != nil && x.MonthOfYear != nil {
		return *x.MonthOfYear
	}
	return 0
}

func (x *Appointment) GetMonthOfYearMask() int32 {
	if x != nil && x.MonthOfYearMask != nil {
		return *x.MonthOfYearMask
	}
	return 0
}

func (x *Appointment) GetNetShowUrl() string {
	if x != nil && x.NetShowUrl != nil {
		return *x.NetShowUrl
	}
	return ""
}

func (x *Appointment) GetNoEndDateFlag() bool {
	if x != nil && x.NoEndDateFlag != nil {
		return *x.NoEndDateFlag
	}
	return false
}

func (x *Appointment) GetNonSendableBcc() string {
	if x != nil && x.NonSendableBcc != nil {
		return *x.NonSendableBcc
	}
	return ""
}

func (x *Appointment) GetNonSendableCc() string {
	if x != nil && x.NonSendableCc != nil {
		return *x.NonSendableCc
	}
	return ""
}

func (x *Appointment) GetNonSendableTo() string {
	if x != nil && x.NonSendableTo != nil {
		return *x.NonSendableTo
	}
	return ""
}

func (x *Appointment) GetOccurrences() int32 {
	if x != nil && x.Occurrences != nil {
		return *x.Occurrences
	}
	return 0
}

func (x *Appointment) GetOldLocation() string {
	if x != nil && x.OldLocation != nil {
		return *x.OldLocation
	}
	return ""
}

func (x *Appointment) GetOldRecurrenceType() int32 {
	if x != nil && x.OldRecurrenceType != nil {
		return *x.OldRecurrenceType
	}
	return 0
}

func (x *Appointment) GetOldWhenEndWhole() int64 {
	if x != nil && x.OldWhenEndWhole != nil {
		return *x.OldWhenEndWhole
	}
	return 0
}

func (x *Appointment) GetOldWhenStartWhole() int64 {
	if x != nil && x.OldWhenStartWhole != nil {
		return *x.OldWhenStartWhole
	}
	return 0
}

func (x *Appointment) GetOnlinePassword() string {
	if x != nil && x.OnlinePassword != nil {
		return *x.OnlinePassword
	}
	return ""
}

func (x *Appointment) GetOptionalAttendees() string {
	if x != nil && x.OptionalAttendees != nil {
		return *x.OptionalAttendees
	}
	return ""
}

func (x *Appointment) GetOrganizerAlias() string {
	if x != nil && x.OrganizerAlias != nil {
		return *x.OrganizerAlias
	}
	return ""
}

func (x *Appointment) GetOriginalStoreEntryId() []byte {
	if x != nil {
		return x.OriginalStoreEntryId
	}
	return nil
}

func (x *Appointment) GetOwnerCriticalChange() int64 {
	if x != nil && x.OwnerCriticalChange != nil {
		return *x.OwnerCriticalChange
	}
	return 0
}

func (x *Appointment) GetOwnerName() string {
	if x != nil && x.OwnerName != nil {
		return *x.OwnerName
	}
	return ""
}

func (x *Appointment) GetRecurrenceDuration() int32 {
	if x != nil && x.RecurrenceDuration != nil {
		return *x.RecurrenceDuration
	}
	return 0
}

func (x *Appointment) GetRecurrencePattern() string {
	if x != nil && x.RecurrencePattern != nil {
		return *x.RecurrencePattern
	}
	return ""
}

func (x *Appointment) GetRecurrenceType() int32 {
	if x != nil && x.RecurrenceType != nil {
		return *x.RecurrenceType
	}
	return 0
}

func (x *Appointment) GetRecurring() bool {
	if x != nil && x.Recurring != nil {
		return *x.Recurring
	}
	return false
}

func (x *Appointment) GetReminderDelta() int32 {
	if x != nil && x.ReminderDelta != nil {
		return *x.ReminderDelta
	}
	return 0
}

func (x *Appointment) GetReminderFileParameter() string {
	if x != nil && x.ReminderFileParameter != nil {
		return *x.ReminderFileParameter
	}
	return ""
}

func (x *Appointment) GetReminderOverride() bool {
	if x != nil && x.ReminderOverride != nil {
		return *x.ReminderOverride
	}
	return false
}

func (x *Appointment) GetReminderPlaySound() bool {
	if x != nil && x.ReminderPlaySound != nil {
		return *x.ReminderPlaySound
	}
	return false
}

func (x *Appointment) GetReminderSet() bool {
	if x != nil && x.ReminderSet != nil {
		return *x.ReminderSet
	}
	return false
}

func (x *Appointment) GetReminderSignalTime() int64 {
	if x != nil && x.ReminderSignalTime != nil {
		return *x.ReminderSignalTime
	}
	return 0
}

func (x *Appointment) GetReminderTime() int64 {
	if x != nil && x.ReminderTime != nil {
		return *x.ReminderTime
	}
	return 0
}

func (x *Appointment) GetReminderTimeDate() int64 {
	if x != nil && x.ReminderTimeDate != nil {
		return *x.ReminderTimeDate
	}
	return 0
}

func (x *Appointment) GetReminderTimeTime() int64 {
	if x != nil && x.ReminderTimeTime != nil {
		return *x.ReminderTimeTime
	}
	return 0
}

func (x *Appointment) GetReminderType() int32 {
	if x != nil && x.ReminderType != nil {
		return *x.ReminderType
	}
	return 0
}

func (x *Appointment) GetRequiredAttendees() string {
	if x != nil && x.RequiredAttendees != nil {
		return *x.RequiredAttendees
	}
	return ""
}

func (x *Appointment) GetResourceAttendees() string {
	if x != nil && x.ResourceAttendees != nil {
		return *x.ResourceAttendees
	}
	return ""
}

func (x *Appointment) GetResponseStatus() int32 {
	if x != nil && x.ResponseStatus != nil {
		return *x.ResponseStatus
	}
	return 0
}

func (x *Appointment) GetServerProcessed() bool {
	if x != nil && x.ServerProcessed != nil {
		return *x.ServerProcessed
	}
	return false
}

func (x *Appointment) GetServerProcessingActions() int32 {
	if x != nil && x.ServerProcessingActions != nil {
		return *x.ServerProcessingActions
	}
	return 0
}

func (x *Appointment) GetSingleBodyiCal() bool {
	if x != nil && x.SingleBodyiCal != nil {
		return *x.SingleBodyiCal
	}
	return false
}

func (x *Appointment) GetStartRecurrenceDate() int32 {
	if x != nil && x.StartRecurrenceDate != nil {
		return *x.StartRecurrenceDate
	}
	return 0
}

func (x *Appointment) GetStartRecurrenceTime() int32 {
	if x != nil && x.StartRecurrenceTime != nil {
		return *x.StartRecurrenceTime
	}
	return 0
}

func (x *Appointment) GetTimeZone() int32 {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return 0
}

func (x *Appointment) GetTimeZoneDescription() string {
	if x != nil && x.TimeZoneDescription != nil {
		return *x.TimeZoneDescription
	}
	return ""
}

func (x *Appointment) GetTimeZoneStruct() []byte {
	if x != nil {
		return x.TimeZoneStruct
	}
	return nil
}

func (x *Appointment) GetToAttendeesString() string {
	if x != nil && x.ToAttendeesString != nil {
		return *x.ToAttendeesString
	}
	return ""
}

func (x *Appointment) GetWeekInterval() int32 {
	if x != nil && x.WeekInterval != nil {
		return *x.WeekInterval
	}
	return 0
}

func (x *Appointment) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *Appointment) GetYearInterval() int32 {
	if x != nil && x.YearInterval != nil {
		return *x.YearInterval
	}
	return 0
}

func (x *Appointment) GetLocationUrl() string {
	if x != nil && x.LocationUrl != nil {
		return *x.LocationUrl
	}
	return ""
}

func (x *Appointment) GetMeetingDoNotForward() bool {
	if x != nil && x.MeetingDoNotForward != nil {
		return *x.MeetingDoNotForward
	}
	return false
}

func (x *Appointment) GetFreeBusyPublishEnd() int32 {
	if x != nil && x.FreeBusyPublishEnd != nil {
		return *x.FreeBusyPublishEnd
	}
	return 0
}

func (x *Appointment) GetFreeBusyPublishStart() int32 {
	if x != nil && x.FreeBusyPublishStart != nil {
		return *x.FreeBusyPublishStart
	}
	return 0
}

func (x *Appointment) GetFreeBusyRangeTimestamp() int64 {
	if x != nil && x.FreeBusyRangeTimestamp != nil {
		return *x.FreeBusyRangeTimestamp
	}
	return 0
}

func (x *Appointment) GetICalendarEndTime() int64 {
	if x != nil && x.ICalendarEndTime != nil {
		return *x.ICalendarEndTime
	}
	return 0
}

func (x *Appointment) GetICalendarReminderNextTime() int64 {
	if x != nil && x.ICalendarReminderNextTime != nil {
		return *x.ICalendarReminderNextTime
	}
	return 0
}

func (x *Appointment) GetProcessed() bool {
	if x != nil && x.Processed != nil {
		return *x.Processed
	}
	return false
}

func (x *Appointment) GetScheduleInfoAppointmentTombstone() []byte {
	if x != nil {
		return x.ScheduleInfoAppointmentTombstone
	}
	return nil
}

func (x *Appointment) GetScheduleInfoAutoAcceptAppointments() bool {
	if x != nil && x.ScheduleInfoAutoAcceptAppointments != nil {
		return *x.ScheduleInfoAutoAcceptAppointments
	}
	return false
}

func (x *Appointment) GetScheduleInfoDelegatorWantsCopy() bool {
	if x != nil && x.ScheduleInfoDelegatorWantsCopy != nil {
		return *x.ScheduleInfoDelegatorWantsCopy
	}
	return false
}

func (x *Appointment) GetScheduleInfoDelegatorWantsInfo() bool {
	if x != nil && x.ScheduleInfoDelegatorWantsInfo != nil {
		return *x.ScheduleInfoDelegatorWantsInfo
	}
	return false
}

func (x *Appointment) GetScheduleInfoDisallowOverlappingAppts() bool {
	if x != nil && x.ScheduleInfoDisallowOverlappingAppts != nil {
		return *x.ScheduleInfoDisallowOverlappingAppts
	}
	return false
}

func (x *Appointment) GetScheduleInfoDisallowRecurringAppts() bool {
	if x != nil && x.ScheduleInfoDisallowRecurringAppts != nil {
		return *x.ScheduleInfoDisallowRecurringAppts
	}
	return false
}

func (x *Appointment) GetScheduleInfoDontMailDelegates() bool {
	if x != nil && x.ScheduleInfoDontMailDelegates != nil {
		return *x.ScheduleInfoDontMailDelegates
	}
	return false
}

func (x *Appointment) GetScheduleInfoFreeBusy() []byte {
	if x != nil {
		return x.ScheduleInfoFreeBusy
	}
	return nil
}

func (x *Appointment) GetScheduleInfoResourceType() int32 {
	if x != nil && x.ScheduleInfoResourceType != nil {
		return *x.ScheduleInfoResourceType
	}
	return 0
}

var File_appointment_proto protoreflect.FileDescriptor

var file_appointment_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x52, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65,
	0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x19, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x03, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x1a, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52,
	0x13, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x12,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x19, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x09, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x1d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52,
	0x19, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a,
	0x1d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x1b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e,
	0x52, 0x1b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4c, 0x0a, 0x20, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77,
	0x68, 0x6f, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x1d, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x10, 0x52, 0x10, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12, 0x52, 0x14, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x19, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x14, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x15, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x16, 0x52, 0x14, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48, 0x17, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52,
	0x12, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x2c, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x1a, 0x52, 0x27,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x26, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x1b, 0x52, 0x22, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x1c, 0x52, 0x29, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x21, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x1d, 0x52, 0x1f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1e, 0x52,
	0x15, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1f, 0x52, 0x16, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x20, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x6c,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x08, 0x48, 0x21, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75,
	0x73, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x22, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x63,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x11, 0x63, 0x63, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x25, 0x52, 0x0f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x16, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x26, 0x52, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x27, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x03, 0x48, 0x28, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x45, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x29, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x70, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x2a, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x44,
	0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x2b, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x2c, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x2d, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0a, 0x64, 0x61, 0x79,
	0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x2f, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x31, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x32, 0x52, 0x11, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x33, 0x52, 0x14, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17,
	0x66, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x48, 0x34, 0x52,
	0x15, 0x66, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x5f, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x48, 0x35, 0x52, 0x10, 0x66, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x66, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x36, 0x52, 0x08, 0x66, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x48, 0x37, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x1f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x38, 0x52, 0x1d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x66,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x39, 0x52, 0x12, 0x66, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x3a, 0x52, 0x0e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x1b, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f,
	0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3b, 0x52, 0x16, 0x69, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x73, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x5f,
	0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x3c, 0x52, 0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x43, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x42, 0x75, 0x73, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3e, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3f, 0x52,
	0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x40, 0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x41, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x48, 0x42, 0x52, 0x0b, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x43, 0x52, 0x13, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x48, 0x44, 0x52, 0x0d, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x48, 0x45, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f,
	0x66, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x46, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59,
	0x65, 0x61, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x6e, 0x65,
	0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x47, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x48, 0x48, 0x52, 0x0d, 0x6e,
	0x6f, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x62, 0x63, 0x63, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x49, 0x52, 0x0e, 0x6e, 0x6f, 0x6e,
	0x53, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x63, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x63, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4a, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x53, 0x65,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4c, 0x52,
	0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4d, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x4e, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12,
	0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x68, 0x6f,
	0x6c, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x03, 0x48, 0x4f, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x57,
	0x68, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x03, 0x48, 0x50, 0x52, 0x11,
	0x6f, 0x6c, 0x64, 0x57, 0x68, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x68, 0x6f, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x48, 0x51, 0x52,
	0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x48, 0x52,
	0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x53, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x54, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x55, 0x52, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x48, 0x56, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x48, 0x57, 0x52, 0x12, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x58, 0x52, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x59, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x5a, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x5b, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x5d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5c, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x5d, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x5e, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x08, 0x48, 0x5f,
	0x52, 0x0b, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x03, 0x48, 0x60,
	0x52, 0x12, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x03, 0x48, 0x61,
	0x52, 0x0c, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x03, 0x48, 0x62, 0x52,
	0x10, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x63, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x48, 0x64,
	0x52, 0x0c, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x66, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x67, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x68, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x69, 0x52, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x6a, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x69, 0x43, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x6b, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x6c, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x6d, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6e, 0x52, 0x13, 0x74, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x6f,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x6f, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x70, 0x52, 0x11, 0x74, 0x6f, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x71, 0x52, 0x0c, 0x77, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x72, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x73, 0x52, 0x0c, 0x79, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x48, 0x74, 0x52,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x16, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x76, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x75, 0x52, 0x13, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x77, 0x20, 0x01, 0x28, 0x05, 0x48, 0x76, 0x52, 0x12, 0x66, 0x72, 0x65, 0x65,
	0x42, 0x75, 0x73, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x17, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x77, 0x52, 0x14, 0x66, 0x72, 0x65, 0x65, 0x42, 0x75, 0x73, 0x79, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x19, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x79, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x78, 0x52, 0x16, 0x66, 0x72, 0x65, 0x65, 0x42, 0x75, 0x73, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x13, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x79, 0x52, 0x10, 0x69, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x45, 0x0a, 0x1d, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f,
	0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x7a, 0x52, 0x19, 0x69, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x78,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x7b, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x23, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x7c, 0x52, 0x20, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x57, 0x0a, 0x26, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x7d, 0x52, 0x22, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x22, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x7e, 0x52, 0x1e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x57, 0x61,
	0x6e, 0x74, 0x73, 0x43, 0x6f, 0x70, 0x79, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x22, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x7f, 0x52, 0x1e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x57, 0x61, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x28,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x74, 0x73, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x80, 0x01, 0x52, 0x24, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x26, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x70, 0x74, 0x73, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x81, 0x01, 0x52,
	0x22, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x69, 0x73,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x21, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x86, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x82, 0x01, 0x52, 0x1d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x6f, 0x6e, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x75,
	0x73, 0x79, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x83, 0x01, 0x52, 0x14, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x65, 0x65, 0x42, 0x75,
	0x73, 0x79, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x84, 0x01, 0x52, 0x18,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75,
	0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x42, 0x23, 0x0a, 0x21,
	0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x68, 0x6f, 0x6c,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x2f, 0x0a, 0x2d, 0x5f,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x29, 0x0a, 0x27,
	0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x42, 0x31, 0x0a, 0x2f, 0x5f, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x63, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f,
	0x63, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x66, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x5f, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x5f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x5f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x74,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x6f,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x62, 0x63, 0x63, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x63, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x68, 0x65,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77,
	0x68, 0x6f, 0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62,
	0x75, 0x73, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f,
	0x69, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x26, 0x0a, 0x24, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x25,
	0x0a, 0x23, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x70, 0x79, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x2b, 0x0a, 0x29,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x74, 0x73, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x70, 0x70, 0x74, 0x73, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6f, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x67,
	0x6f, 0x2d, 0x70, 0x73, 0x74, 0x3b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_appointment_proto_rawDescOnce sync.Once
	file_appointment_proto_rawDescData = file_appointment_proto_rawDesc
)

func file_appointment_proto_rawDescGZIP() []byte {
	file_appointment_proto_rawDescOnce.Do(func() {
		file_appointment_proto_rawDescData = protoimpl.X.CompressGZIP(file_appointment_proto_rawDescData)
	})
	return file_appointment_proto_rawDescData
}

var file_appointment_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_appointment_proto_goTypes = []interface{}{
	(*Appointment)(nil), // 0: Appointment
}
var file_appointment_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_appointment_proto_init() }
func file_appointment_proto_init() {
	if File_appointment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_appointment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appointment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_appointment_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_appointment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_appointment_proto_goTypes,
		DependencyIndexes: file_appointment_proto_depIdxs,
		MessageInfos:      file_appointment_proto_msgTypes,
	}.Build()
	File_appointment_proto = out.File
	file_appointment_proto_rawDesc = nil
	file_appointment_proto_goTypes = nil
	file_appointment_proto_depIdxs = nil
}
