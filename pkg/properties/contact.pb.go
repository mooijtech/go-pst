// go-pst is a library for reading Personal Storage Table (.pst) files (written in Go/Golang).
//
// Copyright 2023 Marten Mooij
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//go:generate msgp -tests=false

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: contact.proto

package properties

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the state of the electronic addresses of the contact and represents a set of bit flags.
	AddressBookProviderArrayType *int32 `protobuf:"varint,1,opt,name=address_book_provider_array_type,json=addressBookProviderArrayType,proto3,oneof" json:"address_book_provider_array_type,omitempty" msg:"328093,omitempty"`  
	// Specifies the country code portion of the mailing address of the contact.
	AddressCountryCode *string `protobuf:"bytes,3,opt,name=address_country_code,json=addressCountryCode,proto3,oneof" json:"address_country_code,omitempty" msg:"3298931,omitempty"`  
	// Specifies the EntryID of the Appointment object that represents an anniversary of the contact.
	AnniversaryEventEntryId []byte `protobuf:"bytes,4,opt,name=anniversary_event_entry_id,json=anniversaryEventEntryId,proto3,oneof" json:"anniversary_event_entry_id,omitempty" msg:"32846258,omitempty"`  
	// Specifies to the application whether to create a Journal object for each action associated with this Contact object.
	AutoLog *bool `protobuf:"varint,5,opt,name=auto_log,json=autoLog,proto3,oneof" json:"auto_log,omitempty" msg:"3280511,omitempty"`  
	// Specifies the EntryID of an optional Appointment object that represents the birthday of the contact.
	BirthdayEventEntryId []byte `protobuf:"bytes,6,opt,name=birthday_event_entry_id,json=birthdayEventEntryId,proto3,oneof" json:"birthday_event_entry_id,omitempty" msg:"32845258,omitempty"`  
	// Specifies the birthday of a contact.
	BirthdayLocal *int64 `protobuf:"varint,7,opt,name=birthday_local,json=birthdayLocal,proto3,oneof" json:"birthday_local,omitempty" msg:"3299064,omitempty"`  
	// Contains the image to be used on a business card.
	BusinessCardCardPicture []byte `protobuf:"bytes,8,opt,name=business_card_card_picture,json=businessCardCardPicture,proto3,oneof" json:"business_card_card_picture,omitempty" msg:"32833258,omitempty"`  
	// Contains user customization details for displaying a contact as a business card.
	BusinessCardDisplayDefinition []byte `protobuf:"bytes,9,opt,name=business_card_display_definition,json=businessCardDisplayDefinition,proto3,oneof" json:"business_card_display_definition,omitempty" msg:"32832258,omitempty"`  
	// Specifies the character set used for a Contact object.
	ContactCharacterSet *int32 `protobuf:"varint,10,opt,name=contact_character_set,json=contactCharacterSet,proto3,oneof" json:"contact_character_set,omitempty" msg:"328033,omitempty"`  
	// Specifies the EntryID of the GAL contact to which the duplicate contact is linked.
	ContactLinkedGlobalAddressListEntryId []byte `protobuf:"bytes,12,opt,name=contact_linked_global_address_list_entry_id,json=contactLinkedGlobalAddressListEntryId,proto3,oneof" json:"contact_linked_global_address_list_entry_id,omitempty" msg:"32994258,omitempty"`  
	// Contains the elements of the PidLidContacts property (section 2.77).
	ContactLinkEntry []byte `protobuf:"bytes,13,opt,name=contact_link_entry,json=contactLinkEntry,proto3,oneof" json:"contact_link_entry,omitempty" msg:"34181258,omitempty"`  
	// Specifies the GUID of the GAL contact to which the duplicate contact is linked.
	ContactLinkGlobalAddressListLinkId *uint64 `protobuf:"varint,14,opt,name=contact_link_global_address_list_link_id,json=contactLinkGlobalAddressListLinkId,proto3,oneof" json:"contact_link_global_address_list_link_id,omitempty" msg:"3300072,omitempty"`  
	// Specifies the state of the linking between the GAL contact and the duplicate contact.
	ContactLinkGlobalAddressListLinkState *int32 `protobuf:"varint,15,opt,name=contact_link_global_address_list_link_state,json=contactLinkGlobalAddressListLinkState,proto3,oneof" json:"contact_link_global_address_list_link_state,omitempty" msg:"329983,omitempty"`  
	ContactLinkName *string `protobuf:"bytes,17,opt,name=contact_link_name,json=contactLinkName,proto3,oneof" json:"contact_link_name,omitempty" msg:"3418231,omitempty"`  
	// Contains the list of SearchKeys for a Contact object linked to by the Message object.
	ContactLinkSearchKey []byte `protobuf:"bytes,18,opt,name=contact_link_search_key,json=contactLinkSearchKey,proto3,oneof" json:"contact_link_search_key,omitempty" msg:"34180258,omitempty"`  
	// Contains text used to add custom text to a business card representation of a Contact object.
	ContactUserField1 *string `protobuf:"bytes,20,opt,name=contact_user_field1,json=contactUserField1,proto3,oneof" json:"contact_user_field1,omitempty" msg:"3284731,omitempty"`  
	// Contains text used to add custom text to a business card representation of a Contact object.
	ContactUserField2 *string `protobuf:"bytes,21,opt,name=contact_user_field2,json=contactUserField2,proto3,oneof" json:"contact_user_field2,omitempty" msg:"3284831,omitempty"`  
	// Contains text used to add custom text to a business card representation of a Contact object.
	ContactUserField3 *string `protobuf:"bytes,22,opt,name=contact_user_field3,json=contactUserField3,proto3,oneof" json:"contact_user_field3,omitempty" msg:"3284931,omitempty"`  
	// Contains text used to add custom text to a business card representation of a Contact object.
	ContactUserField4 *string `protobuf:"bytes,23,opt,name=contact_user_field4,json=contactUserField4,proto3,oneof" json:"contact_user_field4,omitempty" msg:"3285031,omitempty"`  
	// This property is ignored by the server and is set to an empty string by the client.
	Department *string `protobuf:"bytes,24,opt,name=department,proto3,oneof" json:"department,omitempty" msg:"3278431,omitempty"`  
	// Specifies the 32-bit cyclic redundancy check (CRC) polynomial checksum, as specified in [ISO/IEC8802-3], calculated on the value of the PidLidDistributionListMembers property (section 2.96).
	DistributionListChecksum *int32 `protobuf:"varint,25,opt,name=distribution_list_checksum,json=distributionListChecksum,proto3,oneof" json:"distribution_list_checksum,omitempty" msg:"328443,omitempty"`  
	// Specifies the name of the personal distribution list.
	DistributionListName *string `protobuf:"bytes,27,opt,name=distribution_list_name,json=distributionListName,proto3,oneof" json:"distribution_list_name,omitempty" msg:"3285131,omitempty"`  
	// Specifies the list of EntryIDs and one-off EntryIDs corresponding to the members of the personal distribution list.
	DistributionListStream []byte `protobuf:"bytes,29,opt,name=distribution_list_stream,json=distributionListStream,proto3,oneof" json:"distribution_list_stream,omitempty" msg:"32868258,omitempty"`  
	// Specifies the address type of an electronic address.
	Email1AddressType *string `protobuf:"bytes,30,opt,name=email1_address_type,json=email1AddressType,proto3,oneof" json:"email1_address_type,omitempty" msg:"3289831,omitempty"`  
	// Specifies the user-readable display name for the email address.
	Email1DisplayName *string `protobuf:"bytes,31,opt,name=email1_display_name,json=email1DisplayName,proto3,oneof" json:"email1_display_name,omitempty" msg:"3289631,omitempty"`  
	// Specifies the email address of the contact.
	Email1EmailAddress *string `protobuf:"bytes,32,opt,name=email1_email_address,json=email1EmailAddress,proto3,oneof" json:"email1_email_address,omitempty" msg:"3289931,omitempty"`  
	// Specifies the SMTP email address that corresponds to the email address for the Contact object.
	Email1OriginalDisplayName *string `protobuf:"bytes,33,opt,name=email1_original_display_name,json=email1OriginalDisplayName,proto3,oneof" json:"email1_original_display_name,omitempty" msg:"3290031,omitempty"`  
	// Specifies the EntryID of the object corresponding to this electronic address.
	Email1OriginalEntryId []byte `protobuf:"bytes,34,opt,name=email1_original_entry_id,json=email1OriginalEntryId,proto3,oneof" json:"email1_original_entry_id,omitempty" msg:"32901258,omitempty"`  
	// Specifies the address type of the electronic address.
	Email2AddressType *string `protobuf:"bytes,35,opt,name=email2_address_type,json=email2AddressType,proto3,oneof" json:"email2_address_type,omitempty" msg:"3291431,omitempty"`  
	// Specifies the user-readable display name for the email address.
	Email2DisplayName *string `protobuf:"bytes,36,opt,name=email2_display_name,json=email2DisplayName,proto3,oneof" json:"email2_display_name,omitempty" msg:"3291231,omitempty"`  
	// Specifies the email address of the contact.
	Email2EmailAddress *string `protobuf:"bytes,37,opt,name=email2_email_address,json=email2EmailAddress,proto3,oneof" json:"email2_email_address,omitempty" msg:"3291531,omitempty"`  
	// Specifies the SMTP email address that corresponds to the email address for the Contact object.
	Email2OriginalDisplayName *string `protobuf:"bytes,38,opt,name=email2_original_display_name,json=email2OriginalDisplayName,proto3,oneof" json:"email2_original_display_name,omitempty" msg:"3291631,omitempty"`  
	// Specifies the EntryID of the object that corresponds to this electronic address.
	Email2OriginalEntryId []byte `protobuf:"bytes,39,opt,name=email2_original_entry_id,json=email2OriginalEntryId,proto3,oneof" json:"email2_original_entry_id,omitempty" msg:"32917258,omitempty"`  
	// Specifies the address type of the electronic address.
	Email3AddressType *string `protobuf:"bytes,40,opt,name=email3_address_type,json=email3AddressType,proto3,oneof" json:"email3_address_type,omitempty" msg:"3293031,omitempty"`  
	// Specifies the user-readable display name for the email address.
	Email3DisplayName *string `protobuf:"bytes,41,opt,name=email3_display_name,json=email3DisplayName,proto3,oneof" json:"email3_display_name,omitempty" msg:"3292831,omitempty"`  
	// Specifies the email address of the contact.
	Email3EmailAddress *string `protobuf:"bytes,42,opt,name=email3_email_address,json=email3EmailAddress,proto3,oneof" json:"email3_email_address,omitempty" msg:"3293131,omitempty"`  
	// Specifies the SMTP email address that corresponds to the email address for the Contact object.
	Email3OriginalDisplayName *string `protobuf:"bytes,43,opt,name=email3_original_display_name,json=email3OriginalDisplayName,proto3,oneof" json:"email3_original_display_name,omitempty" msg:"3293231,omitempty"`  
	// Specifies the EntryID of the object that corresponds to this electronic address.
	Email3OriginalEntryId []byte `protobuf:"bytes,44,opt,name=email3_original_entry_id,json=email3OriginalEntryId,proto3,oneof" json:"email3_original_entry_id,omitempty" msg:"32933258,omitempty"`  
	// Contains the string value "FAX".
	Fax1AddressType *string `protobuf:"bytes,45,opt,name=fax1_address_type,json=fax1AddressType,proto3,oneof" json:"fax1_address_type,omitempty" msg:"3294631,omitempty"`  
	// Contains a user-readable display name, followed by the "@" character, followed by a fax number.
	Fax1EmailAddress *string `protobuf:"bytes,46,opt,name=fax1_email_address,json=fax1EmailAddress,proto3,oneof" json:"fax1_email_address,omitempty" msg:"3294731,omitempty"`  
	// Contains the same value as the PidTagNormalizedSubject property (section 2.812).
	Fax1OriginalDisplayName *string `protobuf:"bytes,47,opt,name=fax1_original_display_name,json=fax1OriginalDisplayName,proto3,oneof" json:"fax1_original_display_name,omitempty" msg:"3294831,omitempty"`  
	// Specifies a one-off EntryID that corresponds to this fax address.
	Fax1OriginalEntryId []byte `protobuf:"bytes,48,opt,name=fax1_original_entry_id,json=fax1OriginalEntryId,proto3,oneof" json:"fax1_original_entry_id,omitempty" msg:"32949258,omitempty"`  
	// Contains the string value "FAX".
	Fax2AddressType *string `protobuf:"bytes,49,opt,name=fax2_address_type,json=fax2AddressType,proto3,oneof" json:"fax2_address_type,omitempty" msg:"3296231,omitempty"`  
	// Contains a user-readable display name, followed by the "@" character, followed by a fax number.
	Fax2EmailAddress *string `protobuf:"bytes,50,opt,name=fax2_email_address,json=fax2EmailAddress,proto3,oneof" json:"fax2_email_address,omitempty" msg:"3296331,omitempty"`  
	// Contains the same value as the PidTagNormalizedSubject property (section 2.812).
	Fax2OriginalDisplayName *string `protobuf:"bytes,51,opt,name=fax2_original_display_name,json=fax2OriginalDisplayName,proto3,oneof" json:"fax2_original_display_name,omitempty" msg:"3296431,omitempty"`  
	// Specifies a one-off EntryID corresponding to this fax address.
	Fax2OriginalEntryId []byte `protobuf:"bytes,52,opt,name=fax2_original_entry_id,json=fax2OriginalEntryId,proto3,oneof" json:"fax2_original_entry_id,omitempty" msg:"32965258,omitempty"`  
	// Contains the string value "FAX".
	Fax3AddressType *string `protobuf:"bytes,53,opt,name=fax3_address_type,json=fax3AddressType,proto3,oneof" json:"fax3_address_type,omitempty" msg:"3297831,omitempty"`  
	// Contains a user-readable display name, followed by the "@" character, followed by a fax number.
	Fax3EmailAddress *string `protobuf:"bytes,54,opt,name=fax3_email_address,json=fax3EmailAddress,proto3,oneof" json:"fax3_email_address,omitempty" msg:"3297931,omitempty"`  
	// Contains the same value as the PidTagNormalizedSubject property (section 2.812).
	Fax3OriginalDisplayName *string `protobuf:"bytes,55,opt,name=fax3_original_display_name,json=fax3OriginalDisplayName,proto3,oneof" json:"fax3_original_display_name,omitempty" msg:"3298031,omitempty"`  
	// Specifies a one-off EntryID that corresponds to this fax address.
	Fax3OriginalEntryId []byte `protobuf:"bytes,56,opt,name=fax3_original_entry_id,json=fax3OriginalEntryId,proto3,oneof" json:"fax3_original_entry_id,omitempty" msg:"32981258,omitempty"`  
	// Specifies the name under which to file a contact when displaying a list of contacts.
	FileUnder *string `protobuf:"bytes,57,opt,name=file_under,json=fileUnder,proto3,oneof" json:"file_under,omitempty" msg:"3277331,omitempty"`  
	// Specifies how to generate and recompute the value of the PidLidFileUnder property (section 2.132) when other contact name properties change.
	FileUnderId *int32 `protobuf:"varint,58,opt,name=file_under_id,json=fileUnderId,proto3,oneof" json:"file_under_id,omitempty" msg:"327743,omitempty"`  
	// Specifies a URL path from which a client can retrieve free/busy status information for the contact.
	FreeBusyLocation *string `protobuf:"bytes,60,opt,name=free_busy_location,json=freeBusyLocation,proto3,oneof" json:"free_busy_location,omitempty" msg:"3298431,omitempty"`  
	// Specifies whether the attachment has a picture.
	HasPicture *bool `protobuf:"varint,61,opt,name=has_picture,json=hasPicture,proto3,oneof" json:"has_picture,omitempty" msg:"3278911,omitempty"`  
	// Specifies the complete address of the home address of the contact.
	HomeAddress *string `protobuf:"bytes,62,opt,name=home_address,json=homeAddress,proto3,oneof" json:"home_address,omitempty" msg:"3279431,omitempty"`  
	// Specifies the country code portion of the home address of the contact.
	HomeAddressCountryCode *string `protobuf:"bytes,63,opt,name=home_address_country_code,json=homeAddressCountryCode,proto3,oneof" json:"home_address_country_code,omitempty" msg:"3298631,omitempty"`  
	// Specifies the business webpage URL of the contact.
	Html *string `protobuf:"bytes,64,opt,name=html,proto3,oneof" json:"html,omitempty" msg:"3281131,omitempty"`  
	// Specifies the instant messaging address of the contact.
	InstantMessagingAddress *string `protobuf:"bytes,65,opt,name=instant_messaging_address,json=instantMessagingAddress,proto3,oneof" json:"instant_messaging_address,omitempty" msg:"3286631,omitempty"`  
	// Specifies whether the contact is linked to other contacts.
	IsContactLinked *bool `protobuf:"varint,66,opt,name=is_contact_linked,json=isContactLinked,proto3,oneof" json:"is_contact_linked,omitempty" msg:"3299211,omitempty"`  
	// Specifies the complete address of the other address of the contact.
	OtherAddress *string `protobuf:"bytes,67,opt,name=other_address,json=otherAddress,proto3,oneof" json:"other_address,omitempty" msg:"3279631,omitempty"`  
	// Specifies the country code portion of the other address of the contact.
	OtherAddressCountryCode *string `protobuf:"bytes,68,opt,name=other_address_country_code,json=otherAddressCountryCode,proto3,oneof" json:"other_address_country_code,omitempty" msg:"3298831,omitempty"`  
	// Specifies which physical address is the mailing address for this contact.
	PostalAddressId *int32 `protobuf:"varint,69,opt,name=postal_address_id,json=postalAddressId,proto3,oneof" json:"postal_address_id,omitempty" msg:"328023,omitempty"`  
	// Specifies the value of the EntryID of the Contact object unless the Contact object is a copy of an earlier original.
	ReferenceEntryId []byte `protobuf:"bytes,70,opt,name=reference_entry_id,json=referenceEntryId,proto3,oneof" json:"reference_entry_id,omitempty" msg:"34237258,omitempty"`  
	// Specifies the wedding anniversary of the contact, at midnight in the client's local time zone, and is saved without any time zone conversions.
	WeddingAnniversaryLocal *int64 `protobuf:"varint,71,opt,name=wedding_anniversary_local,json=weddingAnniversaryLocal,proto3,oneof" json:"wedding_anniversary_local,omitempty" msg:"3299164,omitempty"`  
	// Specifies the complete address of the work address of the contact.
	WorkAddress *string `protobuf:"bytes,72,opt,name=work_address,json=workAddress,proto3,oneof" json:"work_address,omitempty" msg:"3279531,omitempty"`  
	// Specifies the city or locality portion of the work address of the contact.
	WorkAddressCity *string `protobuf:"bytes,73,opt,name=work_address_city,json=workAddressCity,proto3,oneof" json:"work_address_city,omitempty" msg:"3283831,omitempty"`  
	// Specifies the country or region portion of the work address of the contact.
	WorkAddressCountry *string `protobuf:"bytes,74,opt,name=work_address_country,json=workAddressCountry,proto3,oneof" json:"work_address_country,omitempty" msg:"3284131,omitempty"`  
	// Specifies the country code portion of the work address of the contact.
	WorkAddressCountryCode *string `protobuf:"bytes,75,opt,name=work_address_country_code,json=workAddressCountryCode,proto3,oneof" json:"work_address_country_code,omitempty" msg:"3298731,omitempty"`  
	// Specifies the postal code (ZIP code) portion of the work address of the contact.
	WorkAddressPostalCode *string `protobuf:"bytes,76,opt,name=work_address_postal_code,json=workAddressPostalCode,proto3,oneof" json:"work_address_postal_code,omitempty" msg:"3284031,omitempty"`  
	// Specifies the post office box portion of the work address of the contact.
	WorkAddressPostOfficeBox *string `protobuf:"bytes,77,opt,name=work_address_post_office_box,json=workAddressPostOfficeBox,proto3,oneof" json:"work_address_post_office_box,omitempty" msg:"3284231,omitempty"`  
	// Specifies the state or province portion of the work address of the contact.
	WorkAddressState *string `protobuf:"bytes,78,opt,name=work_address_state,json=workAddressState,proto3,oneof" json:"work_address_state,omitempty" msg:"3283931,omitempty"`  
	// Specifies the street portion of the work address of the contact.
	WorkAddressStreet *string `protobuf:"bytes,79,opt,name=work_address_street,json=workAddressStreet,proto3,oneof" json:"work_address_street,omitempty" msg:"3283731,omitempty"`  
	// Specifies the phonetic pronunciation of the company name of the contact.
	YomiCompanyName *string `protobuf:"bytes,80,opt,name=yomi_company_name,json=yomiCompanyName,proto3,oneof" json:"yomi_company_name,omitempty" msg:"3281431,omitempty"`  
	// Specifies the phonetic pronunciation of the given name of the contact.
	YomiFirstName *string `protobuf:"bytes,81,opt,name=yomi_first_name,json=yomiFirstName,proto3,oneof" json:"yomi_first_name,omitempty" msg:"3281231,omitempty"`  
	// Specifies the phonetic pronunciation of the surname of the contact.
	YomiLastName *string `protobuf:"bytes,82,opt,name=yomi_last_name,json=yomiLastName,proto3,oneof" json:"yomi_last_name,omitempty" msg:"3281331,omitempty"`  
	// Indicates the name of the contact associated with the birthday event.
	BirthdayContactAttributionDisplayName *string `protobuf:"bytes,83,opt,name=birthday_contact_attribution_display_name,json=birthdayContactAttributionDisplayName,proto3,oneof" json:"birthday_contact_attribution_display_name,omitempty"`
	// Indicate the EntryID of the contact associated with the birthday event.
	BirthdayContactEntryId []byte `protobuf:"bytes,84,opt,name=birthday_contact_entry_id,json=birthdayContactEntryId,proto3,oneof" json:"birthday_contact_entry_id,omitempty"`
	// Indicates the person ID's GUID of the contact associated with the birthday event.
	BirthdayContactPersonGuid []byte `protobuf:"bytes,85,opt,name=birthday_contact_person_guid,json=birthdayContactPersonGuid,proto3,oneof" json:"birthday_contact_person_guid,omitempty"`
	// Indicates whether the contact associated with the birthday event is writable.
	IsBirthdayContactWritable *bool `protobuf:"varint,86,opt,name=is_birthday_contact_writable,json=isBirthdayContactWritable,proto3,oneof" json:"is_birthday_contact_writable,omitempty"`
	// Contains the date of the mail user's birthday at midnight.
	Birthday *int64 `protobuf:"varint,87,opt,name=birthday,proto3,oneof" json:"birthday,omitempty" msg:"1491464,omitempty"`  
	// Contains a secondary telephone number at the mail user's place of business.
	Business2TelephoneNumber *string `protobuf:"bytes,88,opt,name=business2_telephone_number,json=business2TelephoneNumber,proto3,oneof" json:"business2_telephone_number,omitempty" msg:"1487531,omitempty"`  
	// Contains the telephone number of the mail user's business fax machine.
	BusinessFaxNumber *string `protobuf:"bytes,90,opt,name=business_fax_number,json=businessFaxNumber,proto3,oneof" json:"business_fax_number,omitempty" msg:"1488431,omitempty"`  
	// Contains the URL of the mail user's business home page.
	BusinessHomePage *string `protobuf:"bytes,91,opt,name=business_home_page,json=businessHomePage,proto3,oneof" json:"business_home_page,omitempty" msg:"1492931,omitempty"`  
	// Contains the primary telephone number of the mail user's place of business.
	BusinessTelephoneNumber *string `protobuf:"bytes,92,opt,name=business_telephone_number,json=businessTelephoneNumber,proto3,oneof" json:"business_telephone_number,omitempty" msg:"1485631,omitempty"`  
	// Contains a telephone number to reach the mail user.
	CallbackTelephoneNumber *string `protobuf:"bytes,93,opt,name=callback_telephone_number,json=callbackTelephoneNumber,proto3,oneof" json:"callback_telephone_number,omitempty" msg:"1485031,omitempty"`  
	// Contains the mail user's car telephone number.
	CarTelephoneNumber *string `protobuf:"bytes,94,opt,name=car_telephone_number,json=carTelephoneNumber,proto3,oneof" json:"car_telephone_number,omitempty" msg:"1487831,omitempty"`  
	// Contains the main telephone number of the mail user's company.
	CompanyMainTelephoneNumber *string `protobuf:"bytes,96,opt,name=company_main_telephone_number,json=companyMainTelephoneNumber,proto3,oneof" json:"company_main_telephone_number,omitempty" msg:"1493531,omitempty"`  
	// Contains the mail user's company name.
	CompanyName *string `protobuf:"bytes,97,opt,name=company_name,json=companyName,proto3,oneof" json:"company_name,omitempty" msg:"1487031,omitempty"`  
	// Contains the name of the mail user's computer network.
	ComputerNetworkName *string `protobuf:"bytes,98,opt,name=computer_network_name,json=computerNetworkName,proto3,oneof" json:"computer_network_name,omitempty" msg:"1492131,omitempty"`  
	// Contains the name of the mail user's country/region.
	Country *string `protobuf:"bytes,99,opt,name=country,proto3,oneof" json:"country,omitempty" msg:"1488631,omitempty"`  
	// Contains the mail user's customer identification number.
	CustomerId *string `protobuf:"bytes,100,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty" msg:"1492231,omitempty"`  
	// Contains a name for the department in which the mail user works.
	DepartmentName *string `protobuf:"bytes,101,opt,name=department_name,json=departmentName,proto3,oneof" json:"department_name,omitempty" msg:"1487231,omitempty"`  
	// Contains the mail user's honorific title.
	DisplayNamePrefix *string `protobuf:"bytes,102,opt,name=display_name_prefix,json=displayNamePrefix,proto3,oneof" json:"display_name_prefix,omitempty" msg:"1491731,omitempty"`  
	// Contains the File Transfer Protocol (FTP) site address of the mail user.
	FtpSite *string `protobuf:"bytes,103,opt,name=ftp_site,json=ftpSite,proto3,oneof" json:"ftp_site,omitempty" msg:"1492431,omitempty"`  
	// Contains a value that represents the mail user's gender.
	Gender *int32 `protobuf:"varint,104,opt,name=gender,proto3,oneof" json:"gender,omitempty" msg:"149252,omitempty"`  
	// Contains a generational abbreviation that follows the full name of the mail user.
	Generation *string `protobuf:"bytes,105,opt,name=generation,proto3,oneof" json:"generation,omitempty" msg:"1485331,omitempty"`  
	// Contains the mail user's given name.
	GivenName *string `protobuf:"bytes,106,opt,name=given_name,json=givenName,proto3,oneof" json:"given_name,omitempty" msg:"1485431,omitempty"`  
	// Contains a government identifier for the mail user.
	GovernmentIdNumber *string `protobuf:"bytes,107,opt,name=government_id_number,json=governmentIdNumber,proto3,oneof" json:"government_id_number,omitempty" msg:"1485531,omitempty"`  
	// Contains the names of the mail user's hobbies.
	Hobbies *string `protobuf:"bytes,108,opt,name=hobbies,proto3,oneof" json:"hobbies,omitempty" msg:"1491531,omitempty"`  
	// Contains a secondary telephone number at the mail user's home.
	Home2TelephoneNumber *string `protobuf:"bytes,109,opt,name=home2_telephone_number,json=home2TelephoneNumber,proto3,oneof" json:"home2_telephone_number,omitempty" msg:"1489531,omitempty"`  
	// Contains the name of the mail user's home locality, such as the town or city.
	HomeAddressCity *string `protobuf:"bytes,111,opt,name=home_address_city,json=homeAddressCity,proto3,oneof" json:"home_address_city,omitempty" msg:"1493731,omitempty"`  
	// Contains the name of the mail user's home country/region.
	HomeAddressCountry *string `protobuf:"bytes,112,opt,name=home_address_country,json=homeAddressCountry,proto3,oneof" json:"home_address_country,omitempty" msg:"1493831,omitempty"`  
	// Contains the postal code for the mail user's home postal address.
	HomeAddressPostalCode *string `protobuf:"bytes,113,opt,name=home_address_postal_code,json=homeAddressPostalCode,proto3,oneof" json:"home_address_postal_code,omitempty" msg:"1493931,omitempty"`  
	// Contains the number or identifier of the mail user's home post office box.
	HomeAddressPostOfficeBox *string `protobuf:"bytes,114,opt,name=home_address_post_office_box,json=homeAddressPostOfficeBox,proto3,oneof" json:"home_address_post_office_box,omitempty" msg:"1494231,omitempty"`  
	// Contains the name of the mail user's home state or province.
	HomeAddressStateOrProvince *string `protobuf:"bytes,115,opt,name=home_address_state_or_province,json=homeAddressStateOrProvince,proto3,oneof" json:"home_address_state_or_province,omitempty" msg:"1494031,omitempty"`  
	// Contains the mail user's home street address.
	HomeAddressStreet *string `protobuf:"bytes,116,opt,name=home_address_street,json=homeAddressStreet,proto3,oneof" json:"home_address_street,omitempty" msg:"1494131,omitempty"`  
	// Contains the telephone number of the mail user's home fax machine.
	HomeFaxNumber *string `protobuf:"bytes,117,opt,name=home_fax_number,json=homeFaxNumber,proto3,oneof" json:"home_fax_number,omitempty" msg:"1488531,omitempty"`  
	// Contains the primary telephone number of the mail user's home.
	HomeTelephoneNumber *string `protobuf:"bytes,118,opt,name=home_telephone_number,json=homeTelephoneNumber,proto3,oneof" json:"home_telephone_number,omitempty" msg:"1485731,omitempty"`  
	// Specifies whether contact synchronization with an external source is handled by the server.
	OscSyncEnabled *bool `protobuf:"varint,119,opt,name=osc_sync_enabled,json=oscSyncEnabled,proto3,oneof" json:"osc_sync_enabled,omitempty" msg:"3178011,omitempty"`  
	// Contains the URL of the mail user's personal home page.
	PersonalHomePage *string `protobuf:"bytes,120,opt,name=personal_home_page,json=personalHomePage,proto3,oneof" json:"personal_home_page,omitempty" msg:"1492831,omitempty"`  
	// Contains the mail user's postal address.
	PostalAddress *string `protobuf:"bytes,121,opt,name=postal_address,json=postalAddress,proto3,oneof" json:"postal_address,omitempty" msg:"1486931,omitempty"`  
	// Contains the postal code for the mail user's postal address.
	PostalCode *string `protobuf:"bytes,122,opt,name=postal_code,json=postalCode,proto3,oneof" json:"postal_code,omitempty" msg:"1489031,omitempty"`  
	// Contains the number or identifier of the mail user's post office box.
	PostOfficeBox *string `protobuf:"bytes,123,opt,name=post_office_box,json=postOfficeBox,proto3,oneof" json:"post_office_box,omitempty" msg:"1489131,omitempty"`  
	// Contains the telephone number of the mail user's primary fax machine.
	PrimaryFaxNumber *string `protobuf:"bytes,124,opt,name=primary_fax_number,json=primaryFaxNumber,proto3,oneof" json:"primary_fax_number,omitempty" msg:"1488331,omitempty"`  
	// Contains the mail user's primary telephone number.
	PrimaryTelephoneNumber *string `protobuf:"bytes,125,opt,name=primary_telephone_number,json=primaryTelephoneNumber,proto3,oneof" json:"primary_telephone_number,omitempty" msg:"1487431,omitempty"`  
	// Contains the name of the mail user's line of business.
	Profession *string `protobuf:"bytes,126,opt,name=profession,proto3,oneof" json:"profession,omitempty" msg:"1491831,omitempty"`  
	// Contains the mail user's radio telephone number.
	RadioTelephoneNumber *string `protobuf:"bytes,127,opt,name=radio_telephone_number,json=radioTelephoneNumber,proto3,oneof" json:"radio_telephone_number,omitempty" msg:"1487731,omitempty"`  
	// Contains the name of the mail user's referral.
	ReferredByName *string `protobuf:"bytes,128,opt,name=referred_by_name,json=referredByName,proto3,oneof" json:"referred_by_name,omitempty" msg:"1491931,omitempty"`  
	// Contains the name of the mail user's spouse/partner.
	SpouseName *string `protobuf:"bytes,129,opt,name=spouse_name,json=spouseName,proto3,oneof" json:"spouse_name,omitempty" msg:"1492031,omitempty"`  
	// Contains the name of the mail user's state or province.
	StateOrProvince *string `protobuf:"bytes,130,opt,name=state_or_province,json=stateOrProvince,proto3,oneof" json:"state_or_province,omitempty" msg:"1488831,omitempty"`  
	// Contains the mail user's street address.
	StreetAddress *string `protobuf:"bytes,131,opt,name=street_address,json=streetAddress,proto3,oneof" json:"street_address,omitempty" msg:"1488931,omitempty"`  
	// Contains the mail user's family name.
	Surname *string `protobuf:"bytes,132,opt,name=surname,proto3,oneof" json:"surname,omitempty" msg:"1486531,omitempty"`  
	// Contains the mail user's telecommunication device for the deaf (TTY/TDD) telephone number.
	TelecommunicationsDeviceForDeafTelephoneNumber *string `protobuf:"bytes,133,opt,name=telecommunications_device_for_deaf_telephone_number,json=telecommunicationsDeviceForDeafTelephoneNumber,proto3,oneof" json:"telecommunications_device_for_deaf_telephone_number,omitempty" msg:"1492331,omitempty"`  
	// Contains the mail user's telex number. This property is returned from an NSPI server as a PtypMultipleBinary. Otherwise, the data type is PtypString.
	TelexNumber *string `protobuf:"bytes,134,opt,name=telex_number,json=telexNumber,proto3,oneof" json:"telex_number,omitempty" msg:"1489231,omitempty"`  
	// Contains the mail user's job title.
	Title *string `protobuf:"bytes,135,opt,name=title,proto3,oneof" json:"title,omitempty" msg:"1487131,omitempty"`  
	// Contains an ASN.1 authentication certificate for a messaging user.
	UserCertificate []byte `protobuf:"bytes,136,opt,name=user_certificate,json=userCertificate,proto3,oneof" json:"user_certificate,omitempty" msg:"14882258,omitempty"`  
	// Contains the date of the mail user's wedding anniversary.
	WeddingAnniversary *int64 `protobuf:"varint,138,opt,name=wedding_anniversary,json=weddingAnniversary,proto3,oneof" json:"wedding_anniversary,omitempty" msg:"1491364,omitempty"`  
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contact_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_contact_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_contact_proto_rawDescGZIP(), []int{0}
}

func (x *Contact) GetAddressBookProviderArrayType() int32 {
	if x != nil && x.AddressBookProviderArrayType != nil {
		return *x.AddressBookProviderArrayType
	}
	return 0
}

func (x *Contact) GetAddressCountryCode() string {
	if x != nil && x.AddressCountryCode != nil {
		return *x.AddressCountryCode
	}
	return ""
}

func (x *Contact) GetAnniversaryEventEntryId() []byte {
	if x != nil {
		return x.AnniversaryEventEntryId
	}
	return nil
}

func (x *Contact) GetAutoLog() bool {
	if x != nil && x.AutoLog != nil {
		return *x.AutoLog
	}
	return false
}

func (x *Contact) GetBirthdayEventEntryId() []byte {
	if x != nil {
		return x.BirthdayEventEntryId
	}
	return nil
}

func (x *Contact) GetBirthdayLocal() int64 {
	if x != nil && x.BirthdayLocal != nil {
		return *x.BirthdayLocal
	}
	return 0
}

func (x *Contact) GetBusinessCardCardPicture() []byte {
	if x != nil {
		return x.BusinessCardCardPicture
	}
	return nil
}

func (x *Contact) GetBusinessCardDisplayDefinition() []byte {
	if x != nil {
		return x.BusinessCardDisplayDefinition
	}
	return nil
}

func (x *Contact) GetContactCharacterSet() int32 {
	if x != nil && x.ContactCharacterSet != nil {
		return *x.ContactCharacterSet
	}
	return 0
}

func (x *Contact) GetContactLinkedGlobalAddressListEntryId() []byte {
	if x != nil {
		return x.ContactLinkedGlobalAddressListEntryId
	}
	return nil
}

func (x *Contact) GetContactLinkEntry() []byte {
	if x != nil {
		return x.ContactLinkEntry
	}
	return nil
}

func (x *Contact) GetContactLinkGlobalAddressListLinkId() uint64 {
	if x != nil && x.ContactLinkGlobalAddressListLinkId != nil {
		return *x.ContactLinkGlobalAddressListLinkId
	}
	return 0
}

func (x *Contact) GetContactLinkGlobalAddressListLinkState() int32 {
	if x != nil && x.ContactLinkGlobalAddressListLinkState != nil {
		return *x.ContactLinkGlobalAddressListLinkState
	}
	return 0
}

func (x *Contact) GetContactLinkName() string {
	if x != nil && x.ContactLinkName != nil {
		return *x.ContactLinkName
	}
	return ""
}

func (x *Contact) GetContactLinkSearchKey() []byte {
	if x != nil {
		return x.ContactLinkSearchKey
	}
	return nil
}

func (x *Contact) GetContactUserField1() string {
	if x != nil && x.ContactUserField1 != nil {
		return *x.ContactUserField1
	}
	return ""
}

func (x *Contact) GetContactUserField2() string {
	if x != nil && x.ContactUserField2 != nil {
		return *x.ContactUserField2
	}
	return ""
}

func (x *Contact) GetContactUserField3() string {
	if x != nil && x.ContactUserField3 != nil {
		return *x.ContactUserField3
	}
	return ""
}

func (x *Contact) GetContactUserField4() string {
	if x != nil && x.ContactUserField4 != nil {
		return *x.ContactUserField4
	}
	return ""
}

func (x *Contact) GetDepartment() string {
	if x != nil && x.Department != nil {
		return *x.Department
	}
	return ""
}

func (x *Contact) GetDistributionListChecksum() int32 {
	if x != nil && x.DistributionListChecksum != nil {
		return *x.DistributionListChecksum
	}
	return 0
}

func (x *Contact) GetDistributionListName() string {
	if x != nil && x.DistributionListName != nil {
		return *x.DistributionListName
	}
	return ""
}

func (x *Contact) GetDistributionListStream() []byte {
	if x != nil {
		return x.DistributionListStream
	}
	return nil
}

func (x *Contact) GetEmail1AddressType() string {
	if x != nil && x.Email1AddressType != nil {
		return *x.Email1AddressType
	}
	return ""
}

func (x *Contact) GetEmail1DisplayName() string {
	if x != nil && x.Email1DisplayName != nil {
		return *x.Email1DisplayName
	}
	return ""
}

func (x *Contact) GetEmail1EmailAddress() string {
	if x != nil && x.Email1EmailAddress != nil {
		return *x.Email1EmailAddress
	}
	return ""
}

func (x *Contact) GetEmail1OriginalDisplayName() string {
	if x != nil && x.Email1OriginalDisplayName != nil {
		return *x.Email1OriginalDisplayName
	}
	return ""
}

func (x *Contact) GetEmail1OriginalEntryId() []byte {
	if x != nil {
		return x.Email1OriginalEntryId
	}
	return nil
}

func (x *Contact) GetEmail2AddressType() string {
	if x != nil && x.Email2AddressType != nil {
		return *x.Email2AddressType
	}
	return ""
}

func (x *Contact) GetEmail2DisplayName() string {
	if x != nil && x.Email2DisplayName != nil {
		return *x.Email2DisplayName
	}
	return ""
}

func (x *Contact) GetEmail2EmailAddress() string {
	if x != nil && x.Email2EmailAddress != nil {
		return *x.Email2EmailAddress
	}
	return ""
}

func (x *Contact) GetEmail2OriginalDisplayName() string {
	if x != nil && x.Email2OriginalDisplayName != nil {
		return *x.Email2OriginalDisplayName
	}
	return ""
}

func (x *Contact) GetEmail2OriginalEntryId() []byte {
	if x != nil {
		return x.Email2OriginalEntryId
	}
	return nil
}

func (x *Contact) GetEmail3AddressType() string {
	if x != nil && x.Email3AddressType != nil {
		return *x.Email3AddressType
	}
	return ""
}

func (x *Contact) GetEmail3DisplayName() string {
	if x != nil && x.Email3DisplayName != nil {
		return *x.Email3DisplayName
	}
	return ""
}

func (x *Contact) GetEmail3EmailAddress() string {
	if x != nil && x.Email3EmailAddress != nil {
		return *x.Email3EmailAddress
	}
	return ""
}

func (x *Contact) GetEmail3OriginalDisplayName() string {
	if x != nil && x.Email3OriginalDisplayName != nil {
		return *x.Email3OriginalDisplayName
	}
	return ""
}

func (x *Contact) GetEmail3OriginalEntryId() []byte {
	if x != nil {
		return x.Email3OriginalEntryId
	}
	return nil
}

func (x *Contact) GetFax1AddressType() string {
	if x != nil && x.Fax1AddressType != nil {
		return *x.Fax1AddressType
	}
	return ""
}

func (x *Contact) GetFax1EmailAddress() string {
	if x != nil && x.Fax1EmailAddress != nil {
		return *x.Fax1EmailAddress
	}
	return ""
}

func (x *Contact) GetFax1OriginalDisplayName() string {
	if x != nil && x.Fax1OriginalDisplayName != nil {
		return *x.Fax1OriginalDisplayName
	}
	return ""
}

func (x *Contact) GetFax1OriginalEntryId() []byte {
	if x != nil {
		return x.Fax1OriginalEntryId
	}
	return nil
}

func (x *Contact) GetFax2AddressType() string {
	if x != nil && x.Fax2AddressType != nil {
		return *x.Fax2AddressType
	}
	return ""
}

func (x *Contact) GetFax2EmailAddress() string {
	if x != nil && x.Fax2EmailAddress != nil {
		return *x.Fax2EmailAddress
	}
	return ""
}

func (x *Contact) GetFax2OriginalDisplayName() string {
	if x != nil && x.Fax2OriginalDisplayName != nil {
		return *x.Fax2OriginalDisplayName
	}
	return ""
}

func (x *Contact) GetFax2OriginalEntryId() []byte {
	if x != nil {
		return x.Fax2OriginalEntryId
	}
	return nil
}

func (x *Contact) GetFax3AddressType() string {
	if x != nil && x.Fax3AddressType != nil {
		return *x.Fax3AddressType
	}
	return ""
}

func (x *Contact) GetFax3EmailAddress() string {
	if x != nil && x.Fax3EmailAddress != nil {
		return *x.Fax3EmailAddress
	}
	return ""
}

func (x *Contact) GetFax3OriginalDisplayName() string {
	if x != nil && x.Fax3OriginalDisplayName != nil {
		return *x.Fax3OriginalDisplayName
	}
	return ""
}

func (x *Contact) GetFax3OriginalEntryId() []byte {
	if x != nil {
		return x.Fax3OriginalEntryId
	}
	return nil
}

func (x *Contact) GetFileUnder() string {
	if x != nil && x.FileUnder != nil {
		return *x.FileUnder
	}
	return ""
}

func (x *Contact) GetFileUnderId() int32 {
	if x != nil && x.FileUnderId != nil {
		return *x.FileUnderId
	}
	return 0
}

func (x *Contact) GetFreeBusyLocation() string {
	if x != nil && x.FreeBusyLocation != nil {
		return *x.FreeBusyLocation
	}
	return ""
}

func (x *Contact) GetHasPicture() bool {
	if x != nil && x.HasPicture != nil {
		return *x.HasPicture
	}
	return false
}

func (x *Contact) GetHomeAddress() string {
	if x != nil && x.HomeAddress != nil {
		return *x.HomeAddress
	}
	return ""
}

func (x *Contact) GetHomeAddressCountryCode() string {
	if x != nil && x.HomeAddressCountryCode != nil {
		return *x.HomeAddressCountryCode
	}
	return ""
}

func (x *Contact) GetHtml() string {
	if x != nil && x.Html != nil {
		return *x.Html
	}
	return ""
}

func (x *Contact) GetInstantMessagingAddress() string {
	if x != nil && x.InstantMessagingAddress != nil {
		return *x.InstantMessagingAddress
	}
	return ""
}

func (x *Contact) GetIsContactLinked() bool {
	if x != nil && x.IsContactLinked != nil {
		return *x.IsContactLinked
	}
	return false
}

func (x *Contact) GetOtherAddress() string {
	if x != nil && x.OtherAddress != nil {
		return *x.OtherAddress
	}
	return ""
}

func (x *Contact) GetOtherAddressCountryCode() string {
	if x != nil && x.OtherAddressCountryCode != nil {
		return *x.OtherAddressCountryCode
	}
	return ""
}

func (x *Contact) GetPostalAddressId() int32 {
	if x != nil && x.PostalAddressId != nil {
		return *x.PostalAddressId
	}
	return 0
}

func (x *Contact) GetReferenceEntryId() []byte {
	if x != nil {
		return x.ReferenceEntryId
	}
	return nil
}

func (x *Contact) GetWeddingAnniversaryLocal() int64 {
	if x != nil && x.WeddingAnniversaryLocal != nil {
		return *x.WeddingAnniversaryLocal
	}
	return 0
}

func (x *Contact) GetWorkAddress() string {
	if x != nil && x.WorkAddress != nil {
		return *x.WorkAddress
	}
	return ""
}

func (x *Contact) GetWorkAddressCity() string {
	if x != nil && x.WorkAddressCity != nil {
		return *x.WorkAddressCity
	}
	return ""
}

func (x *Contact) GetWorkAddressCountry() string {
	if x != nil && x.WorkAddressCountry != nil {
		return *x.WorkAddressCountry
	}
	return ""
}

func (x *Contact) GetWorkAddressCountryCode() string {
	if x != nil && x.WorkAddressCountryCode != nil {
		return *x.WorkAddressCountryCode
	}
	return ""
}

func (x *Contact) GetWorkAddressPostalCode() string {
	if x != nil && x.WorkAddressPostalCode != nil {
		return *x.WorkAddressPostalCode
	}
	return ""
}

func (x *Contact) GetWorkAddressPostOfficeBox() string {
	if x != nil && x.WorkAddressPostOfficeBox != nil {
		return *x.WorkAddressPostOfficeBox
	}
	return ""
}

func (x *Contact) GetWorkAddressState() string {
	if x != nil && x.WorkAddressState != nil {
		return *x.WorkAddressState
	}
	return ""
}

func (x *Contact) GetWorkAddressStreet() string {
	if x != nil && x.WorkAddressStreet != nil {
		return *x.WorkAddressStreet
	}
	return ""
}

func (x *Contact) GetYomiCompanyName() string {
	if x != nil && x.YomiCompanyName != nil {
		return *x.YomiCompanyName
	}
	return ""
}

func (x *Contact) GetYomiFirstName() string {
	if x != nil && x.YomiFirstName != nil {
		return *x.YomiFirstName
	}
	return ""
}

func (x *Contact) GetYomiLastName() string {
	if x != nil && x.YomiLastName != nil {
		return *x.YomiLastName
	}
	return ""
}

func (x *Contact) GetBirthdayContactAttributionDisplayName() string {
	if x != nil && x.BirthdayContactAttributionDisplayName != nil {
		return *x.BirthdayContactAttributionDisplayName
	}
	return ""
}

func (x *Contact) GetBirthdayContactEntryId() []byte {
	if x != nil {
		return x.BirthdayContactEntryId
	}
	return nil
}

func (x *Contact) GetBirthdayContactPersonGuid() []byte {
	if x != nil {
		return x.BirthdayContactPersonGuid
	}
	return nil
}

func (x *Contact) GetIsBirthdayContactWritable() bool {
	if x != nil && x.IsBirthdayContactWritable != nil {
		return *x.IsBirthdayContactWritable
	}
	return false
}

func (x *Contact) GetBirthday() int64 {
	if x != nil && x.Birthday != nil {
		return *x.Birthday
	}
	return 0
}

func (x *Contact) GetBusiness2TelephoneNumber() string {
	if x != nil && x.Business2TelephoneNumber != nil {
		return *x.Business2TelephoneNumber
	}
	return ""
}

func (x *Contact) GetBusinessFaxNumber() string {
	if x != nil && x.BusinessFaxNumber != nil {
		return *x.BusinessFaxNumber
	}
	return ""
}

func (x *Contact) GetBusinessHomePage() string {
	if x != nil && x.BusinessHomePage != nil {
		return *x.BusinessHomePage
	}
	return ""
}

func (x *Contact) GetBusinessTelephoneNumber() string {
	if x != nil && x.BusinessTelephoneNumber != nil {
		return *x.BusinessTelephoneNumber
	}
	return ""
}

func (x *Contact) GetCallbackTelephoneNumber() string {
	if x != nil && x.CallbackTelephoneNumber != nil {
		return *x.CallbackTelephoneNumber
	}
	return ""
}

func (x *Contact) GetCarTelephoneNumber() string {
	if x != nil && x.CarTelephoneNumber != nil {
		return *x.CarTelephoneNumber
	}
	return ""
}

func (x *Contact) GetCompanyMainTelephoneNumber() string {
	if x != nil && x.CompanyMainTelephoneNumber != nil {
		return *x.CompanyMainTelephoneNumber
	}
	return ""
}

func (x *Contact) GetCompanyName() string {
	if x != nil && x.CompanyName != nil {
		return *x.CompanyName
	}
	return ""
}

func (x *Contact) GetComputerNetworkName() string {
	if x != nil && x.ComputerNetworkName != nil {
		return *x.ComputerNetworkName
	}
	return ""
}

func (x *Contact) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *Contact) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *Contact) GetDepartmentName() string {
	if x != nil && x.DepartmentName != nil {
		return *x.DepartmentName
	}
	return ""
}

func (x *Contact) GetDisplayNamePrefix() string {
	if x != nil && x.DisplayNamePrefix != nil {
		return *x.DisplayNamePrefix
	}
	return ""
}

func (x *Contact) GetFtpSite() string {
	if x != nil && x.FtpSite != nil {
		return *x.FtpSite
	}
	return ""
}

func (x *Contact) GetGender() int32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *Contact) GetGeneration() string {
	if x != nil && x.Generation != nil {
		return *x.Generation
	}
	return ""
}

func (x *Contact) GetGivenName() string {
	if x != nil && x.GivenName != nil {
		return *x.GivenName
	}
	return ""
}

func (x *Contact) GetGovernmentIdNumber() string {
	if x != nil && x.GovernmentIdNumber != nil {
		return *x.GovernmentIdNumber
	}
	return ""
}

func (x *Contact) GetHobbies() string {
	if x != nil && x.Hobbies != nil {
		return *x.Hobbies
	}
	return ""
}

func (x *Contact) GetHome2TelephoneNumber() string {
	if x != nil && x.Home2TelephoneNumber != nil {
		return *x.Home2TelephoneNumber
	}
	return ""
}

func (x *Contact) GetHomeAddressCity() string {
	if x != nil && x.HomeAddressCity != nil {
		return *x.HomeAddressCity
	}
	return ""
}

func (x *Contact) GetHomeAddressCountry() string {
	if x != nil && x.HomeAddressCountry != nil {
		return *x.HomeAddressCountry
	}
	return ""
}

func (x *Contact) GetHomeAddressPostalCode() string {
	if x != nil && x.HomeAddressPostalCode != nil {
		return *x.HomeAddressPostalCode
	}
	return ""
}

func (x *Contact) GetHomeAddressPostOfficeBox() string {
	if x != nil && x.HomeAddressPostOfficeBox != nil {
		return *x.HomeAddressPostOfficeBox
	}
	return ""
}

func (x *Contact) GetHomeAddressStateOrProvince() string {
	if x != nil && x.HomeAddressStateOrProvince != nil {
		return *x.HomeAddressStateOrProvince
	}
	return ""
}

func (x *Contact) GetHomeAddressStreet() string {
	if x != nil && x.HomeAddressStreet != nil {
		return *x.HomeAddressStreet
	}
	return ""
}

func (x *Contact) GetHomeFaxNumber() string {
	if x != nil && x.HomeFaxNumber != nil {
		return *x.HomeFaxNumber
	}
	return ""
}

func (x *Contact) GetHomeTelephoneNumber() string {
	if x != nil && x.HomeTelephoneNumber != nil {
		return *x.HomeTelephoneNumber
	}
	return ""
}

func (x *Contact) GetOscSyncEnabled() bool {
	if x != nil && x.OscSyncEnabled != nil {
		return *x.OscSyncEnabled
	}
	return false
}

func (x *Contact) GetPersonalHomePage() string {
	if x != nil && x.PersonalHomePage != nil {
		return *x.PersonalHomePage
	}
	return ""
}

func (x *Contact) GetPostalAddress() string {
	if x != nil && x.PostalAddress != nil {
		return *x.PostalAddress
	}
	return ""
}

func (x *Contact) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *Contact) GetPostOfficeBox() string {
	if x != nil && x.PostOfficeBox != nil {
		return *x.PostOfficeBox
	}
	return ""
}

func (x *Contact) GetPrimaryFaxNumber() string {
	if x != nil && x.PrimaryFaxNumber != nil {
		return *x.PrimaryFaxNumber
	}
	return ""
}

func (x *Contact) GetPrimaryTelephoneNumber() string {
	if x != nil && x.PrimaryTelephoneNumber != nil {
		return *x.PrimaryTelephoneNumber
	}
	return ""
}

func (x *Contact) GetProfession() string {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return ""
}

func (x *Contact) GetRadioTelephoneNumber() string {
	if x != nil && x.RadioTelephoneNumber != nil {
		return *x.RadioTelephoneNumber
	}
	return ""
}

func (x *Contact) GetReferredByName() string {
	if x != nil && x.ReferredByName != nil {
		return *x.ReferredByName
	}
	return ""
}

func (x *Contact) GetSpouseName() string {
	if x != nil && x.SpouseName != nil {
		return *x.SpouseName
	}
	return ""
}

func (x *Contact) GetStateOrProvince() string {
	if x != nil && x.StateOrProvince != nil {
		return *x.StateOrProvince
	}
	return ""
}

func (x *Contact) GetStreetAddress() string {
	if x != nil && x.StreetAddress != nil {
		return *x.StreetAddress
	}
	return ""
}

func (x *Contact) GetSurname() string {
	if x != nil && x.Surname != nil {
		return *x.Surname
	}
	return ""
}

func (x *Contact) GetTelecommunicationsDeviceForDeafTelephoneNumber() string {
	if x != nil && x.TelecommunicationsDeviceForDeafTelephoneNumber != nil {
		return *x.TelecommunicationsDeviceForDeafTelephoneNumber
	}
	return ""
}

func (x *Contact) GetTelexNumber() string {
	if x != nil && x.TelexNumber != nil {
		return *x.TelexNumber
	}
	return ""
}

func (x *Contact) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Contact) GetUserCertificate() []byte {
	if x != nil {
		return x.UserCertificate
	}
	return nil
}

func (x *Contact) GetWeddingAnniversary() int64 {
	if x != nil && x.WeddingAnniversary != nil {
		return *x.WeddingAnniversary
	}
	return 0
}

var File_contact_proto protoreflect.FileDescriptor

var file_contact_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xef, 0x4e, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x4b, 0x0a, 0x20, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x1a, 0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x17, 0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x17, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x04, 0x52, 0x14, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52,
	0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x20, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x1d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x5f, 0x0a, 0x2b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x0a, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x28, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0b, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x5f, 0x0a, 0x2b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x0e, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x10, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x34, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x18,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x14, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x16, 0x52, 0x16, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x31, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x31, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52,
	0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x19,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x1b,
	0x52, 0x15, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x32, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x32, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x11,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x32, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1f, 0x52, 0x19, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x18, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x20, 0x52, 0x15, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x11,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x22, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x33, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x33, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x1c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x19, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x25, 0x52, 0x15, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x33, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x61, 0x78, 0x31, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x26, 0x52, 0x0f, 0x66, 0x61, 0x78, 0x31, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x61, 0x78, 0x31, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x27, 0x52, 0x10, 0x66, 0x61, 0x78, 0x31, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x66, 0x61, 0x78, 0x31,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x17,
	0x66, 0x61, 0x78, 0x31, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x66, 0x61,
	0x78, 0x31, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x29, 0x52, 0x13, 0x66, 0x61,
	0x78, 0x31, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x61, 0x78, 0x32, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2a, 0x52, 0x0f, 0x66, 0x61, 0x78, 0x32, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x61, 0x78, 0x32, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2b, 0x52, 0x10, 0x66, 0x61, 0x78, 0x32, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x66, 0x61, 0x78, 0x32,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x17,
	0x66, 0x61, 0x78, 0x32, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x66, 0x61,
	0x78, 0x32, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x2d, 0x52, 0x13, 0x66, 0x61,
	0x78, 0x32, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x61, 0x78, 0x33, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2e, 0x52, 0x0f, 0x66, 0x61, 0x78, 0x33, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x61, 0x78, 0x33, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2f, 0x52, 0x10, 0x66, 0x61, 0x78, 0x33, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x66, 0x61, 0x78, 0x33,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x17,
	0x66, 0x61, 0x78, 0x33, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x66, 0x61,
	0x78, 0x33, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x31, 0x52, 0x13, 0x66, 0x61,
	0x78, 0x33, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x33, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52,
	0x10, 0x66, 0x72, 0x65, 0x65, 0x42, 0x75, 0x73, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x35, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x36, 0x52, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37, 0x52, 0x16, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x38, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x39,
	0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3a, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3c, 0x52, 0x17, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x3e, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x19, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x47, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x3f, 0x52, 0x17, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x41, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x42, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x43, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x44, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x45, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x46, 0x52,
	0x10, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x47, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x79, 0x6f, 0x6d,
	0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52, 0x0f, 0x79, 0x6f, 0x6d, 0x69, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x79, 0x6f,
	0x6d, 0x69, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x49, 0x52, 0x0d, 0x79, 0x6f, 0x6d, 0x69, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x79, 0x6f, 0x6d, 0x69, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x4a, 0x52, 0x0c, 0x79, 0x6f, 0x6d, 0x69, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x5d, 0x0a, 0x29, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x25, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x19, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x4c, 0x52, 0x16, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x1c, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x4d, 0x52, 0x19, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x47, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x08, 0x48, 0x4e, 0x52,
	0x19, 0x69, 0x73, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x57, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x4f, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x41,
	0x0a, 0x1a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x32, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x50, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x32, 0x54,
	0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61,
	0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x51,
	0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x46, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x5b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x52, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x53, 0x52, 0x17,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x54, 0x52,
	0x17, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63,
	0x61, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x55, 0x52, 0x12, 0x63, 0x61, 0x72,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x48, 0x56, 0x52, 0x1a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x57, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x58, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x48, 0x59, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x5a, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5b, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5c, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x66, 0x74, 0x70, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5d, 0x52, 0x07, 0x66, 0x74, 0x70, 0x53, 0x69, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x5e, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x5f, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x60, 0x52, 0x09, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x61, 0x52, 0x12, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x68, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x62, 0x52, 0x07, 0x68, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x16, 0x68, 0x6f, 0x6d, 0x65, 0x32, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x63, 0x52, 0x14, 0x68, 0x6f, 0x6d, 0x65, 0x32, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x6f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x64, 0x52, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x48, 0x65, 0x52, 0x12, 0x68, 0x6f, 0x6d,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x66, 0x52, 0x15, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x1c, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x78,
	0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x48, 0x67, 0x52, 0x18, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x42,
	0x6f, 0x78, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1e, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x48, 0x68, 0x52,
	0x1a, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x48, 0x69, 0x52, 0x11, 0x68,
	0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6a, 0x52, 0x0d,
	0x68, 0x6f, 0x6d, 0x65, 0x46, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x6b, 0x52, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6f, 0x73, 0x63,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x77, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x6c, 0x52, 0x0e, 0x6f, 0x73, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x6d, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x79, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x6e, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6f, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x78,
	0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x70, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x78, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x71, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x46, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x18, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x72, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x7f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x74, 0x52, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x75, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x76, 0x52, 0x0a, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x77, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x78,
	0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x84, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x79, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x71, 0x0a, 0x33, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x66, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x7a, 0x52, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x44,
	0x65, 0x61, 0x66, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x65, 0x6c, 0x65, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7b, 0x52, 0x0b,
	0x74, 0x65, 0x6c, 0x65, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7c,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x88,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x7d, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x77,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x72, 0x79, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x7e, 0x52, 0x12, 0x77, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x1d, 0x0a, 0x1b, 0x5f,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x2e, 0x0a, 0x2c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x42, 0x2e, 0x0a,
	0x2c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1f,
	0x0a, 0x1d, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x31, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x32, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66,
	0x61, 0x78, 0x31, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x61, 0x78, 0x31, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x66, 0x61, 0x78, 0x31,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x66, 0x61, 0x78, 0x31, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x61, 0x78, 0x32, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x61, 0x78, 0x32,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x66, 0x61, 0x78, 0x32, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x66, 0x61, 0x78, 0x32, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x61, 0x78,
	0x33, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x66, 0x61, 0x78, 0x33, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x66, 0x61, 0x78, 0x33, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x66, 0x61, 0x78, 0x33, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x79,
	0x6f, 0x6d, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x2c, 0x0a, 0x2a, 0x5f, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x32,
	0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x66,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x1c,
	0x0a, 0x1a, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x63, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66,
	0x74, 0x70, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x32, 0x5f,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x42, 0x21, 0x0a,
	0x1f, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x66, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x73, 0x63, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x36, 0x0a, 0x34, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x66, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72,
	0x79, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x6f, 0x6f, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x73, 0x74,
	0x3b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_contact_proto_rawDescOnce sync.Once
	file_contact_proto_rawDescData = file_contact_proto_rawDesc
)

func file_contact_proto_rawDescGZIP() []byte {
	file_contact_proto_rawDescOnce.Do(func() {
		file_contact_proto_rawDescData = protoimpl.X.CompressGZIP(file_contact_proto_rawDescData)
	})
	return file_contact_proto_rawDescData
}

var file_contact_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_contact_proto_goTypes = []interface{}{
	(*Contact)(nil), // 0: Contact
}
var file_contact_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_contact_proto_init() }
func file_contact_proto_init() {
	if File_contact_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contact_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_contact_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contact_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contact_proto_goTypes,
		DependencyIndexes: file_contact_proto_depIdxs,
		MessageInfos:      file_contact_proto_msgTypes,
	}.Build()
	File_contact_proto = out.File
	file_contact_proto_rawDesc = nil
	file_contact_proto_goTypes = nil
	file_contact_proto_depIdxs = nil
}
