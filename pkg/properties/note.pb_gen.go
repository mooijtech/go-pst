package properties

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Note) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "355843":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NoteColor")
					return
				}
				z.NoteColor = nil
			} else {
				if z.NoteColor == nil {
					z.NoteColor = new(int32)
				}
				*z.NoteColor, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "NoteColor")
					return
				}
			}
		case "355873":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NoteHeight")
					return
				}
				z.NoteHeight = nil
			} else {
				if z.NoteHeight == nil {
					z.NoteHeight = new(int32)
				}
				*z.NoteHeight, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "NoteHeight")
					return
				}
			}
		case "355863":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NoteWidth")
					return
				}
				z.NoteWidth = nil
			} else {
				if z.NoteWidth == nil {
					z.NoteWidth = new(int32)
				}
				*z.NoteWidth, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "NoteWidth")
					return
				}
			}
		case "355883":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NoteX")
					return
				}
				z.NoteX = nil
			} else {
				if z.NoteX == nil {
					z.NoteX = new(int32)
				}
				*z.NoteX, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "NoteX")
					return
				}
			}
		case "355893":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NoteY")
					return
				}
				z.NoteY = nil
			} else {
				if z.NoteY == nil {
					z.NoteY = new(int32)
				}
				*z.NoteY, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "NoteY")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Note) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.NoteColor == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.NoteHeight == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.NoteWidth == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.NoteX == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.NoteY == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "355843"
		err = en.Append(0xa6, 0x33, 0x35, 0x35, 0x38, 0x34, 0x33)
		if err != nil {
			return
		}
		if z.NoteColor == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.NoteColor)
			if err != nil {
				err = msgp.WrapError(err, "NoteColor")
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "355873"
		err = en.Append(0xa6, 0x33, 0x35, 0x35, 0x38, 0x37, 0x33)
		if err != nil {
			return
		}
		if z.NoteHeight == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.NoteHeight)
			if err != nil {
				err = msgp.WrapError(err, "NoteHeight")
				return
			}
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "355863"
		err = en.Append(0xa6, 0x33, 0x35, 0x35, 0x38, 0x36, 0x33)
		if err != nil {
			return
		}
		if z.NoteWidth == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.NoteWidth)
			if err != nil {
				err = msgp.WrapError(err, "NoteWidth")
				return
			}
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "355883"
		err = en.Append(0xa6, 0x33, 0x35, 0x35, 0x38, 0x38, 0x33)
		if err != nil {
			return
		}
		if z.NoteX == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.NoteX)
			if err != nil {
				err = msgp.WrapError(err, "NoteX")
				return
			}
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "355893"
		err = en.Append(0xa6, 0x33, 0x35, 0x35, 0x38, 0x39, 0x33)
		if err != nil {
			return
		}
		if z.NoteY == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.NoteY)
			if err != nil {
				err = msgp.WrapError(err, "NoteY")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Note) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.NoteColor == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.NoteHeight == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.NoteWidth == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.NoteX == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.NoteY == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "355843"
		o = append(o, 0xa6, 0x33, 0x35, 0x35, 0x38, 0x34, 0x33)
		if z.NoteColor == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.NoteColor)
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "355873"
		o = append(o, 0xa6, 0x33, 0x35, 0x35, 0x38, 0x37, 0x33)
		if z.NoteHeight == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.NoteHeight)
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "355863"
		o = append(o, 0xa6, 0x33, 0x35, 0x35, 0x38, 0x36, 0x33)
		if z.NoteWidth == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.NoteWidth)
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "355883"
		o = append(o, 0xa6, 0x33, 0x35, 0x35, 0x38, 0x38, 0x33)
		if z.NoteX == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.NoteX)
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "355893"
		o = append(o, 0xa6, 0x33, 0x35, 0x35, 0x38, 0x39, 0x33)
		if z.NoteY == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.NoteY)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Note) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "355843":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NoteColor = nil
			} else {
				if z.NoteColor == nil {
					z.NoteColor = new(int32)
				}
				*z.NoteColor, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NoteColor")
					return
				}
			}
		case "355873":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NoteHeight = nil
			} else {
				if z.NoteHeight == nil {
					z.NoteHeight = new(int32)
				}
				*z.NoteHeight, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NoteHeight")
					return
				}
			}
		case "355863":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NoteWidth = nil
			} else {
				if z.NoteWidth == nil {
					z.NoteWidth = new(int32)
				}
				*z.NoteWidth, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NoteWidth")
					return
				}
			}
		case "355883":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NoteX = nil
			} else {
				if z.NoteX == nil {
					z.NoteX = new(int32)
				}
				*z.NoteX, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NoteX")
					return
				}
			}
		case "355893":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NoteY = nil
			} else {
				if z.NoteY == nil {
					z.NoteY = new(int32)
				}
				*z.NoteY, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NoteY")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Note) Msgsize() (s int) {
	s = 1 + 7
	if z.NoteColor == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.NoteHeight == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.NoteWidth == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.NoteX == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.NoteY == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	return
}
