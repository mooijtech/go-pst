package properties

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Voicemail) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AudioNotes":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AudioNotes")
					return
				}
				z.AudioNotes = nil
			} else {
				if z.AudioNotes == nil {
					z.AudioNotes = new(string)
				}
				*z.AudioNotes, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AudioNotes")
					return
				}
			}
		case "XCallId":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XCallId")
					return
				}
				z.XCallId = nil
			} else {
				if z.XCallId == nil {
					z.XCallId = new(string)
				}
				*z.XCallId, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XCallId")
					return
				}
			}
		case "XFaxNumberOfPages":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XFaxNumberOfPages")
					return
				}
				z.XFaxNumberOfPages = nil
			} else {
				if z.XFaxNumberOfPages == nil {
					z.XFaxNumberOfPages = new(int32)
				}
				*z.XFaxNumberOfPages, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "XFaxNumberOfPages")
					return
				}
			}
		case "XRequireProtectedPlayOnPhone":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XRequireProtectedPlayOnPhone")
					return
				}
				z.XRequireProtectedPlayOnPhone = nil
			} else {
				if z.XRequireProtectedPlayOnPhone == nil {
					z.XRequireProtectedPlayOnPhone = new(bool)
				}
				*z.XRequireProtectedPlayOnPhone, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "XRequireProtectedPlayOnPhone")
					return
				}
			}
		case "XSenderTelephoneNumber":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSenderTelephoneNumber")
					return
				}
				z.XSenderTelephoneNumber = nil
			} else {
				if z.XSenderTelephoneNumber == nil {
					z.XSenderTelephoneNumber = new(string)
				}
				*z.XSenderTelephoneNumber, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSenderTelephoneNumber")
					return
				}
			}
		case "XVoiceMessageAttachmentOrder":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XVoiceMessageAttachmentOrder")
					return
				}
				z.XVoiceMessageAttachmentOrder = nil
			} else {
				if z.XVoiceMessageAttachmentOrder == nil {
					z.XVoiceMessageAttachmentOrder = new(string)
				}
				*z.XVoiceMessageAttachmentOrder, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XVoiceMessageAttachmentOrder")
					return
				}
			}
		case "XVoiceMessageDuration":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XVoiceMessageDuration")
					return
				}
				z.XVoiceMessageDuration = nil
			} else {
				if z.XVoiceMessageDuration == nil {
					z.XVoiceMessageDuration = new(int32)
				}
				*z.XVoiceMessageDuration, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "XVoiceMessageDuration")
					return
				}
			}
		case "XVoiceMessageSenderName":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XVoiceMessageSenderName")
					return
				}
				z.XVoiceMessageSenderName = nil
			} else {
				if z.XVoiceMessageSenderName == nil {
					z.XVoiceMessageSenderName = new(string)
				}
				*z.XVoiceMessageSenderName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XVoiceMessageSenderName")
					return
				}
			}
		case "26630-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "CallId")
					return
				}
				z.CallId = nil
			} else {
				if z.CallId == nil {
					z.CallId = new(string)
				}
				*z.CallId, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "CallId")
					return
				}
			}
		case "26628-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FaxNumberOfPages")
					return
				}
				z.FaxNumberOfPages = nil
			} else {
				if z.FaxNumberOfPages == nil {
					z.FaxNumberOfPages = new(int32)
				}
				*z.FaxNumberOfPages, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "FaxNumberOfPages")
					return
				}
			}
		case "26626-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SenderTelephoneNumber")
					return
				}
				z.SenderTelephoneNumber = nil
			} else {
				if z.SenderTelephoneNumber == nil {
					z.SenderTelephoneNumber = new(string)
				}
				*z.SenderTelephoneNumber, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SenderTelephoneNumber")
					return
				}
			}
		case "26629-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "VoiceMessageAttachmentOrder")
					return
				}
				z.VoiceMessageAttachmentOrder = nil
			} else {
				if z.VoiceMessageAttachmentOrder == nil {
					z.VoiceMessageAttachmentOrder = new(string)
				}
				*z.VoiceMessageAttachmentOrder, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "VoiceMessageAttachmentOrder")
					return
				}
			}
		case "26625-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "VoiceMessageDuration")
					return
				}
				z.VoiceMessageDuration = nil
			} else {
				if z.VoiceMessageDuration == nil {
					z.VoiceMessageDuration = new(int32)
				}
				*z.VoiceMessageDuration, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "VoiceMessageDuration")
					return
				}
			}
		case "26627-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "VoiceMessageSenderName")
					return
				}
				z.VoiceMessageSenderName = nil
			} else {
				if z.VoiceMessageSenderName == nil {
					z.VoiceMessageSenderName = new(string)
				}
				*z.VoiceMessageSenderName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "VoiceMessageSenderName")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Voicemail) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(14)
	var zb0001Mask uint16 /* 14 bits */
	if z.CallId == nil {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.FaxNumberOfPages == nil {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.SenderTelephoneNumber == nil {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.VoiceMessageAttachmentOrder == nil {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.VoiceMessageDuration == nil {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.VoiceMessageSenderName == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "AudioNotes"
	err = en.Append(0xaa, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4e, 0x6f, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	if z.AudioNotes == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.AudioNotes)
		if err != nil {
			err = msgp.WrapError(err, "AudioNotes")
			return
		}
	}
	// write "XCallId"
	err = en.Append(0xa7, 0x58, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64)
	if err != nil {
		return
	}
	if z.XCallId == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XCallId)
		if err != nil {
			err = msgp.WrapError(err, "XCallId")
			return
		}
	}
	// write "XFaxNumberOfPages"
	err = en.Append(0xb1, 0x58, 0x46, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x61, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	if z.XFaxNumberOfPages == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt32(*z.XFaxNumberOfPages)
		if err != nil {
			err = msgp.WrapError(err, "XFaxNumberOfPages")
			return
		}
	}
	// write "XRequireProtectedPlayOnPhone"
	err = en.Append(0xbc, 0x58, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65)
	if err != nil {
		return
	}
	if z.XRequireProtectedPlayOnPhone == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBool(*z.XRequireProtectedPlayOnPhone)
		if err != nil {
			err = msgp.WrapError(err, "XRequireProtectedPlayOnPhone")
			return
		}
	}
	// write "XSenderTelephoneNumber"
	err = en.Append(0xb6, 0x58, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	if z.XSenderTelephoneNumber == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSenderTelephoneNumber)
		if err != nil {
			err = msgp.WrapError(err, "XSenderTelephoneNumber")
			return
		}
	}
	// write "XVoiceMessageAttachmentOrder"
	err = en.Append(0xbc, 0x58, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	if z.XVoiceMessageAttachmentOrder == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XVoiceMessageAttachmentOrder)
		if err != nil {
			err = msgp.WrapError(err, "XVoiceMessageAttachmentOrder")
			return
		}
	}
	// write "XVoiceMessageDuration"
	err = en.Append(0xb5, 0x58, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	if z.XVoiceMessageDuration == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt32(*z.XVoiceMessageDuration)
		if err != nil {
			err = msgp.WrapError(err, "XVoiceMessageDuration")
			return
		}
	}
	// write "XVoiceMessageSenderName"
	err = en.Append(0xb7, 0x58, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	if z.XVoiceMessageSenderName == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XVoiceMessageSenderName)
		if err != nil {
			err = msgp.WrapError(err, "XVoiceMessageSenderName")
			return
		}
	}
	if (zb0001Mask & 0x100) == 0 { // if not empty
		// write "26630-31"
		err = en.Append(0xa8, 0x32, 0x36, 0x36, 0x33, 0x30, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.CallId == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.CallId)
			if err != nil {
				err = msgp.WrapError(err, "CallId")
				return
			}
		}
	}
	if (zb0001Mask & 0x200) == 0 { // if not empty
		// write "26628-3"
		err = en.Append(0xa7, 0x32, 0x36, 0x36, 0x32, 0x38, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.FaxNumberOfPages == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.FaxNumberOfPages)
			if err != nil {
				err = msgp.WrapError(err, "FaxNumberOfPages")
				return
			}
		}
	}
	if (zb0001Mask & 0x400) == 0 { // if not empty
		// write "26626-31"
		err = en.Append(0xa8, 0x32, 0x36, 0x36, 0x32, 0x36, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SenderTelephoneNumber == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SenderTelephoneNumber)
			if err != nil {
				err = msgp.WrapError(err, "SenderTelephoneNumber")
				return
			}
		}
	}
	if (zb0001Mask & 0x800) == 0 { // if not empty
		// write "26629-31"
		err = en.Append(0xa8, 0x32, 0x36, 0x36, 0x32, 0x39, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.VoiceMessageAttachmentOrder == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.VoiceMessageAttachmentOrder)
			if err != nil {
				err = msgp.WrapError(err, "VoiceMessageAttachmentOrder")
				return
			}
		}
	}
	if (zb0001Mask & 0x1000) == 0 { // if not empty
		// write "26625-3"
		err = en.Append(0xa7, 0x32, 0x36, 0x36, 0x32, 0x35, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.VoiceMessageDuration == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.VoiceMessageDuration)
			if err != nil {
				err = msgp.WrapError(err, "VoiceMessageDuration")
				return
			}
		}
	}
	if (zb0001Mask & 0x2000) == 0 { // if not empty
		// write "26627-31"
		err = en.Append(0xa8, 0x32, 0x36, 0x36, 0x32, 0x37, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.VoiceMessageSenderName == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.VoiceMessageSenderName)
			if err != nil {
				err = msgp.WrapError(err, "VoiceMessageSenderName")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Voicemail) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(14)
	var zb0001Mask uint16 /* 14 bits */
	if z.CallId == nil {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.FaxNumberOfPages == nil {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.SenderTelephoneNumber == nil {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.VoiceMessageAttachmentOrder == nil {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.VoiceMessageDuration == nil {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.VoiceMessageSenderName == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "AudioNotes"
	o = append(o, 0xaa, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4e, 0x6f, 0x74, 0x65, 0x73)
	if z.AudioNotes == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.AudioNotes)
	}
	// string "XCallId"
	o = append(o, 0xa7, 0x58, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64)
	if z.XCallId == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XCallId)
	}
	// string "XFaxNumberOfPages"
	o = append(o, 0xb1, 0x58, 0x46, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x61, 0x67, 0x65, 0x73)
	if z.XFaxNumberOfPages == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt32(o, *z.XFaxNumberOfPages)
	}
	// string "XRequireProtectedPlayOnPhone"
	o = append(o, 0xbc, 0x58, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65)
	if z.XRequireProtectedPlayOnPhone == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBool(o, *z.XRequireProtectedPlayOnPhone)
	}
	// string "XSenderTelephoneNumber"
	o = append(o, 0xb6, 0x58, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if z.XSenderTelephoneNumber == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSenderTelephoneNumber)
	}
	// string "XVoiceMessageAttachmentOrder"
	o = append(o, 0xbc, 0x58, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72)
	if z.XVoiceMessageAttachmentOrder == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XVoiceMessageAttachmentOrder)
	}
	// string "XVoiceMessageDuration"
	o = append(o, 0xb5, 0x58, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if z.XVoiceMessageDuration == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt32(o, *z.XVoiceMessageDuration)
	}
	// string "XVoiceMessageSenderName"
	o = append(o, 0xb7, 0x58, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	if z.XVoiceMessageSenderName == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XVoiceMessageSenderName)
	}
	if (zb0001Mask & 0x100) == 0 { // if not empty
		// string "26630-31"
		o = append(o, 0xa8, 0x32, 0x36, 0x36, 0x33, 0x30, 0x2d, 0x33, 0x31)
		if z.CallId == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.CallId)
		}
	}
	if (zb0001Mask & 0x200) == 0 { // if not empty
		// string "26628-3"
		o = append(o, 0xa7, 0x32, 0x36, 0x36, 0x32, 0x38, 0x2d, 0x33)
		if z.FaxNumberOfPages == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.FaxNumberOfPages)
		}
	}
	if (zb0001Mask & 0x400) == 0 { // if not empty
		// string "26626-31"
		o = append(o, 0xa8, 0x32, 0x36, 0x36, 0x32, 0x36, 0x2d, 0x33, 0x31)
		if z.SenderTelephoneNumber == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SenderTelephoneNumber)
		}
	}
	if (zb0001Mask & 0x800) == 0 { // if not empty
		// string "26629-31"
		o = append(o, 0xa8, 0x32, 0x36, 0x36, 0x32, 0x39, 0x2d, 0x33, 0x31)
		if z.VoiceMessageAttachmentOrder == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.VoiceMessageAttachmentOrder)
		}
	}
	if (zb0001Mask & 0x1000) == 0 { // if not empty
		// string "26625-3"
		o = append(o, 0xa7, 0x32, 0x36, 0x36, 0x32, 0x35, 0x2d, 0x33)
		if z.VoiceMessageDuration == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.VoiceMessageDuration)
		}
	}
	if (zb0001Mask & 0x2000) == 0 { // if not empty
		// string "26627-31"
		o = append(o, 0xa8, 0x32, 0x36, 0x36, 0x32, 0x37, 0x2d, 0x33, 0x31)
		if z.VoiceMessageSenderName == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.VoiceMessageSenderName)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Voicemail) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AudioNotes":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AudioNotes = nil
			} else {
				if z.AudioNotes == nil {
					z.AudioNotes = new(string)
				}
				*z.AudioNotes, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AudioNotes")
					return
				}
			}
		case "XCallId":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XCallId = nil
			} else {
				if z.XCallId == nil {
					z.XCallId = new(string)
				}
				*z.XCallId, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XCallId")
					return
				}
			}
		case "XFaxNumberOfPages":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XFaxNumberOfPages = nil
			} else {
				if z.XFaxNumberOfPages == nil {
					z.XFaxNumberOfPages = new(int32)
				}
				*z.XFaxNumberOfPages, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XFaxNumberOfPages")
					return
				}
			}
		case "XRequireProtectedPlayOnPhone":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XRequireProtectedPlayOnPhone = nil
			} else {
				if z.XRequireProtectedPlayOnPhone == nil {
					z.XRequireProtectedPlayOnPhone = new(bool)
				}
				*z.XRequireProtectedPlayOnPhone, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XRequireProtectedPlayOnPhone")
					return
				}
			}
		case "XSenderTelephoneNumber":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSenderTelephoneNumber = nil
			} else {
				if z.XSenderTelephoneNumber == nil {
					z.XSenderTelephoneNumber = new(string)
				}
				*z.XSenderTelephoneNumber, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSenderTelephoneNumber")
					return
				}
			}
		case "XVoiceMessageAttachmentOrder":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XVoiceMessageAttachmentOrder = nil
			} else {
				if z.XVoiceMessageAttachmentOrder == nil {
					z.XVoiceMessageAttachmentOrder = new(string)
				}
				*z.XVoiceMessageAttachmentOrder, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XVoiceMessageAttachmentOrder")
					return
				}
			}
		case "XVoiceMessageDuration":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XVoiceMessageDuration = nil
			} else {
				if z.XVoiceMessageDuration == nil {
					z.XVoiceMessageDuration = new(int32)
				}
				*z.XVoiceMessageDuration, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XVoiceMessageDuration")
					return
				}
			}
		case "XVoiceMessageSenderName":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XVoiceMessageSenderName = nil
			} else {
				if z.XVoiceMessageSenderName == nil {
					z.XVoiceMessageSenderName = new(string)
				}
				*z.XVoiceMessageSenderName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XVoiceMessageSenderName")
					return
				}
			}
		case "26630-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.CallId = nil
			} else {
				if z.CallId == nil {
					z.CallId = new(string)
				}
				*z.CallId, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CallId")
					return
				}
			}
		case "26628-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FaxNumberOfPages = nil
			} else {
				if z.FaxNumberOfPages == nil {
					z.FaxNumberOfPages = new(int32)
				}
				*z.FaxNumberOfPages, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FaxNumberOfPages")
					return
				}
			}
		case "26626-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SenderTelephoneNumber = nil
			} else {
				if z.SenderTelephoneNumber == nil {
					z.SenderTelephoneNumber = new(string)
				}
				*z.SenderTelephoneNumber, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SenderTelephoneNumber")
					return
				}
			}
		case "26629-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.VoiceMessageAttachmentOrder = nil
			} else {
				if z.VoiceMessageAttachmentOrder == nil {
					z.VoiceMessageAttachmentOrder = new(string)
				}
				*z.VoiceMessageAttachmentOrder, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoiceMessageAttachmentOrder")
					return
				}
			}
		case "26625-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.VoiceMessageDuration = nil
			} else {
				if z.VoiceMessageDuration == nil {
					z.VoiceMessageDuration = new(int32)
				}
				*z.VoiceMessageDuration, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoiceMessageDuration")
					return
				}
			}
		case "26627-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.VoiceMessageSenderName = nil
			} else {
				if z.VoiceMessageSenderName == nil {
					z.VoiceMessageSenderName = new(string)
				}
				*z.VoiceMessageSenderName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoiceMessageSenderName")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Voicemail) Msgsize() (s int) {
	s = 1 + 11
	if z.AudioNotes == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AudioNotes)
	}
	s += 8
	if z.XCallId == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XCallId)
	}
	s += 18
	if z.XFaxNumberOfPages == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 29
	if z.XRequireProtectedPlayOnPhone == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 23
	if z.XSenderTelephoneNumber == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSenderTelephoneNumber)
	}
	s += 29
	if z.XVoiceMessageAttachmentOrder == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XVoiceMessageAttachmentOrder)
	}
	s += 22
	if z.XVoiceMessageDuration == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 24
	if z.XVoiceMessageSenderName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XVoiceMessageSenderName)
	}
	s += 9
	if z.CallId == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.CallId)
	}
	s += 8
	if z.FaxNumberOfPages == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.SenderTelephoneNumber == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SenderTelephoneNumber)
	}
	s += 9
	if z.VoiceMessageAttachmentOrder == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.VoiceMessageAttachmentOrder)
	}
	s += 8
	if z.VoiceMessageDuration == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.VoiceMessageSenderName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.VoiceMessageSenderName)
	}
	return
}
