package properties

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Task) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "342403":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FlagString")
					return
				}
				z.FlagString = nil
			} else {
				if z.FlagString == nil {
					z.FlagString = new(int32)
				}
				*z.FlagString, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "FlagString")
					return
				}
			}
		case "330265":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "PercentComplete")
					return
				}
				z.PercentComplete = nil
			} else {
				if z.PercentComplete == nil {
					z.PercentComplete = new(float64)
				}
				*z.PercentComplete, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "PercentComplete")
					return
				}
			}
		case "330663":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskAcceptanceState")
					return
				}
				z.TaskAcceptanceState = nil
			} else {
				if z.TaskAcceptanceState == nil {
					z.TaskAcceptanceState = new(int32)
				}
				*z.TaskAcceptanceState, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskAcceptanceState")
					return
				}
			}
		case "3303211":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskAccepted")
					return
				}
				z.TaskAccepted = nil
			} else {
				if z.TaskAccepted == nil {
					z.TaskAccepted = new(bool)
				}
				*z.TaskAccepted, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TaskAccepted")
					return
				}
			}
		case "330403":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskActualEffort")
					return
				}
				z.TaskActualEffort = nil
			} else {
				if z.TaskActualEffort == nil {
					z.TaskActualEffort = new(int32)
				}
				*z.TaskActualEffort, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskActualEffort")
					return
				}
			}
		case "3305731":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskAssigner")
					return
				}
				z.TaskAssigner = nil
			} else {
				if z.TaskAssigner == nil {
					z.TaskAssigner = new(string)
				}
				*z.TaskAssigner, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "TaskAssigner")
					return
				}
			}
		case "33047258":
			z.TaskAssigners, err = dc.ReadBytes(z.TaskAssigners)
			if err != nil {
				err = msgp.WrapError(err, "TaskAssigners")
				return
			}
		case "3305211":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskComplete")
					return
				}
				z.TaskComplete = nil
			} else {
				if z.TaskComplete == nil {
					z.TaskComplete = new(bool)
				}
				*z.TaskComplete, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TaskComplete")
					return
				}
			}
		case "330813":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskCustomFlags")
					return
				}
				z.TaskCustomFlags = nil
			} else {
				if z.TaskCustomFlags == nil {
					z.TaskCustomFlags = new(int32)
				}
				*z.TaskCustomFlags, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskCustomFlags")
					return
				}
			}
		case "3303964":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskDateCompleted")
					return
				}
				z.TaskDateCompleted = nil
			} else {
				if z.TaskDateCompleted == nil {
					z.TaskDateCompleted = new(int64)
				}
				*z.TaskDateCompleted, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "TaskDateCompleted")
					return
				}
			}
		case "3303311":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskDeadOccurrence")
					return
				}
				z.TaskDeadOccurrence = nil
			} else {
				if z.TaskDeadOccurrence == nil {
					z.TaskDeadOccurrence = new(bool)
				}
				*z.TaskDeadOccurrence, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TaskDeadOccurrence")
					return
				}
			}
		case "3302964":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskDueDate")
					return
				}
				z.TaskDueDate = nil
			} else {
				if z.TaskDueDate == nil {
					z.TaskDueDate = new(int64)
				}
				*z.TaskDueDate, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "TaskDueDate")
					return
				}
			}
		case "330413":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskEstimatedEffort")
					return
				}
				z.TaskEstimatedEffort = nil
			} else {
				if z.TaskEstimatedEffort == nil {
					z.TaskEstimatedEffort = new(int32)
				}
				*z.TaskEstimatedEffort, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskEstimatedEffort")
					return
				}
			}
		case "3305411":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskfCreator")
					return
				}
				z.TaskfCreator = nil
			} else {
				if z.TaskfCreator == nil {
					z.TaskfCreator = new(bool)
				}
				*z.TaskfCreator, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TaskfCreator")
					return
				}
			}
		case "3306811":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskfFixOffline")
					return
				}
				z.TaskfFixOffline = nil
			} else {
				if z.TaskfFixOffline == nil {
					z.TaskfFixOffline = new(bool)
				}
				*z.TaskfFixOffline, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TaskfFixOffline")
					return
				}
			}
		case "3306211":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskfRecurring")
					return
				}
				z.TaskfRecurring = nil
			} else {
				if z.TaskfRecurring == nil {
					z.TaskfRecurring = new(bool)
				}
				*z.TaskfRecurring, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TaskfRecurring")
					return
				}
			}
		case "34073258":
			z.TaskGlobalId, err = dc.ReadBytes(z.TaskGlobalId)
			if err != nil {
				err = msgp.WrapError(err, "TaskGlobalId")
				return
			}
		case "330503":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskHistory")
					return
				}
				z.TaskHistory = nil
			} else {
				if z.TaskHistory == nil {
					z.TaskHistory = new(int32)
				}
				*z.TaskHistory, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskHistory")
					return
				}
			}
		case "3306131":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskLastDelegate")
					return
				}
				z.TaskLastDelegate = nil
			} else {
				if z.TaskLastDelegate == nil {
					z.TaskLastDelegate = new(string)
				}
				*z.TaskLastDelegate, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "TaskLastDelegate")
					return
				}
			}
		case "3304564":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskLastUpdate")
					return
				}
				z.TaskLastUpdate = nil
			} else {
				if z.TaskLastUpdate == nil {
					z.TaskLastUpdate = new(int64)
				}
				*z.TaskLastUpdate, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "TaskLastUpdate")
					return
				}
			}
		case "3305831":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskLastUser")
					return
				}
				z.TaskLastUser = nil
			} else {
				if z.TaskLastUser == nil {
					z.TaskLastUser = new(string)
				}
				*z.TaskLastUser, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "TaskLastUser")
					return
				}
			}
		case "340723":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskMode")
					return
				}
				z.TaskMode = nil
			} else {
				if z.TaskMode == nil {
					z.TaskMode = new(int32)
				}
				*z.TaskMode, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskMode")
					return
				}
			}
		case "330563":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskMultipleRecipients")
					return
				}
				z.TaskMultipleRecipients = nil
			} else {
				if z.TaskMultipleRecipients == nil {
					z.TaskMultipleRecipients = new(int32)
				}
				*z.TaskMultipleRecipients, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskMultipleRecipients")
					return
				}
			}
		case "3306011":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskNoCompute")
					return
				}
				z.TaskNoCompute = nil
			} else {
				if z.TaskNoCompute == nil {
					z.TaskNoCompute = new(bool)
				}
				*z.TaskNoCompute, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TaskNoCompute")
					return
				}
			}
		case "330593":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskOrdinal")
					return
				}
				z.TaskOrdinal = nil
			} else {
				if z.TaskOrdinal == nil {
					z.TaskOrdinal = new(int32)
				}
				*z.TaskOrdinal, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskOrdinal")
					return
				}
			}
		case "3305531":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskOwner")
					return
				}
				z.TaskOwner = nil
			} else {
				if z.TaskOwner == nil {
					z.TaskOwner = new(string)
				}
				*z.TaskOwner, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "TaskOwner")
					return
				}
			}
		case "330653":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskOwnership")
					return
				}
				z.TaskOwnership = nil
			} else {
				if z.TaskOwnership == nil {
					z.TaskOwnership = new(int32)
				}
				*z.TaskOwnership, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskOwnership")
					return
				}
			}
		case "33046258":
			z.TaskRecurrence, err = dc.ReadBytes(z.TaskRecurrence)
			if err != nil {
				err = msgp.WrapError(err, "TaskRecurrence")
				return
			}
		case "3303111":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskResetReminder")
					return
				}
				z.TaskResetReminder = nil
			} else {
				if z.TaskResetReminder == nil {
					z.TaskResetReminder = new(bool)
				}
				*z.TaskResetReminder, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TaskResetReminder")
					return
				}
			}
		case "3306331":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskRole")
					return
				}
				z.TaskRole = nil
			} else {
				if z.TaskRole == nil {
					z.TaskRole = new(string)
				}
				*z.TaskRole, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "TaskRole")
					return
				}
			}
		case "3302864":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskStartDate")
					return
				}
				z.TaskStartDate = nil
			} else {
				if z.TaskStartDate == nil {
					z.TaskStartDate = new(int64)
				}
				*z.TaskStartDate, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "TaskStartDate")
					return
				}
			}
		case "330433":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskState")
					return
				}
				z.TaskState = nil
			} else {
				if z.TaskState == nil {
					z.TaskState = new(int32)
				}
				*z.TaskState, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskState")
					return
				}
			}
		case "330253":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskStatus")
					return
				}
				z.TaskStatus = nil
			} else {
				if z.TaskStatus == nil {
					z.TaskStatus = new(int32)
				}
				*z.TaskStatus, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskStatus")
					return
				}
			}
		case "3304911":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskStatusOnComplete")
					return
				}
				z.TaskStatusOnComplete = nil
			} else {
				if z.TaskStatusOnComplete == nil {
					z.TaskStatusOnComplete = new(bool)
				}
				*z.TaskStatusOnComplete, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TaskStatusOnComplete")
					return
				}
			}
		case "3305111":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskUpdates")
					return
				}
				z.TaskUpdates = nil
			} else {
				if z.TaskUpdates == nil {
					z.TaskUpdates = new(bool)
				}
				*z.TaskUpdates, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TaskUpdates")
					return
				}
			}
		case "330423":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TaskVersion")
					return
				}
				z.TaskVersion = nil
			} else {
				if z.TaskVersion == nil {
					z.TaskVersion = new(int32)
				}
				*z.TaskVersion, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TaskVersion")
					return
				}
			}
		case "3302711":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TeamTask")
					return
				}
				z.TeamTask = nil
			} else {
				if z.TeamTask == nil {
					z.TeamTask = new(bool)
				}
				*z.TeamTask, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "TeamTask")
					return
				}
			}
		case "3420864":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ToDoOrdinalDate")
					return
				}
				z.ToDoOrdinalDate = nil
			} else {
				if z.ToDoOrdinalDate == nil {
					z.ToDoOrdinalDate = new(int64)
				}
				*z.ToDoOrdinalDate, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ToDoOrdinalDate")
					return
				}
			}
		case "3420931":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ToDoSubOrdinal")
					return
				}
				z.ToDoSubOrdinal = nil
			} else {
				if z.ToDoSubOrdinal == nil {
					z.ToDoSubOrdinal = new(string)
				}
				*z.ToDoSubOrdinal, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ToDoSubOrdinal")
					return
				}
			}
		case "3421231":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ToDoTitle")
					return
				}
				z.ToDoTitle = nil
			} else {
				if z.ToDoTitle == nil {
					z.ToDoTitle = new(string)
				}
				*z.ToDoTitle, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ToDoTitle")
					return
				}
			}
		case "3423964":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ValidFlagStringProof")
					return
				}
				z.ValidFlagStringProof = nil
			} else {
				if z.ValidFlagStringProof == nil {
					z.ValidFlagStringProof = new(int64)
				}
				*z.ValidFlagStringProof, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ValidFlagStringProof")
					return
				}
			}
		case "140503":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OrdinalMost")
					return
				}
				z.OrdinalMost = nil
			} else {
				if z.OrdinalMost == nil {
					z.OrdinalMost = new(int32)
				}
				*z.OrdinalMost, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "OrdinalMost")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Task) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(42)
	var zb0001Mask uint64 /* 42 bits */
	_ = zb0001Mask
	if z.FlagString == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.PercentComplete == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.TaskAcceptanceState == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.TaskAccepted == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.TaskActualEffort == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.TaskAssigner == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.TaskAssigners == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.TaskComplete == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.TaskCustomFlags == nil {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.TaskDateCompleted == nil {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.TaskDeadOccurrence == nil {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.TaskDueDate == nil {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.TaskEstimatedEffort == nil {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.TaskfCreator == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.TaskfFixOffline == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.TaskfRecurring == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if z.TaskGlobalId == nil {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	if z.TaskHistory == nil {
		zb0001Len--
		zb0001Mask |= 0x20000
	}
	if z.TaskLastDelegate == nil {
		zb0001Len--
		zb0001Mask |= 0x40000
	}
	if z.TaskLastUpdate == nil {
		zb0001Len--
		zb0001Mask |= 0x80000
	}
	if z.TaskLastUser == nil {
		zb0001Len--
		zb0001Mask |= 0x100000
	}
	if z.TaskMode == nil {
		zb0001Len--
		zb0001Mask |= 0x200000
	}
	if z.TaskMultipleRecipients == nil {
		zb0001Len--
		zb0001Mask |= 0x400000
	}
	if z.TaskNoCompute == nil {
		zb0001Len--
		zb0001Mask |= 0x800000
	}
	if z.TaskOrdinal == nil {
		zb0001Len--
		zb0001Mask |= 0x1000000
	}
	if z.TaskOwner == nil {
		zb0001Len--
		zb0001Mask |= 0x2000000
	}
	if z.TaskOwnership == nil {
		zb0001Len--
		zb0001Mask |= 0x4000000
	}
	if z.TaskRecurrence == nil {
		zb0001Len--
		zb0001Mask |= 0x8000000
	}
	if z.TaskResetReminder == nil {
		zb0001Len--
		zb0001Mask |= 0x10000000
	}
	if z.TaskRole == nil {
		zb0001Len--
		zb0001Mask |= 0x20000000
	}
	if z.TaskStartDate == nil {
		zb0001Len--
		zb0001Mask |= 0x40000000
	}
	if z.TaskState == nil {
		zb0001Len--
		zb0001Mask |= 0x80000000
	}
	if z.TaskStatus == nil {
		zb0001Len--
		zb0001Mask |= 0x100000000
	}
	if z.TaskStatusOnComplete == nil {
		zb0001Len--
		zb0001Mask |= 0x200000000
	}
	if z.TaskUpdates == nil {
		zb0001Len--
		zb0001Mask |= 0x400000000
	}
	if z.TaskVersion == nil {
		zb0001Len--
		zb0001Mask |= 0x800000000
	}
	if z.TeamTask == nil {
		zb0001Len--
		zb0001Mask |= 0x1000000000
	}
	if z.ToDoOrdinalDate == nil {
		zb0001Len--
		zb0001Mask |= 0x2000000000
	}
	if z.ToDoSubOrdinal == nil {
		zb0001Len--
		zb0001Mask |= 0x4000000000
	}
	if z.ToDoTitle == nil {
		zb0001Len--
		zb0001Mask |= 0x8000000000
	}
	if z.ValidFlagStringProof == nil {
		zb0001Len--
		zb0001Mask |= 0x10000000000
	}
	if z.OrdinalMost == nil {
		zb0001Len--
		zb0001Mask |= 0x20000000000
	}
	// variable map header, size zb0001Len
	err = en.WriteMapHeader(zb0001Len)
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "342403"
		err = en.Append(0xa6, 0x33, 0x34, 0x32, 0x34, 0x30, 0x33)
		if err != nil {
			return
		}
		if z.FlagString == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.FlagString)
			if err != nil {
				err = msgp.WrapError(err, "FlagString")
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "330265"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x32, 0x36, 0x35)
		if err != nil {
			return
		}
		if z.PercentComplete == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteFloat64(*z.PercentComplete)
			if err != nil {
				err = msgp.WrapError(err, "PercentComplete")
				return
			}
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "330663"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x36, 0x36, 0x33)
		if err != nil {
			return
		}
		if z.TaskAcceptanceState == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskAcceptanceState)
			if err != nil {
				err = msgp.WrapError(err, "TaskAcceptanceState")
				return
			}
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "3303211"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x33, 0x32, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TaskAccepted == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TaskAccepted)
			if err != nil {
				err = msgp.WrapError(err, "TaskAccepted")
				return
			}
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "330403"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x34, 0x30, 0x33)
		if err != nil {
			return
		}
		if z.TaskActualEffort == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskActualEffort)
			if err != nil {
				err = msgp.WrapError(err, "TaskActualEffort")
				return
			}
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "3305731"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x35, 0x37, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.TaskAssigner == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.TaskAssigner)
			if err != nil {
				err = msgp.WrapError(err, "TaskAssigner")
				return
			}
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// write "33047258"
		err = en.Append(0xa8, 0x33, 0x33, 0x30, 0x34, 0x37, 0x32, 0x35, 0x38)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.TaskAssigners)
		if err != nil {
			err = msgp.WrapError(err, "TaskAssigners")
			return
		}
	}
	if (zb0001Mask & 0x80) == 0 { // if not empty
		// write "3305211"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x35, 0x32, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TaskComplete == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TaskComplete)
			if err != nil {
				err = msgp.WrapError(err, "TaskComplete")
				return
			}
		}
	}
	if (zb0001Mask & 0x100) == 0 { // if not empty
		// write "330813"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x38, 0x31, 0x33)
		if err != nil {
			return
		}
		if z.TaskCustomFlags == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskCustomFlags)
			if err != nil {
				err = msgp.WrapError(err, "TaskCustomFlags")
				return
			}
		}
	}
	if (zb0001Mask & 0x200) == 0 { // if not empty
		// write "3303964"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x33, 0x39, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.TaskDateCompleted == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.TaskDateCompleted)
			if err != nil {
				err = msgp.WrapError(err, "TaskDateCompleted")
				return
			}
		}
	}
	if (zb0001Mask & 0x400) == 0 { // if not empty
		// write "3303311"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x33, 0x33, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TaskDeadOccurrence == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TaskDeadOccurrence)
			if err != nil {
				err = msgp.WrapError(err, "TaskDeadOccurrence")
				return
			}
		}
	}
	if (zb0001Mask & 0x800) == 0 { // if not empty
		// write "3302964"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x32, 0x39, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.TaskDueDate == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.TaskDueDate)
			if err != nil {
				err = msgp.WrapError(err, "TaskDueDate")
				return
			}
		}
	}
	if (zb0001Mask & 0x1000) == 0 { // if not empty
		// write "330413"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x34, 0x31, 0x33)
		if err != nil {
			return
		}
		if z.TaskEstimatedEffort == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskEstimatedEffort)
			if err != nil {
				err = msgp.WrapError(err, "TaskEstimatedEffort")
				return
			}
		}
	}
	if (zb0001Mask & 0x2000) == 0 { // if not empty
		// write "3305411"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x35, 0x34, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TaskfCreator == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TaskfCreator)
			if err != nil {
				err = msgp.WrapError(err, "TaskfCreator")
				return
			}
		}
	}
	if (zb0001Mask & 0x4000) == 0 { // if not empty
		// write "3306811"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x36, 0x38, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TaskfFixOffline == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TaskfFixOffline)
			if err != nil {
				err = msgp.WrapError(err, "TaskfFixOffline")
				return
			}
		}
	}
	if (zb0001Mask & 0x8000) == 0 { // if not empty
		// write "3306211"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x36, 0x32, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TaskfRecurring == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TaskfRecurring)
			if err != nil {
				err = msgp.WrapError(err, "TaskfRecurring")
				return
			}
		}
	}
	if (zb0001Mask & 0x10000) == 0 { // if not empty
		// write "34073258"
		err = en.Append(0xa8, 0x33, 0x34, 0x30, 0x37, 0x33, 0x32, 0x35, 0x38)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.TaskGlobalId)
		if err != nil {
			err = msgp.WrapError(err, "TaskGlobalId")
			return
		}
	}
	if (zb0001Mask & 0x20000) == 0 { // if not empty
		// write "330503"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x35, 0x30, 0x33)
		if err != nil {
			return
		}
		if z.TaskHistory == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskHistory)
			if err != nil {
				err = msgp.WrapError(err, "TaskHistory")
				return
			}
		}
	}
	if (zb0001Mask & 0x40000) == 0 { // if not empty
		// write "3306131"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x36, 0x31, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.TaskLastDelegate == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.TaskLastDelegate)
			if err != nil {
				err = msgp.WrapError(err, "TaskLastDelegate")
				return
			}
		}
	}
	if (zb0001Mask & 0x80000) == 0 { // if not empty
		// write "3304564"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x34, 0x35, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.TaskLastUpdate == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.TaskLastUpdate)
			if err != nil {
				err = msgp.WrapError(err, "TaskLastUpdate")
				return
			}
		}
	}
	if (zb0001Mask & 0x100000) == 0 { // if not empty
		// write "3305831"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x35, 0x38, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.TaskLastUser == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.TaskLastUser)
			if err != nil {
				err = msgp.WrapError(err, "TaskLastUser")
				return
			}
		}
	}
	if (zb0001Mask & 0x200000) == 0 { // if not empty
		// write "340723"
		err = en.Append(0xa6, 0x33, 0x34, 0x30, 0x37, 0x32, 0x33)
		if err != nil {
			return
		}
		if z.TaskMode == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskMode)
			if err != nil {
				err = msgp.WrapError(err, "TaskMode")
				return
			}
		}
	}
	if (zb0001Mask & 0x400000) == 0 { // if not empty
		// write "330563"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x35, 0x36, 0x33)
		if err != nil {
			return
		}
		if z.TaskMultipleRecipients == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskMultipleRecipients)
			if err != nil {
				err = msgp.WrapError(err, "TaskMultipleRecipients")
				return
			}
		}
	}
	if (zb0001Mask & 0x800000) == 0 { // if not empty
		// write "3306011"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x36, 0x30, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TaskNoCompute == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TaskNoCompute)
			if err != nil {
				err = msgp.WrapError(err, "TaskNoCompute")
				return
			}
		}
	}
	if (zb0001Mask & 0x1000000) == 0 { // if not empty
		// write "330593"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x35, 0x39, 0x33)
		if err != nil {
			return
		}
		if z.TaskOrdinal == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskOrdinal)
			if err != nil {
				err = msgp.WrapError(err, "TaskOrdinal")
				return
			}
		}
	}
	if (zb0001Mask & 0x2000000) == 0 { // if not empty
		// write "3305531"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x35, 0x35, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.TaskOwner == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.TaskOwner)
			if err != nil {
				err = msgp.WrapError(err, "TaskOwner")
				return
			}
		}
	}
	if (zb0001Mask & 0x4000000) == 0 { // if not empty
		// write "330653"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x36, 0x35, 0x33)
		if err != nil {
			return
		}
		if z.TaskOwnership == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskOwnership)
			if err != nil {
				err = msgp.WrapError(err, "TaskOwnership")
				return
			}
		}
	}
	if (zb0001Mask & 0x8000000) == 0 { // if not empty
		// write "33046258"
		err = en.Append(0xa8, 0x33, 0x33, 0x30, 0x34, 0x36, 0x32, 0x35, 0x38)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.TaskRecurrence)
		if err != nil {
			err = msgp.WrapError(err, "TaskRecurrence")
			return
		}
	}
	if (zb0001Mask & 0x10000000) == 0 { // if not empty
		// write "3303111"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x33, 0x31, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TaskResetReminder == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TaskResetReminder)
			if err != nil {
				err = msgp.WrapError(err, "TaskResetReminder")
				return
			}
		}
	}
	if (zb0001Mask & 0x20000000) == 0 { // if not empty
		// write "3306331"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x36, 0x33, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.TaskRole == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.TaskRole)
			if err != nil {
				err = msgp.WrapError(err, "TaskRole")
				return
			}
		}
	}
	if (zb0001Mask & 0x40000000) == 0 { // if not empty
		// write "3302864"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x32, 0x38, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.TaskStartDate == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.TaskStartDate)
			if err != nil {
				err = msgp.WrapError(err, "TaskStartDate")
				return
			}
		}
	}
	if (zb0001Mask & 0x80000000) == 0 { // if not empty
		// write "330433"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x34, 0x33, 0x33)
		if err != nil {
			return
		}
		if z.TaskState == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskState)
			if err != nil {
				err = msgp.WrapError(err, "TaskState")
				return
			}
		}
	}
	if (zb0001Mask & 0x100000000) == 0 { // if not empty
		// write "330253"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x32, 0x35, 0x33)
		if err != nil {
			return
		}
		if z.TaskStatus == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskStatus)
			if err != nil {
				err = msgp.WrapError(err, "TaskStatus")
				return
			}
		}
	}
	if (zb0001Mask & 0x200000000) == 0 { // if not empty
		// write "3304911"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x34, 0x39, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TaskStatusOnComplete == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TaskStatusOnComplete)
			if err != nil {
				err = msgp.WrapError(err, "TaskStatusOnComplete")
				return
			}
		}
	}
	if (zb0001Mask & 0x400000000) == 0 { // if not empty
		// write "3305111"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x35, 0x31, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TaskUpdates == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TaskUpdates)
			if err != nil {
				err = msgp.WrapError(err, "TaskUpdates")
				return
			}
		}
	}
	if (zb0001Mask & 0x800000000) == 0 { // if not empty
		// write "330423"
		err = en.Append(0xa6, 0x33, 0x33, 0x30, 0x34, 0x32, 0x33)
		if err != nil {
			return
		}
		if z.TaskVersion == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TaskVersion)
			if err != nil {
				err = msgp.WrapError(err, "TaskVersion")
				return
			}
		}
	}
	if (zb0001Mask & 0x1000000000) == 0 { // if not empty
		// write "3302711"
		err = en.Append(0xa7, 0x33, 0x33, 0x30, 0x32, 0x37, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.TeamTask == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.TeamTask)
			if err != nil {
				err = msgp.WrapError(err, "TeamTask")
				return
			}
		}
	}
	if (zb0001Mask & 0x2000000000) == 0 { // if not empty
		// write "3420864"
		err = en.Append(0xa7, 0x33, 0x34, 0x32, 0x30, 0x38, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ToDoOrdinalDate == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ToDoOrdinalDate)
			if err != nil {
				err = msgp.WrapError(err, "ToDoOrdinalDate")
				return
			}
		}
	}
	if (zb0001Mask & 0x4000000000) == 0 { // if not empty
		// write "3420931"
		err = en.Append(0xa7, 0x33, 0x34, 0x32, 0x30, 0x39, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.ToDoSubOrdinal == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.ToDoSubOrdinal)
			if err != nil {
				err = msgp.WrapError(err, "ToDoSubOrdinal")
				return
			}
		}
	}
	if (zb0001Mask & 0x8000000000) == 0 { // if not empty
		// write "3421231"
		err = en.Append(0xa7, 0x33, 0x34, 0x32, 0x31, 0x32, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.ToDoTitle == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.ToDoTitle)
			if err != nil {
				err = msgp.WrapError(err, "ToDoTitle")
				return
			}
		}
	}
	if (zb0001Mask & 0x10000000000) == 0 { // if not empty
		// write "3423964"
		err = en.Append(0xa7, 0x33, 0x34, 0x32, 0x33, 0x39, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ValidFlagStringProof == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ValidFlagStringProof)
			if err != nil {
				err = msgp.WrapError(err, "ValidFlagStringProof")
				return
			}
		}
	}
	if (zb0001Mask & 0x20000000000) == 0 { // if not empty
		// write "140503"
		err = en.Append(0xa6, 0x31, 0x34, 0x30, 0x35, 0x30, 0x33)
		if err != nil {
			return
		}
		if z.OrdinalMost == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.OrdinalMost)
			if err != nil {
				err = msgp.WrapError(err, "OrdinalMost")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Task) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(42)
	var zb0001Mask uint64 /* 42 bits */
	_ = zb0001Mask
	if z.FlagString == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.PercentComplete == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.TaskAcceptanceState == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.TaskAccepted == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.TaskActualEffort == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.TaskAssigner == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.TaskAssigners == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.TaskComplete == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.TaskCustomFlags == nil {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.TaskDateCompleted == nil {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.TaskDeadOccurrence == nil {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.TaskDueDate == nil {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.TaskEstimatedEffort == nil {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.TaskfCreator == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.TaskfFixOffline == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.TaskfRecurring == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if z.TaskGlobalId == nil {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	if z.TaskHistory == nil {
		zb0001Len--
		zb0001Mask |= 0x20000
	}
	if z.TaskLastDelegate == nil {
		zb0001Len--
		zb0001Mask |= 0x40000
	}
	if z.TaskLastUpdate == nil {
		zb0001Len--
		zb0001Mask |= 0x80000
	}
	if z.TaskLastUser == nil {
		zb0001Len--
		zb0001Mask |= 0x100000
	}
	if z.TaskMode == nil {
		zb0001Len--
		zb0001Mask |= 0x200000
	}
	if z.TaskMultipleRecipients == nil {
		zb0001Len--
		zb0001Mask |= 0x400000
	}
	if z.TaskNoCompute == nil {
		zb0001Len--
		zb0001Mask |= 0x800000
	}
	if z.TaskOrdinal == nil {
		zb0001Len--
		zb0001Mask |= 0x1000000
	}
	if z.TaskOwner == nil {
		zb0001Len--
		zb0001Mask |= 0x2000000
	}
	if z.TaskOwnership == nil {
		zb0001Len--
		zb0001Mask |= 0x4000000
	}
	if z.TaskRecurrence == nil {
		zb0001Len--
		zb0001Mask |= 0x8000000
	}
	if z.TaskResetReminder == nil {
		zb0001Len--
		zb0001Mask |= 0x10000000
	}
	if z.TaskRole == nil {
		zb0001Len--
		zb0001Mask |= 0x20000000
	}
	if z.TaskStartDate == nil {
		zb0001Len--
		zb0001Mask |= 0x40000000
	}
	if z.TaskState == nil {
		zb0001Len--
		zb0001Mask |= 0x80000000
	}
	if z.TaskStatus == nil {
		zb0001Len--
		zb0001Mask |= 0x100000000
	}
	if z.TaskStatusOnComplete == nil {
		zb0001Len--
		zb0001Mask |= 0x200000000
	}
	if z.TaskUpdates == nil {
		zb0001Len--
		zb0001Mask |= 0x400000000
	}
	if z.TaskVersion == nil {
		zb0001Len--
		zb0001Mask |= 0x800000000
	}
	if z.TeamTask == nil {
		zb0001Len--
		zb0001Mask |= 0x1000000000
	}
	if z.ToDoOrdinalDate == nil {
		zb0001Len--
		zb0001Mask |= 0x2000000000
	}
	if z.ToDoSubOrdinal == nil {
		zb0001Len--
		zb0001Mask |= 0x4000000000
	}
	if z.ToDoTitle == nil {
		zb0001Len--
		zb0001Mask |= 0x8000000000
	}
	if z.ValidFlagStringProof == nil {
		zb0001Len--
		zb0001Mask |= 0x10000000000
	}
	if z.OrdinalMost == nil {
		zb0001Len--
		zb0001Mask |= 0x20000000000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "342403"
		o = append(o, 0xa6, 0x33, 0x34, 0x32, 0x34, 0x30, 0x33)
		if z.FlagString == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.FlagString)
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "330265"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x32, 0x36, 0x35)
		if z.PercentComplete == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendFloat64(o, *z.PercentComplete)
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "330663"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x36, 0x36, 0x33)
		if z.TaskAcceptanceState == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskAcceptanceState)
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "3303211"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x33, 0x32, 0x31, 0x31)
		if z.TaskAccepted == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TaskAccepted)
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "330403"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x34, 0x30, 0x33)
		if z.TaskActualEffort == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskActualEffort)
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "3305731"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x35, 0x37, 0x33, 0x31)
		if z.TaskAssigner == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.TaskAssigner)
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// string "33047258"
		o = append(o, 0xa8, 0x33, 0x33, 0x30, 0x34, 0x37, 0x32, 0x35, 0x38)
		o = msgp.AppendBytes(o, z.TaskAssigners)
	}
	if (zb0001Mask & 0x80) == 0 { // if not empty
		// string "3305211"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x35, 0x32, 0x31, 0x31)
		if z.TaskComplete == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TaskComplete)
		}
	}
	if (zb0001Mask & 0x100) == 0 { // if not empty
		// string "330813"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x38, 0x31, 0x33)
		if z.TaskCustomFlags == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskCustomFlags)
		}
	}
	if (zb0001Mask & 0x200) == 0 { // if not empty
		// string "3303964"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x33, 0x39, 0x36, 0x34)
		if z.TaskDateCompleted == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.TaskDateCompleted)
		}
	}
	if (zb0001Mask & 0x400) == 0 { // if not empty
		// string "3303311"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x33, 0x33, 0x31, 0x31)
		if z.TaskDeadOccurrence == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TaskDeadOccurrence)
		}
	}
	if (zb0001Mask & 0x800) == 0 { // if not empty
		// string "3302964"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x32, 0x39, 0x36, 0x34)
		if z.TaskDueDate == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.TaskDueDate)
		}
	}
	if (zb0001Mask & 0x1000) == 0 { // if not empty
		// string "330413"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x34, 0x31, 0x33)
		if z.TaskEstimatedEffort == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskEstimatedEffort)
		}
	}
	if (zb0001Mask & 0x2000) == 0 { // if not empty
		// string "3305411"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x35, 0x34, 0x31, 0x31)
		if z.TaskfCreator == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TaskfCreator)
		}
	}
	if (zb0001Mask & 0x4000) == 0 { // if not empty
		// string "3306811"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x36, 0x38, 0x31, 0x31)
		if z.TaskfFixOffline == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TaskfFixOffline)
		}
	}
	if (zb0001Mask & 0x8000) == 0 { // if not empty
		// string "3306211"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x36, 0x32, 0x31, 0x31)
		if z.TaskfRecurring == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TaskfRecurring)
		}
	}
	if (zb0001Mask & 0x10000) == 0 { // if not empty
		// string "34073258"
		o = append(o, 0xa8, 0x33, 0x34, 0x30, 0x37, 0x33, 0x32, 0x35, 0x38)
		o = msgp.AppendBytes(o, z.TaskGlobalId)
	}
	if (zb0001Mask & 0x20000) == 0 { // if not empty
		// string "330503"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x35, 0x30, 0x33)
		if z.TaskHistory == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskHistory)
		}
	}
	if (zb0001Mask & 0x40000) == 0 { // if not empty
		// string "3306131"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x36, 0x31, 0x33, 0x31)
		if z.TaskLastDelegate == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.TaskLastDelegate)
		}
	}
	if (zb0001Mask & 0x80000) == 0 { // if not empty
		// string "3304564"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x34, 0x35, 0x36, 0x34)
		if z.TaskLastUpdate == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.TaskLastUpdate)
		}
	}
	if (zb0001Mask & 0x100000) == 0 { // if not empty
		// string "3305831"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x35, 0x38, 0x33, 0x31)
		if z.TaskLastUser == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.TaskLastUser)
		}
	}
	if (zb0001Mask & 0x200000) == 0 { // if not empty
		// string "340723"
		o = append(o, 0xa6, 0x33, 0x34, 0x30, 0x37, 0x32, 0x33)
		if z.TaskMode == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskMode)
		}
	}
	if (zb0001Mask & 0x400000) == 0 { // if not empty
		// string "330563"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x35, 0x36, 0x33)
		if z.TaskMultipleRecipients == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskMultipleRecipients)
		}
	}
	if (zb0001Mask & 0x800000) == 0 { // if not empty
		// string "3306011"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x36, 0x30, 0x31, 0x31)
		if z.TaskNoCompute == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TaskNoCompute)
		}
	}
	if (zb0001Mask & 0x1000000) == 0 { // if not empty
		// string "330593"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x35, 0x39, 0x33)
		if z.TaskOrdinal == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskOrdinal)
		}
	}
	if (zb0001Mask & 0x2000000) == 0 { // if not empty
		// string "3305531"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x35, 0x35, 0x33, 0x31)
		if z.TaskOwner == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.TaskOwner)
		}
	}
	if (zb0001Mask & 0x4000000) == 0 { // if not empty
		// string "330653"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x36, 0x35, 0x33)
		if z.TaskOwnership == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskOwnership)
		}
	}
	if (zb0001Mask & 0x8000000) == 0 { // if not empty
		// string "33046258"
		o = append(o, 0xa8, 0x33, 0x33, 0x30, 0x34, 0x36, 0x32, 0x35, 0x38)
		o = msgp.AppendBytes(o, z.TaskRecurrence)
	}
	if (zb0001Mask & 0x10000000) == 0 { // if not empty
		// string "3303111"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x33, 0x31, 0x31, 0x31)
		if z.TaskResetReminder == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TaskResetReminder)
		}
	}
	if (zb0001Mask & 0x20000000) == 0 { // if not empty
		// string "3306331"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x36, 0x33, 0x33, 0x31)
		if z.TaskRole == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.TaskRole)
		}
	}
	if (zb0001Mask & 0x40000000) == 0 { // if not empty
		// string "3302864"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x32, 0x38, 0x36, 0x34)
		if z.TaskStartDate == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.TaskStartDate)
		}
	}
	if (zb0001Mask & 0x80000000) == 0 { // if not empty
		// string "330433"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x34, 0x33, 0x33)
		if z.TaskState == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskState)
		}
	}
	if (zb0001Mask & 0x100000000) == 0 { // if not empty
		// string "330253"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x32, 0x35, 0x33)
		if z.TaskStatus == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskStatus)
		}
	}
	if (zb0001Mask & 0x200000000) == 0 { // if not empty
		// string "3304911"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x34, 0x39, 0x31, 0x31)
		if z.TaskStatusOnComplete == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TaskStatusOnComplete)
		}
	}
	if (zb0001Mask & 0x400000000) == 0 { // if not empty
		// string "3305111"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x35, 0x31, 0x31, 0x31)
		if z.TaskUpdates == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TaskUpdates)
		}
	}
	if (zb0001Mask & 0x800000000) == 0 { // if not empty
		// string "330423"
		o = append(o, 0xa6, 0x33, 0x33, 0x30, 0x34, 0x32, 0x33)
		if z.TaskVersion == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TaskVersion)
		}
	}
	if (zb0001Mask & 0x1000000000) == 0 { // if not empty
		// string "3302711"
		o = append(o, 0xa7, 0x33, 0x33, 0x30, 0x32, 0x37, 0x31, 0x31)
		if z.TeamTask == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.TeamTask)
		}
	}
	if (zb0001Mask & 0x2000000000) == 0 { // if not empty
		// string "3420864"
		o = append(o, 0xa7, 0x33, 0x34, 0x32, 0x30, 0x38, 0x36, 0x34)
		if z.ToDoOrdinalDate == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ToDoOrdinalDate)
		}
	}
	if (zb0001Mask & 0x4000000000) == 0 { // if not empty
		// string "3420931"
		o = append(o, 0xa7, 0x33, 0x34, 0x32, 0x30, 0x39, 0x33, 0x31)
		if z.ToDoSubOrdinal == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.ToDoSubOrdinal)
		}
	}
	if (zb0001Mask & 0x8000000000) == 0 { // if not empty
		// string "3421231"
		o = append(o, 0xa7, 0x33, 0x34, 0x32, 0x31, 0x32, 0x33, 0x31)
		if z.ToDoTitle == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.ToDoTitle)
		}
	}
	if (zb0001Mask & 0x10000000000) == 0 { // if not empty
		// string "3423964"
		o = append(o, 0xa7, 0x33, 0x34, 0x32, 0x33, 0x39, 0x36, 0x34)
		if z.ValidFlagStringProof == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ValidFlagStringProof)
		}
	}
	if (zb0001Mask & 0x20000000000) == 0 { // if not empty
		// string "140503"
		o = append(o, 0xa6, 0x31, 0x34, 0x30, 0x35, 0x30, 0x33)
		if z.OrdinalMost == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.OrdinalMost)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Task) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "342403":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FlagString = nil
			} else {
				if z.FlagString == nil {
					z.FlagString = new(int32)
				}
				*z.FlagString, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FlagString")
					return
				}
			}
		case "330265":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.PercentComplete = nil
			} else {
				if z.PercentComplete == nil {
					z.PercentComplete = new(float64)
				}
				*z.PercentComplete, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PercentComplete")
					return
				}
			}
		case "330663":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskAcceptanceState = nil
			} else {
				if z.TaskAcceptanceState == nil {
					z.TaskAcceptanceState = new(int32)
				}
				*z.TaskAcceptanceState, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskAcceptanceState")
					return
				}
			}
		case "3303211":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskAccepted = nil
			} else {
				if z.TaskAccepted == nil {
					z.TaskAccepted = new(bool)
				}
				*z.TaskAccepted, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskAccepted")
					return
				}
			}
		case "330403":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskActualEffort = nil
			} else {
				if z.TaskActualEffort == nil {
					z.TaskActualEffort = new(int32)
				}
				*z.TaskActualEffort, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskActualEffort")
					return
				}
			}
		case "3305731":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskAssigner = nil
			} else {
				if z.TaskAssigner == nil {
					z.TaskAssigner = new(string)
				}
				*z.TaskAssigner, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskAssigner")
					return
				}
			}
		case "33047258":
			z.TaskAssigners, bts, err = msgp.ReadBytesBytes(bts, z.TaskAssigners)
			if err != nil {
				err = msgp.WrapError(err, "TaskAssigners")
				return
			}
		case "3305211":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskComplete = nil
			} else {
				if z.TaskComplete == nil {
					z.TaskComplete = new(bool)
				}
				*z.TaskComplete, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskComplete")
					return
				}
			}
		case "330813":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskCustomFlags = nil
			} else {
				if z.TaskCustomFlags == nil {
					z.TaskCustomFlags = new(int32)
				}
				*z.TaskCustomFlags, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskCustomFlags")
					return
				}
			}
		case "3303964":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskDateCompleted = nil
			} else {
				if z.TaskDateCompleted == nil {
					z.TaskDateCompleted = new(int64)
				}
				*z.TaskDateCompleted, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskDateCompleted")
					return
				}
			}
		case "3303311":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskDeadOccurrence = nil
			} else {
				if z.TaskDeadOccurrence == nil {
					z.TaskDeadOccurrence = new(bool)
				}
				*z.TaskDeadOccurrence, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskDeadOccurrence")
					return
				}
			}
		case "3302964":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskDueDate = nil
			} else {
				if z.TaskDueDate == nil {
					z.TaskDueDate = new(int64)
				}
				*z.TaskDueDate, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskDueDate")
					return
				}
			}
		case "330413":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskEstimatedEffort = nil
			} else {
				if z.TaskEstimatedEffort == nil {
					z.TaskEstimatedEffort = new(int32)
				}
				*z.TaskEstimatedEffort, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskEstimatedEffort")
					return
				}
			}
		case "3305411":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskfCreator = nil
			} else {
				if z.TaskfCreator == nil {
					z.TaskfCreator = new(bool)
				}
				*z.TaskfCreator, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskfCreator")
					return
				}
			}
		case "3306811":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskfFixOffline = nil
			} else {
				if z.TaskfFixOffline == nil {
					z.TaskfFixOffline = new(bool)
				}
				*z.TaskfFixOffline, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskfFixOffline")
					return
				}
			}
		case "3306211":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskfRecurring = nil
			} else {
				if z.TaskfRecurring == nil {
					z.TaskfRecurring = new(bool)
				}
				*z.TaskfRecurring, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskfRecurring")
					return
				}
			}
		case "34073258":
			z.TaskGlobalId, bts, err = msgp.ReadBytesBytes(bts, z.TaskGlobalId)
			if err != nil {
				err = msgp.WrapError(err, "TaskGlobalId")
				return
			}
		case "330503":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskHistory = nil
			} else {
				if z.TaskHistory == nil {
					z.TaskHistory = new(int32)
				}
				*z.TaskHistory, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskHistory")
					return
				}
			}
		case "3306131":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskLastDelegate = nil
			} else {
				if z.TaskLastDelegate == nil {
					z.TaskLastDelegate = new(string)
				}
				*z.TaskLastDelegate, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskLastDelegate")
					return
				}
			}
		case "3304564":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskLastUpdate = nil
			} else {
				if z.TaskLastUpdate == nil {
					z.TaskLastUpdate = new(int64)
				}
				*z.TaskLastUpdate, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskLastUpdate")
					return
				}
			}
		case "3305831":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskLastUser = nil
			} else {
				if z.TaskLastUser == nil {
					z.TaskLastUser = new(string)
				}
				*z.TaskLastUser, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskLastUser")
					return
				}
			}
		case "340723":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskMode = nil
			} else {
				if z.TaskMode == nil {
					z.TaskMode = new(int32)
				}
				*z.TaskMode, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskMode")
					return
				}
			}
		case "330563":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskMultipleRecipients = nil
			} else {
				if z.TaskMultipleRecipients == nil {
					z.TaskMultipleRecipients = new(int32)
				}
				*z.TaskMultipleRecipients, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskMultipleRecipients")
					return
				}
			}
		case "3306011":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskNoCompute = nil
			} else {
				if z.TaskNoCompute == nil {
					z.TaskNoCompute = new(bool)
				}
				*z.TaskNoCompute, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskNoCompute")
					return
				}
			}
		case "330593":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskOrdinal = nil
			} else {
				if z.TaskOrdinal == nil {
					z.TaskOrdinal = new(int32)
				}
				*z.TaskOrdinal, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskOrdinal")
					return
				}
			}
		case "3305531":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskOwner = nil
			} else {
				if z.TaskOwner == nil {
					z.TaskOwner = new(string)
				}
				*z.TaskOwner, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskOwner")
					return
				}
			}
		case "330653":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskOwnership = nil
			} else {
				if z.TaskOwnership == nil {
					z.TaskOwnership = new(int32)
				}
				*z.TaskOwnership, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskOwnership")
					return
				}
			}
		case "33046258":
			z.TaskRecurrence, bts, err = msgp.ReadBytesBytes(bts, z.TaskRecurrence)
			if err != nil {
				err = msgp.WrapError(err, "TaskRecurrence")
				return
			}
		case "3303111":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskResetReminder = nil
			} else {
				if z.TaskResetReminder == nil {
					z.TaskResetReminder = new(bool)
				}
				*z.TaskResetReminder, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskResetReminder")
					return
				}
			}
		case "3306331":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskRole = nil
			} else {
				if z.TaskRole == nil {
					z.TaskRole = new(string)
				}
				*z.TaskRole, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskRole")
					return
				}
			}
		case "3302864":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskStartDate = nil
			} else {
				if z.TaskStartDate == nil {
					z.TaskStartDate = new(int64)
				}
				*z.TaskStartDate, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskStartDate")
					return
				}
			}
		case "330433":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskState = nil
			} else {
				if z.TaskState == nil {
					z.TaskState = new(int32)
				}
				*z.TaskState, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskState")
					return
				}
			}
		case "330253":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskStatus = nil
			} else {
				if z.TaskStatus == nil {
					z.TaskStatus = new(int32)
				}
				*z.TaskStatus, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskStatus")
					return
				}
			}
		case "3304911":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskStatusOnComplete = nil
			} else {
				if z.TaskStatusOnComplete == nil {
					z.TaskStatusOnComplete = new(bool)
				}
				*z.TaskStatusOnComplete, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskStatusOnComplete")
					return
				}
			}
		case "3305111":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskUpdates = nil
			} else {
				if z.TaskUpdates == nil {
					z.TaskUpdates = new(bool)
				}
				*z.TaskUpdates, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskUpdates")
					return
				}
			}
		case "330423":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TaskVersion = nil
			} else {
				if z.TaskVersion == nil {
					z.TaskVersion = new(int32)
				}
				*z.TaskVersion, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TaskVersion")
					return
				}
			}
		case "3302711":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TeamTask = nil
			} else {
				if z.TeamTask == nil {
					z.TeamTask = new(bool)
				}
				*z.TeamTask, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TeamTask")
					return
				}
			}
		case "3420864":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ToDoOrdinalDate = nil
			} else {
				if z.ToDoOrdinalDate == nil {
					z.ToDoOrdinalDate = new(int64)
				}
				*z.ToDoOrdinalDate, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ToDoOrdinalDate")
					return
				}
			}
		case "3420931":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ToDoSubOrdinal = nil
			} else {
				if z.ToDoSubOrdinal == nil {
					z.ToDoSubOrdinal = new(string)
				}
				*z.ToDoSubOrdinal, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ToDoSubOrdinal")
					return
				}
			}
		case "3421231":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ToDoTitle = nil
			} else {
				if z.ToDoTitle == nil {
					z.ToDoTitle = new(string)
				}
				*z.ToDoTitle, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ToDoTitle")
					return
				}
			}
		case "3423964":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ValidFlagStringProof = nil
			} else {
				if z.ValidFlagStringProof == nil {
					z.ValidFlagStringProof = new(int64)
				}
				*z.ValidFlagStringProof, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ValidFlagStringProof")
					return
				}
			}
		case "140503":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OrdinalMost = nil
			} else {
				if z.OrdinalMost == nil {
					z.OrdinalMost = new(int32)
				}
				*z.OrdinalMost, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OrdinalMost")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Task) Msgsize() (s int) {
	s = 3 + 7
	if z.FlagString == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.PercentComplete == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Float64Size
	}
	s += 7
	if z.TaskAcceptanceState == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.TaskAccepted == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.TaskActualEffort == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.TaskAssigner == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.TaskAssigner)
	}
	s += 9 + msgp.BytesPrefixSize + len(z.TaskAssigners) + 8
	if z.TaskComplete == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.TaskCustomFlags == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.TaskDateCompleted == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.TaskDeadOccurrence == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.TaskDueDate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.TaskEstimatedEffort == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.TaskfCreator == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.TaskfFixOffline == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.TaskfRecurring == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 9 + msgp.BytesPrefixSize + len(z.TaskGlobalId) + 7
	if z.TaskHistory == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.TaskLastDelegate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.TaskLastDelegate)
	}
	s += 8
	if z.TaskLastUpdate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.TaskLastUser == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.TaskLastUser)
	}
	s += 7
	if z.TaskMode == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.TaskMultipleRecipients == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.TaskNoCompute == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.TaskOrdinal == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.TaskOwner == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.TaskOwner)
	}
	s += 7
	if z.TaskOwnership == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9 + msgp.BytesPrefixSize + len(z.TaskRecurrence) + 8
	if z.TaskResetReminder == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.TaskRole == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.TaskRole)
	}
	s += 8
	if z.TaskStartDate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.TaskState == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.TaskStatus == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.TaskStatusOnComplete == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.TaskUpdates == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.TaskVersion == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.TeamTask == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ToDoOrdinalDate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.ToDoSubOrdinal == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ToDoSubOrdinal)
	}
	s += 8
	if z.ToDoTitle == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ToDoTitle)
	}
	s += 8
	if z.ValidFlagStringProof == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.OrdinalMost == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	return
}
