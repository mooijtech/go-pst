package properties

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Appointment) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "3333631":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AllAttendeesString")
					return
				}
				z.AllAttendeesString = nil
			} else {
				if z.AllAttendeesString == nil {
					z.AllAttendeesString = new(string)
				}
				*z.AllAttendeesString, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AllAttendeesString")
					return
				}
			}
		case "3335011":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AllowExternalCheck")
					return
				}
				z.AllowExternalCheck = nil
			} else {
				if z.AllowExternalCheck == nil {
					z.AllowExternalCheck = new(bool)
				}
				*z.AllowExternalCheck, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "AllowExternalCheck")
					return
				}
			}
		case "332873":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentAuxiliaryFlags")
					return
				}
				z.AppointmentAuxiliaryFlags = nil
			} else {
				if z.AppointmentAuxiliaryFlags == nil {
					z.AppointmentAuxiliaryFlags = new(int32)
				}
				*z.AppointmentAuxiliaryFlags, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentAuxiliaryFlags")
					return
				}
			}
		case "333003":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentColor")
					return
				}
				z.AppointmentColor = nil
			} else {
				if z.AppointmentColor == nil {
					z.AppointmentColor = new(int32)
				}
				*z.AppointmentColor, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentColor")
					return
				}
			}
		case "3336711":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentCounterProposal")
					return
				}
				z.AppointmentCounterProposal = nil
			} else {
				if z.AppointmentCounterProposal == nil {
					z.AppointmentCounterProposal = new(bool)
				}
				*z.AppointmentCounterProposal, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentCounterProposal")
					return
				}
			}
		case "332993":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentDuration")
					return
				}
				z.AppointmentDuration = nil
			} else {
				if z.AppointmentDuration == nil {
					z.AppointmentDuration = new(int32)
				}
				*z.AppointmentDuration, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentDuration")
					return
				}
			}
		case "3329764":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentEndDate")
					return
				}
				z.AppointmentEndDate = nil
			} else {
				if z.AppointmentEndDate == nil {
					z.AppointmentEndDate = new(int64)
				}
				*z.AppointmentEndDate, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentEndDate")
					return
				}
			}
		case "3329664":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentEndTime")
					return
				}
				z.AppointmentEndTime = nil
			} else {
				if z.AppointmentEndTime == nil {
					z.AppointmentEndTime = new(int64)
				}
				*z.AppointmentEndTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentEndTime")
					return
				}
			}
		case "3329464":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentEndWhole")
					return
				}
				z.AppointmentEndWhole = nil
			} else {
				if z.AppointmentEndWhole == nil {
					z.AppointmentEndWhole = new(int64)
				}
				*z.AppointmentEndWhole, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentEndWhole")
					return
				}
			}
		case "332833":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentLastSequence")
					return
				}
				z.AppointmentLastSequence = nil
			} else {
				if z.AppointmentLastSequence == nil {
					z.AppointmentLastSequence = new(int32)
				}
				*z.AppointmentLastSequence, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentLastSequence")
					return
				}
			}
		case "3631":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentMessageClass")
					return
				}
				z.AppointmentMessageClass = nil
			} else {
				if z.AppointmentMessageClass == nil {
					z.AppointmentMessageClass = new(string)
				}
				*z.AppointmentMessageClass, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentMessageClass")
					return
				}
			}
		case "3337011":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentNotAllowPropose")
					return
				}
				z.AppointmentNotAllowPropose = nil
			} else {
				if z.AppointmentNotAllowPropose == nil {
					z.AppointmentNotAllowPropose = new(bool)
				}
				*z.AppointmentNotAllowPropose, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentNotAllowPropose")
					return
				}
			}
		case "333693":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposalNumber")
					return
				}
				z.AppointmentProposalNumber = nil
			} else {
				if z.AppointmentProposalNumber == nil {
					z.AppointmentProposalNumber = new(int32)
				}
				*z.AppointmentProposalNumber, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposalNumber")
					return
				}
			}
		case "333663":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposedDuration")
					return
				}
				z.AppointmentProposedDuration = nil
			} else {
				if z.AppointmentProposedDuration == nil {
					z.AppointmentProposedDuration = new(int32)
				}
				*z.AppointmentProposedDuration, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposedDuration")
					return
				}
			}
		case "3336164":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposedEndWhole")
					return
				}
				z.AppointmentProposedEndWhole = nil
			} else {
				if z.AppointmentProposedEndWhole == nil {
					z.AppointmentProposedEndWhole = new(int64)
				}
				*z.AppointmentProposedEndWhole, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposedEndWhole")
					return
				}
			}
		case "3336064":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposedStartWhole")
					return
				}
				z.AppointmentProposedStartWhole = nil
			} else {
				if z.AppointmentProposedStartWhole == nil {
					z.AppointmentProposedStartWhole = new(int64)
				}
				*z.AppointmentProposedStartWhole, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposedStartWhole")
					return
				}
			}
		case "3332831":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentReplyName")
					return
				}
				z.AppointmentReplyName = nil
			} else {
				if z.AppointmentReplyName == nil {
					z.AppointmentReplyName = new(string)
				}
				*z.AppointmentReplyName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentReplyName")
					return
				}
			}
		case "3331264":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentReplyTime")
					return
				}
				z.AppointmentReplyTime = nil
			} else {
				if z.AppointmentReplyTime == nil {
					z.AppointmentReplyTime = new(int64)
				}
				*z.AppointmentReplyTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentReplyTime")
					return
				}
			}
		case "332813":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentSequence")
					return
				}
				z.AppointmentSequence = nil
			} else {
				if z.AppointmentSequence == nil {
					z.AppointmentSequence = new(int32)
				}
				*z.AppointmentSequence, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentSequence")
					return
				}
			}
		case "3328264":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentSequenceTime")
					return
				}
				z.AppointmentSequenceTime = nil
			} else {
				if z.AppointmentSequenceTime == nil {
					z.AppointmentSequenceTime = new(int64)
				}
				*z.AppointmentSequenceTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentSequenceTime")
					return
				}
			}
		case "3329864":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStartDate")
					return
				}
				z.AppointmentStartDate = nil
			} else {
				if z.AppointmentStartDate == nil {
					z.AppointmentStartDate = new(int64)
				}
				*z.AppointmentStartDate, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStartDate")
					return
				}
			}
		case "3329564":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStartTime")
					return
				}
				z.AppointmentStartTime = nil
			} else {
				if z.AppointmentStartTime == nil {
					z.AppointmentStartTime = new(int64)
				}
				*z.AppointmentStartTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStartTime")
					return
				}
			}
		case "3329364":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStartWhole")
					return
				}
				z.AppointmentStartWhole = nil
			} else {
				if z.AppointmentStartWhole == nil {
					z.AppointmentStartWhole = new(int64)
				}
				*z.AppointmentStartWhole, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStartWhole")
					return
				}
			}
		case "333033":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStateFlags")
					return
				}
				z.AppointmentStateFlags = nil
			} else {
				if z.AppointmentStateFlags == nil {
					z.AppointmentStateFlags = new(int32)
				}
				*z.AppointmentStateFlags, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStateFlags")
					return
				}
			}
		case "3330111":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentSubType")
					return
				}
				z.AppointmentSubType = nil
			} else {
				if z.AppointmentSubType == nil {
					z.AppointmentSubType = new(bool)
				}
				*z.AppointmentSubType, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentSubType")
					return
				}
			}
		case "3331864":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentUpdateTime")
					return
				}
				z.AppointmentUpdateTime = nil
			} else {
				if z.AppointmentUpdateTime == nil {
					z.AppointmentUpdateTime = new(int64)
				}
				*z.AppointmentUpdateTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AppointmentUpdateTime")
					return
				}
			}
		case "164":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttendeeCriticalChange")
					return
				}
				z.AttendeeCriticalChange = nil
			} else {
				if z.AttendeeCriticalChange == nil {
					z.AttendeeCriticalChange = new(int64)
				}
				*z.AttendeeCriticalChange, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "AttendeeCriticalChange")
					return
				}
			}
		case "3333811":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AutoFillLocation")
					return
				}
				z.AutoFillLocation = nil
			} else {
				if z.AutoFillLocation == nil {
					z.AutoFillLocation = new(bool)
				}
				*z.AutoFillLocation, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "AutoFillLocation")
					return
				}
			}
		case "3334811":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AutoStartCheck")
					return
				}
				z.AutoStartCheck = nil
			} else {
				if z.AutoStartCheck == nil {
					z.AutoStartCheck = new(bool)
				}
				*z.AutoStartCheck, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "AutoStartCheck")
					return
				}
			}
		case "332853":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "BusyStatus")
					return
				}
				z.BusyStatus = nil
			} else {
				if z.BusyStatus == nil {
					z.BusyStatus = new(int32)
				}
				*z.BusyStatus, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "BusyStatus")
					return
				}
			}
		case "283":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "CalendarType")
					return
				}
				z.CalendarType = nil
			} else {
				if z.CalendarType == nil {
					z.CalendarType = new(int32)
				}
				*z.CalendarType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "CalendarType")
					return
				}
			}
		case "3334031":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "CcAttendeesString")
					return
				}
				z.CcAttendeesString = nil
			} else {
				if z.CcAttendeesString == nil {
					z.CcAttendeesString = new(string)
				}
				*z.CcAttendeesString, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "CcAttendeesString")
					return
				}
			}
		case "332843":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ChangeHighlight")
					return
				}
				z.ChangeHighlight = nil
			} else {
				if z.ChangeHighlight == nil {
					z.ChangeHighlight = new(int32)
				}
				*z.ChangeHighlight, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "ChangeHighlight")
					return
				}
			}
		case "213":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ClientIntent")
					return
				}
				z.ClientIntent = nil
			} else {
				if z.ClientIntent == nil {
					z.ClientIntent = new(int32)
				}
				*z.ClientIntent, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "ClientIntent")
					return
				}
			}
		case "3333464":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ClipEnd")
					return
				}
				z.ClipEnd = nil
			} else {
				if z.ClipEnd == nil {
					z.ClipEnd = new(int64)
				}
				*z.ClipEnd, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ClipEnd")
					return
				}
			}
		case "3333364":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ClipStart")
					return
				}
				z.ClipStart = nil
			} else {
				if z.ClipStart == nil {
					z.ClipStart = new(int64)
				}
				*z.ClipStart, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ClipStart")
					return
				}
			}
		case "3335131":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "CollaborateDoc")
					return
				}
				z.CollaborateDoc = nil
			} else {
				if z.CollaborateDoc == nil {
					z.CollaborateDoc = new(string)
				}
				*z.CollaborateDoc, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "CollaborateDoc")
					return
				}
			}
		case "3334411":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ConferencingCheck")
					return
				}
				z.ConferencingCheck = nil
			} else {
				if z.ConferencingCheck == nil {
					z.ConferencingCheck = new(bool)
				}
				*z.ConferencingCheck, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ConferencingCheck")
					return
				}
			}
		case "333453":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ConferencingType")
					return
				}
				z.ConferencingType = nil
			} else {
				if z.ConferencingType == nil {
					z.ConferencingType = new(int32)
				}
				*z.ConferencingType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "ConferencingType")
					return
				}
			}
		case "172":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DayInterval")
					return
				}
				z.DayInterval = nil
			} else {
				if z.DayInterval == nil {
					z.DayInterval = new(int32)
				}
				*z.DayInterval, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "DayInterval")
					return
				}
			}
		case "40963":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DayOfMonth")
					return
				}
				z.DayOfMonth = nil
			} else {
				if z.DayOfMonth == nil {
					z.DayOfMonth = new(int32)
				}
				*z.DayOfMonth, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "DayOfMonth")
					return
				}
			}
		case "911":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DelegateMail")
					return
				}
				z.DelegateMail = nil
			} else {
				if z.DelegateMail == nil {
					z.DelegateMail = new(bool)
				}
				*z.DelegateMail, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "DelegateMail")
					return
				}
			}
		case "3334631":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Directory")
					return
				}
				z.Directory = nil
			} else {
				if z.Directory == nil {
					z.Directory = new(string)
				}
				*z.Directory, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Directory")
					return
				}
			}
		case "153":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "EndRecurrenceDate")
					return
				}
				z.EndRecurrenceDate = nil
			} else {
				if z.EndRecurrenceDate == nil {
					z.EndRecurrenceDate = new(int32)
				}
				*z.EndRecurrenceDate, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "EndRecurrenceDate")
					return
				}
			}
		case "163":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "EndRecurrenceTime")
					return
				}
				z.EndRecurrenceTime = nil
			} else {
				if z.EndRecurrenceTime == nil {
					z.EndRecurrenceTime = new(int32)
				}
				*z.EndRecurrenceTime, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "EndRecurrenceTime")
					return
				}
			}
		case "3332064":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ExceptionReplaceTime")
					return
				}
				z.ExceptionReplaceTime = nil
			} else {
				if z.ExceptionReplaceTime == nil {
					z.ExceptionReplaceTime = new(int64)
				}
				*z.ExceptionReplaceTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ExceptionReplaceTime")
					return
				}
			}
		case "3332311":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FExceptionalAttendees")
					return
				}
				z.FExceptionalAttendees = nil
			} else {
				if z.FExceptionalAttendees == nil {
					z.FExceptionalAttendees = new(bool)
				}
				*z.FExceptionalAttendees, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "FExceptionalAttendees")
					return
				}
			}
		case "3328611":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FExceptionalBody")
					return
				}
				z.FExceptionalBody = nil
			} else {
				if z.FExceptionalBody == nil {
					z.FExceptionalBody = new(bool)
				}
				*z.FExceptionalBody, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "FExceptionalBody")
					return
				}
			}
		case "3332111":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FInvited")
					return
				}
				z.FInvited = nil
			} else {
				if z.FInvited == nil {
					z.FInvited = new(bool)
				}
				*z.FInvited, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "FInvited")
					return
				}
			}
		case "3329011":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ForwardInstance")
					return
				}
				z.ForwardInstance = nil
			} else {
				if z.ForwardInstance == nil {
					z.ForwardInstance = new(bool)
				}
				*z.ForwardInstance, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ForwardInstance")
					return
				}
			}
		case "3332711":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FOthersAppointment")
					return
				}
				z.FOthersAppointment = nil
			} else {
				if z.FOthersAppointment == nil {
					z.FOthersAppointment = new(bool)
				}
				*z.FOthersAppointment, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "FOthersAppointment")
					return
				}
			}
		case "40973":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ICalendarDayOfWeekMask")
					return
				}
				z.ICalendarDayOfWeekMask = nil
			} else {
				if z.ICalendarDayOfWeekMask == nil {
					z.ICalendarDayOfWeekMask = new(int32)
				}
				*z.ICalendarDayOfWeekMask, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "ICalendarDayOfWeekMask")
					return
				}
			}
		case "333163":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "IntendedBusyStatus")
					return
				}
				z.IntendedBusyStatus = nil
			} else {
				if z.IntendedBusyStatus == nil {
					z.IntendedBusyStatus = new(int32)
				}
				*z.IntendedBusyStatus, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "IntendedBusyStatus")
					return
				}
			}
		case "1011":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "IsException")
					return
				}
				z.IsException = nil
			} else {
				if z.IsException == nil {
					z.IsException = new(bool)
				}
				*z.IsException, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "IsException")
					return
				}
			}
		case "511":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "IsRecurring")
					return
				}
				z.IsRecurring = nil
			} else {
				if z.IsRecurring == nil {
					z.IsRecurring = new(bool)
				}
				*z.IsRecurring, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "IsRecurring")
					return
				}
			}
		case "411":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "IsSilent")
					return
				}
				z.IsSilent = nil
			} else {
				if z.IsSilent == nil {
					z.IsSilent = new(bool)
				}
				*z.IsSilent, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "IsSilent")
					return
				}
			}
		case "3328831":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Location")
					return
				}
				z.Location = nil
			} else {
				if z.Location == nil {
					z.Location = new(string)
				}
				*z.Location, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Location")
					return
				}
			}
		case "383":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MeetingType")
					return
				}
				z.MeetingType = nil
			} else {
				if z.MeetingType == nil {
					z.MeetingType = new(int32)
				}
				*z.MeetingType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "MeetingType")
					return
				}
			}
		case "3328931":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MeetingWorkspaceUrl")
					return
				}
				z.MeetingWorkspaceUrl = nil
			} else {
				if z.MeetingWorkspaceUrl == nil {
					z.MeetingWorkspaceUrl = new(string)
				}
				*z.MeetingWorkspaceUrl, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MeetingWorkspaceUrl")
					return
				}
			}
		case "192":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MonthInterval")
					return
				}
				z.MonthInterval = nil
			} else {
				if z.MonthInterval == nil {
					z.MonthInterval = new(int32)
				}
				*z.MonthInterval, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "MonthInterval")
					return
				}
			}
		case "41023":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MonthOfYear")
					return
				}
				z.MonthOfYear = nil
			} else {
				if z.MonthOfYear == nil {
					z.MonthOfYear = new(int32)
				}
				*z.MonthOfYear, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "MonthOfYear")
					return
				}
			}
		case "233":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MonthOfYearMask")
					return
				}
				z.MonthOfYearMask = nil
			} else {
				if z.MonthOfYearMask == nil {
					z.MonthOfYearMask = new(int32)
				}
				*z.MonthOfYearMask, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "MonthOfYearMask")
					return
				}
			}
		case "3335231":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NetShowUrl")
					return
				}
				z.NetShowUrl = nil
			} else {
				if z.NetShowUrl == nil {
					z.NetShowUrl = new(string)
				}
				*z.NetShowUrl, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "NetShowUrl")
					return
				}
			}
		case "410711":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NoEndDateFlag")
					return
				}
				z.NoEndDateFlag = nil
			} else {
				if z.NoEndDateFlag == nil {
					z.NoEndDateFlag = new(bool)
				}
				*z.NoEndDateFlag, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "NoEndDateFlag")
					return
				}
			}
		case "3410431":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NonSendableBcc")
					return
				}
				z.NonSendableBcc = nil
			} else {
				if z.NonSendableBcc == nil {
					z.NonSendableBcc = new(string)
				}
				*z.NonSendableBcc, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "NonSendableBcc")
					return
				}
			}
		case "3410331":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NonSendableCc")
					return
				}
				z.NonSendableCc = nil
			} else {
				if z.NonSendableCc == nil {
					z.NonSendableCc = new(string)
				}
				*z.NonSendableCc, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "NonSendableCc")
					return
				}
			}
		case "3410231":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "NonSendableTo")
					return
				}
				z.NonSendableTo = nil
			} else {
				if z.NonSendableTo == nil {
					z.NonSendableTo = new(string)
				}
				*z.NonSendableTo, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "NonSendableTo")
					return
				}
			}
		case "41013":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Occurrences")
					return
				}
				z.Occurrences = nil
			} else {
				if z.Occurrences == nil {
					z.Occurrences = new(int32)
				}
				*z.Occurrences, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Occurrences")
					return
				}
			}
		case "4031":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OldLocation")
					return
				}
				z.OldLocation = nil
			} else {
				if z.OldLocation == nil {
					z.OldLocation = new(string)
				}
				*z.OldLocation, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "OldLocation")
					return
				}
			}
		case "242":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OldRecurrenceType")
					return
				}
				z.OldRecurrenceType = nil
			} else {
				if z.OldRecurrenceType == nil {
					z.OldRecurrenceType = new(int32)
				}
				*z.OldRecurrenceType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "OldRecurrenceType")
					return
				}
			}
		case "4264":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OldWhenEndWhole")
					return
				}
				z.OldWhenEndWhole = nil
			} else {
				if z.OldWhenEndWhole == nil {
					z.OldWhenEndWhole = new(int64)
				}
				*z.OldWhenEndWhole, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "OldWhenEndWhole")
					return
				}
			}
		case "4164":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OldWhenStartWhole")
					return
				}
				z.OldWhenStartWhole = nil
			} else {
				if z.OldWhenStartWhole == nil {
					z.OldWhenStartWhole = new(int64)
				}
				*z.OldWhenStartWhole, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "OldWhenStartWhole")
					return
				}
			}
		case "3335331":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OnlinePassword")
					return
				}
				z.OnlinePassword = nil
			} else {
				if z.OnlinePassword == nil {
					z.OnlinePassword = new(string)
				}
				*z.OnlinePassword, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "OnlinePassword")
					return
				}
			}
		case "731":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OptionalAttendees")
					return
				}
				z.OptionalAttendees = nil
			} else {
				if z.OptionalAttendees == nil {
					z.OptionalAttendees = new(string)
				}
				*z.OptionalAttendees, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "OptionalAttendees")
					return
				}
			}
		case "3334731":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OrganizerAlias")
					return
				}
				z.OrganizerAlias = nil
			} else {
				if z.OrganizerAlias == nil {
					z.OrganizerAlias = new(string)
				}
				*z.OrganizerAlias, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "OrganizerAlias")
					return
				}
			}
		case "2664":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OwnerCriticalChange")
					return
				}
				z.OwnerCriticalChange = nil
			} else {
				if z.OwnerCriticalChange == nil {
					z.OwnerCriticalChange = new(int64)
				}
				*z.OwnerCriticalChange, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "OwnerCriticalChange")
					return
				}
			}
		case "3332631":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OwnerName")
					return
				}
				z.OwnerName = nil
			} else {
				if z.OwnerName == nil {
					z.OwnerName = new(string)
				}
				*z.OwnerName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "OwnerName")
					return
				}
			}
		case "41093":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RecurrenceDuration")
					return
				}
				z.RecurrenceDuration = nil
			} else {
				if z.RecurrenceDuration == nil {
					z.RecurrenceDuration = new(int32)
				}
				*z.RecurrenceDuration, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "RecurrenceDuration")
					return
				}
			}
		case "3333031":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RecurrencePattern")
					return
				}
				z.RecurrencePattern = nil
			} else {
				if z.RecurrencePattern == nil {
					z.RecurrencePattern = new(string)
				}
				*z.RecurrencePattern, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RecurrencePattern")
					return
				}
			}
		case "333293":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RecurrenceType")
					return
				}
				z.RecurrenceType = nil
			} else {
				if z.RecurrenceType == nil {
					z.RecurrenceType = new(int32)
				}
				*z.RecurrenceType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "RecurrenceType")
					return
				}
			}
		case "3331511":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Recurring")
					return
				}
				z.Recurring = nil
			} else {
				if z.Recurring == nil {
					z.Recurring = new(bool)
				}
				*z.Recurring, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "Recurring")
					return
				}
			}
		case "340493":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ReminderDelta")
					return
				}
				z.ReminderDelta = nil
			} else {
				if z.ReminderDelta == nil {
					z.ReminderDelta = new(int32)
				}
				*z.ReminderDelta, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "ReminderDelta")
					return
				}
			}
		case "3407931":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ReminderFileParameter")
					return
				}
				z.ReminderFileParameter = nil
			} else {
				if z.ReminderFileParameter == nil {
					z.ReminderFileParameter = new(string)
				}
				*z.ReminderFileParameter, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReminderFileParameter")
					return
				}
			}
		case "3407611":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ReminderOverride")
					return
				}
				z.ReminderOverride = nil
			} else {
				if z.ReminderOverride == nil {
					z.ReminderOverride = new(bool)
				}
				*z.ReminderOverride, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ReminderOverride")
					return
				}
			}
		case "3407811":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ReminderPlaySound")
					return
				}
				z.ReminderPlaySound = nil
			} else {
				if z.ReminderPlaySound == nil {
					z.ReminderPlaySound = new(bool)
				}
				*z.ReminderPlaySound, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ReminderPlaySound")
					return
				}
			}
		case "3405111":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ReminderSet")
					return
				}
				z.ReminderSet = nil
			} else {
				if z.ReminderSet == nil {
					z.ReminderSet = new(bool)
				}
				*z.ReminderSet, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ReminderSet")
					return
				}
			}
		case "3414464":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ReminderSignalTime")
					return
				}
				z.ReminderSignalTime = nil
			} else {
				if z.ReminderSignalTime == nil {
					z.ReminderSignalTime = new(int64)
				}
				*z.ReminderSignalTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ReminderSignalTime")
					return
				}
			}
		case "3405064":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ReminderTime")
					return
				}
				z.ReminderTime = nil
			} else {
				if z.ReminderTime == nil {
					z.ReminderTime = new(int64)
				}
				*z.ReminderTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ReminderTime")
					return
				}
			}
		case "3405364":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ReminderTimeDate")
					return
				}
				z.ReminderTimeDate = nil
			} else {
				if z.ReminderTimeDate == nil {
					z.ReminderTimeDate = new(int64)
				}
				*z.ReminderTimeDate, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ReminderTimeDate")
					return
				}
			}
		case "3405264":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ReminderTimeTime")
					return
				}
				z.ReminderTimeTime = nil
			} else {
				if z.ReminderTimeTime == nil {
					z.ReminderTimeTime = new(int64)
				}
				*z.ReminderTimeTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ReminderTimeTime")
					return
				}
			}
		case "340773":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ReminderType")
					return
				}
				z.ReminderType = nil
			} else {
				if z.ReminderType == nil {
					z.ReminderType = new(int32)
				}
				*z.ReminderType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "ReminderType")
					return
				}
			}
		case "631":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RequiredAttendees")
					return
				}
				z.RequiredAttendees = nil
			} else {
				if z.RequiredAttendees == nil {
					z.RequiredAttendees = new(string)
				}
				*z.RequiredAttendees, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RequiredAttendees")
					return
				}
			}
		case "831":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ResourceAttendees")
					return
				}
				z.ResourceAttendees = nil
			} else {
				if z.ResourceAttendees == nil {
					z.ResourceAttendees = new(string)
				}
				*z.ResourceAttendees, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ResourceAttendees")
					return
				}
			}
		case "333043":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ResponseStatus")
					return
				}
				z.ResponseStatus = nil
			} else {
				if z.ResponseStatus == nil {
					z.ResponseStatus = new(int32)
				}
				*z.ResponseStatus, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "ResponseStatus")
					return
				}
			}
		case "3425211":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ServerProcessed")
					return
				}
				z.ServerProcessed = nil
			} else {
				if z.ServerProcessed == nil {
					z.ServerProcessed = new(bool)
				}
				*z.ServerProcessed, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ServerProcessed")
					return
				}
			}
		case "342533":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ServerProcessingActions")
					return
				}
				z.ServerProcessingActions = nil
			} else {
				if z.ServerProcessingActions == nil {
					z.ServerProcessingActions = new(int32)
				}
				*z.ServerProcessingActions, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "ServerProcessingActions")
					return
				}
			}
		case "3340311":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SingleBodyiCal")
					return
				}
				z.SingleBodyiCal = nil
			} else {
				if z.SingleBodyiCal == nil {
					z.SingleBodyiCal = new(bool)
				}
				*z.SingleBodyiCal, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "SingleBodyiCal")
					return
				}
			}
		case "133":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "StartRecurrenceDate")
					return
				}
				z.StartRecurrenceDate = nil
			} else {
				if z.StartRecurrenceDate == nil {
					z.StartRecurrenceDate = new(int32)
				}
				*z.StartRecurrenceDate, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "StartRecurrenceDate")
					return
				}
			}
		case "143":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "StartRecurrenceTime")
					return
				}
				z.StartRecurrenceTime = nil
			} else {
				if z.StartRecurrenceTime == nil {
					z.StartRecurrenceTime = new(int32)
				}
				*z.StartRecurrenceTime, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "StartRecurrenceTime")
					return
				}
			}
		case "123":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TimeZone")
					return
				}
				z.TimeZone = nil
			} else {
				if z.TimeZone == nil {
					z.TimeZone = new(int32)
				}
				*z.TimeZone, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "TimeZone")
					return
				}
			}
		case "3333231":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TimeZoneDescription")
					return
				}
				z.TimeZoneDescription = nil
			} else {
				if z.TimeZoneDescription == nil {
					z.TimeZoneDescription = new(string)
				}
				*z.TimeZoneDescription, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "TimeZoneDescription")
					return
				}
			}
		case "3333931":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ToAttendeesString")
					return
				}
				z.ToAttendeesString = nil
			} else {
				if z.ToAttendeesString == nil {
					z.ToAttendeesString = new(string)
				}
				*z.ToAttendeesString, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ToAttendeesString")
					return
				}
			}
		case "182":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "WeekInterval")
					return
				}
				z.WeekInterval = nil
			} else {
				if z.WeekInterval == nil {
					z.WeekInterval = new(int32)
				}
				*z.WeekInterval, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "WeekInterval")
					return
				}
			}
		case "231":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Where")
					return
				}
				z.Where = nil
			} else {
				if z.Where == nil {
					z.Where = new(string)
				}
				*z.Where, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Where")
					return
				}
			}
		case "202":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "YearInterval")
					return
				}
				z.YearInterval = nil
			} else {
				if z.YearInterval == nil {
					z.YearInterval = new(int32)
				}
				*z.YearInterval, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "YearInterval")
					return
				}
			}
		case "LocationUrl":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "LocationUrl")
					return
				}
				z.LocationUrl = nil
			} else {
				if z.LocationUrl == nil {
					z.LocationUrl = new(string)
				}
				*z.LocationUrl, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "LocationUrl")
					return
				}
			}
		case "MeetingDoNotForward":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MeetingDoNotForward")
					return
				}
				z.MeetingDoNotForward = nil
			} else {
				if z.MeetingDoNotForward == nil {
					z.MeetingDoNotForward = new(bool)
				}
				*z.MeetingDoNotForward, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "MeetingDoNotForward")
					return
				}
			}
		case "266963":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FreeBusyPublishEnd")
					return
				}
				z.FreeBusyPublishEnd = nil
			} else {
				if z.FreeBusyPublishEnd == nil {
					z.FreeBusyPublishEnd = new(int32)
				}
				*z.FreeBusyPublishEnd, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "FreeBusyPublishEnd")
					return
				}
			}
		case "266953":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FreeBusyPublishStart")
					return
				}
				z.FreeBusyPublishStart = nil
			} else {
				if z.FreeBusyPublishStart == nil {
					z.FreeBusyPublishStart = new(int32)
				}
				*z.FreeBusyPublishStart, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "FreeBusyPublishStart")
					return
				}
			}
		case "2672864":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FreeBusyRangeTimestamp")
					return
				}
				z.FreeBusyRangeTimestamp = nil
			} else {
				if z.FreeBusyRangeTimestamp == nil {
					z.FreeBusyRangeTimestamp = new(int64)
				}
				*z.FreeBusyRangeTimestamp, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "FreeBusyRangeTimestamp")
					return
				}
			}
		case "429264":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ICalendarEndTime")
					return
				}
				z.ICalendarEndTime = nil
			} else {
				if z.ICalendarEndTime == nil {
					z.ICalendarEndTime = new(int64)
				}
				*z.ICalendarEndTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ICalendarEndTime")
					return
				}
			}
		case "429864":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ICalendarReminderNextTime")
					return
				}
				z.ICalendarReminderNextTime = nil
			} else {
				if z.ICalendarReminderNextTime == nil {
					z.ICalendarReminderNextTime = new(int64)
				}
				*z.ICalendarReminderNextTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ICalendarReminderNextTime")
					return
				}
			}
		case "3200111":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Processed")
					return
				}
				z.Processed = nil
			} else {
				if z.Processed == nil {
					z.Processed = new(bool)
				}
				*z.Processed, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "Processed")
					return
				}
			}
		case "2673311":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoAutoAcceptAppointments")
					return
				}
				z.ScheduleInfoAutoAcceptAppointments = nil
			} else {
				if z.ScheduleInfoAutoAcceptAppointments == nil {
					z.ScheduleInfoAutoAcceptAppointments = new(bool)
				}
				*z.ScheduleInfoAutoAcceptAppointments, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoAutoAcceptAppointments")
					return
				}
			}
		case "2669011":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDelegatorWantsCopy")
					return
				}
				z.ScheduleInfoDelegatorWantsCopy = nil
			} else {
				if z.ScheduleInfoDelegatorWantsCopy == nil {
					z.ScheduleInfoDelegatorWantsCopy = new(bool)
				}
				*z.ScheduleInfoDelegatorWantsCopy, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDelegatorWantsCopy")
					return
				}
			}
		case "2669911":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDelegatorWantsInfo")
					return
				}
				z.ScheduleInfoDelegatorWantsInfo = nil
			} else {
				if z.ScheduleInfoDelegatorWantsInfo == nil {
					z.ScheduleInfoDelegatorWantsInfo = new(bool)
				}
				*z.ScheduleInfoDelegatorWantsInfo, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDelegatorWantsInfo")
					return
				}
			}
		case "2673511":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDisallowOverlappingAppts")
					return
				}
				z.ScheduleInfoDisallowOverlappingAppts = nil
			} else {
				if z.ScheduleInfoDisallowOverlappingAppts == nil {
					z.ScheduleInfoDisallowOverlappingAppts = new(bool)
				}
				*z.ScheduleInfoDisallowOverlappingAppts, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDisallowOverlappingAppts")
					return
				}
			}
		case "2673411":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDisallowRecurringAppts")
					return
				}
				z.ScheduleInfoDisallowRecurringAppts = nil
			} else {
				if z.ScheduleInfoDisallowRecurringAppts == nil {
					z.ScheduleInfoDisallowRecurringAppts = new(bool)
				}
				*z.ScheduleInfoDisallowRecurringAppts, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDisallowRecurringAppts")
					return
				}
			}
		case "2669111":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDontMailDelegates")
					return
				}
				z.ScheduleInfoDontMailDelegates = nil
			} else {
				if z.ScheduleInfoDontMailDelegates == nil {
					z.ScheduleInfoDontMailDelegates = new(bool)
				}
				*z.ScheduleInfoDontMailDelegates, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDontMailDelegates")
					return
				}
			}
		case "266893":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoResourceType")
					return
				}
				z.ScheduleInfoResourceType = nil
			} else {
				if z.ScheduleInfoResourceType == nil {
					z.ScheduleInfoResourceType = new(int32)
				}
				*z.ScheduleInfoResourceType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoResourceType")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Appointment) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(120)
	var zb0001Mask [2]uint64 /* 120 bits */
	_ = zb0001Mask
	if z.AllAttendeesString == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1
	}
	if z.AllowExternalCheck == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2
	}
	if z.AppointmentAuxiliaryFlags == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4
	}
	if z.AppointmentColor == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8
	}
	if z.AppointmentCounterProposal == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10
	}
	if z.AppointmentDuration == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20
	}
	if z.AppointmentEndDate == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40
	}
	if z.AppointmentEndTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80
	}
	if z.AppointmentEndWhole == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100
	}
	if z.AppointmentLastSequence == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200
	}
	if z.AppointmentMessageClass == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400
	}
	if z.AppointmentNotAllowPropose == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800
	}
	if z.AppointmentProposalNumber == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000
	}
	if z.AppointmentProposedDuration == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000
	}
	if z.AppointmentProposedEndWhole == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000
	}
	if z.AppointmentProposedStartWhole == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000
	}
	if z.AppointmentReplyName == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000
	}
	if z.AppointmentReplyTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000
	}
	if z.AppointmentSequence == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000
	}
	if z.AppointmentSequenceTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000
	}
	if z.AppointmentStartDate == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000
	}
	if z.AppointmentStartTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000
	}
	if z.AppointmentStartWhole == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000
	}
	if z.AppointmentStateFlags == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000
	}
	if z.AppointmentSubType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000
	}
	if z.AppointmentUpdateTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000
	}
	if z.AttendeeCriticalChange == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000
	}
	if z.AutoFillLocation == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000
	}
	if z.AutoStartCheck == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000
	}
	if z.BusyStatus == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000
	}
	if z.CalendarType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000
	}
	if z.CcAttendeesString == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000000
	}
	if z.ChangeHighlight == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000000
	}
	if z.ClientIntent == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000000
	}
	if z.ClipEnd == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000000
	}
	if z.ClipStart == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000000
	}
	if z.CollaborateDoc == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000000
	}
	if z.ConferencingCheck == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000000
	}
	if z.ConferencingType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000000
	}
	if z.DayInterval == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000000
	}
	if z.DayOfMonth == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000000
	}
	if z.DelegateMail == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000000
	}
	if z.Directory == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000000
	}
	if z.EndRecurrenceDate == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000000000
	}
	if z.EndRecurrenceTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000000000
	}
	if z.ExceptionReplaceTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000000000
	}
	if z.FExceptionalAttendees == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000000000
	}
	if z.FExceptionalBody == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000000000
	}
	if z.FInvited == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000000000
	}
	if z.ForwardInstance == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000000000
	}
	if z.FOthersAppointment == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000000000
	}
	if z.ICalendarDayOfWeekMask == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000000000
	}
	if z.IntendedBusyStatus == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000000000
	}
	if z.IsException == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000000000
	}
	if z.IsRecurring == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000000000
	}
	if z.IsSilent == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000000000000
	}
	if z.Location == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000000000000
	}
	if z.MeetingType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000000000000
	}
	if z.MeetingWorkspaceUrl == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000000000000
	}
	if z.MonthInterval == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000000000000
	}
	if z.MonthOfYear == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000000000000
	}
	if z.MonthOfYearMask == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000000000000
	}
	if z.NetShowUrl == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000000000000
	}
	if z.NoEndDateFlag == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000000000000
	}
	if z.NonSendableBcc == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x1
	}
	if z.NonSendableCc == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x2
	}
	if z.NonSendableTo == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x4
	}
	if z.Occurrences == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x8
	}
	if z.OldLocation == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x10
	}
	if z.OldRecurrenceType == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x20
	}
	if z.OldWhenEndWhole == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x40
	}
	if z.OldWhenStartWhole == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x80
	}
	if z.OnlinePassword == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x100
	}
	if z.OptionalAttendees == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x200
	}
	if z.OrganizerAlias == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x400
	}
	if z.OwnerCriticalChange == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x800
	}
	if z.OwnerName == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x1000
	}
	if z.RecurrenceDuration == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x2000
	}
	if z.RecurrencePattern == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x4000
	}
	if z.RecurrenceType == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x8000
	}
	if z.Recurring == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x10000
	}
	if z.ReminderDelta == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x20000
	}
	if z.ReminderFileParameter == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x40000
	}
	if z.ReminderOverride == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x80000
	}
	if z.ReminderPlaySound == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x100000
	}
	if z.ReminderSet == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x200000
	}
	if z.ReminderSignalTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x400000
	}
	if z.ReminderTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x800000
	}
	if z.ReminderTimeDate == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x1000000
	}
	if z.ReminderTimeTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x2000000
	}
	if z.ReminderType == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x4000000
	}
	if z.RequiredAttendees == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x8000000
	}
	if z.ResourceAttendees == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x10000000
	}
	if z.ResponseStatus == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x20000000
	}
	if z.ServerProcessed == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x40000000
	}
	if z.ServerProcessingActions == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x80000000
	}
	if z.SingleBodyiCal == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x100000000
	}
	if z.StartRecurrenceDate == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x200000000
	}
	if z.StartRecurrenceTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x400000000
	}
	if z.TimeZone == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x800000000
	}
	if z.TimeZoneDescription == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x1000000000
	}
	if z.ToAttendeesString == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x2000000000
	}
	if z.WeekInterval == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x4000000000
	}
	if z.Where == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x8000000000
	}
	if z.YearInterval == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x10000000000
	}
	if z.FreeBusyPublishEnd == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x80000000000
	}
	if z.FreeBusyPublishStart == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x100000000000
	}
	if z.FreeBusyRangeTimestamp == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x200000000000
	}
	if z.ICalendarEndTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x400000000000
	}
	if z.ICalendarReminderNextTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x800000000000
	}
	if z.Processed == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x1000000000000
	}
	if z.ScheduleInfoAutoAcceptAppointments == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x2000000000000
	}
	if z.ScheduleInfoDelegatorWantsCopy == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x4000000000000
	}
	if z.ScheduleInfoDelegatorWantsInfo == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x8000000000000
	}
	if z.ScheduleInfoDisallowOverlappingAppts == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x10000000000000
	}
	if z.ScheduleInfoDisallowRecurringAppts == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x20000000000000
	}
	if z.ScheduleInfoDontMailDelegates == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x40000000000000
	}
	if z.ScheduleInfoResourceType == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x80000000000000
	}
	// variable map header, size zb0001Len
	err = en.WriteMapHeader(zb0001Len)
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask[0] & 0x1) == 0 { // if not empty
		// write "3333631"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x33, 0x36, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AllAttendeesString == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AllAttendeesString)
			if err != nil {
				err = msgp.WrapError(err, "AllAttendeesString")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2) == 0 { // if not empty
		// write "3335011"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x35, 0x30, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.AllowExternalCheck == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.AllowExternalCheck)
			if err != nil {
				err = msgp.WrapError(err, "AllowExternalCheck")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4) == 0 { // if not empty
		// write "332873"
		err = en.Append(0xa6, 0x33, 0x33, 0x32, 0x38, 0x37, 0x33)
		if err != nil {
			return
		}
		if z.AppointmentAuxiliaryFlags == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AppointmentAuxiliaryFlags)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentAuxiliaryFlags")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8) == 0 { // if not empty
		// write "333003"
		err = en.Append(0xa6, 0x33, 0x33, 0x33, 0x30, 0x30, 0x33)
		if err != nil {
			return
		}
		if z.AppointmentColor == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AppointmentColor)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentColor")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x10) == 0 { // if not empty
		// write "3336711"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x36, 0x37, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.AppointmentCounterProposal == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.AppointmentCounterProposal)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentCounterProposal")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x20) == 0 { // if not empty
		// write "332993"
		err = en.Append(0xa6, 0x33, 0x33, 0x32, 0x39, 0x39, 0x33)
		if err != nil {
			return
		}
		if z.AppointmentDuration == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AppointmentDuration)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentDuration")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x40) == 0 { // if not empty
		// write "3329764"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x39, 0x37, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentEndDate == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentEndDate)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentEndDate")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x80) == 0 { // if not empty
		// write "3329664"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x39, 0x36, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentEndTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentEndTime)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentEndTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x100) == 0 { // if not empty
		// write "3329464"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x39, 0x34, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentEndWhole == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentEndWhole)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentEndWhole")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x200) == 0 { // if not empty
		// write "332833"
		err = en.Append(0xa6, 0x33, 0x33, 0x32, 0x38, 0x33, 0x33)
		if err != nil {
			return
		}
		if z.AppointmentLastSequence == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AppointmentLastSequence)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentLastSequence")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x400) == 0 { // if not empty
		// write "3631"
		err = en.Append(0xa4, 0x33, 0x36, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AppointmentMessageClass == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AppointmentMessageClass)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentMessageClass")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x800) == 0 { // if not empty
		// write "3337011"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x37, 0x30, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.AppointmentNotAllowPropose == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.AppointmentNotAllowPropose)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentNotAllowPropose")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x1000) == 0 { // if not empty
		// write "333693"
		err = en.Append(0xa6, 0x33, 0x33, 0x33, 0x36, 0x39, 0x33)
		if err != nil {
			return
		}
		if z.AppointmentProposalNumber == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AppointmentProposalNumber)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentProposalNumber")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2000) == 0 { // if not empty
		// write "333663"
		err = en.Append(0xa6, 0x33, 0x33, 0x33, 0x36, 0x36, 0x33)
		if err != nil {
			return
		}
		if z.AppointmentProposedDuration == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AppointmentProposedDuration)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentProposedDuration")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4000) == 0 { // if not empty
		// write "3336164"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x36, 0x31, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentProposedEndWhole == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentProposedEndWhole)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentProposedEndWhole")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8000) == 0 { // if not empty
		// write "3336064"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x36, 0x30, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentProposedStartWhole == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentProposedStartWhole)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentProposedStartWhole")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x10000) == 0 { // if not empty
		// write "3332831"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x32, 0x38, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AppointmentReplyName == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AppointmentReplyName)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentReplyName")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x20000) == 0 { // if not empty
		// write "3331264"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x31, 0x32, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentReplyTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentReplyTime)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentReplyTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x40000) == 0 { // if not empty
		// write "332813"
		err = en.Append(0xa6, 0x33, 0x33, 0x32, 0x38, 0x31, 0x33)
		if err != nil {
			return
		}
		if z.AppointmentSequence == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AppointmentSequence)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentSequence")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x80000) == 0 { // if not empty
		// write "3328264"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x38, 0x32, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentSequenceTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentSequenceTime)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentSequenceTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x100000) == 0 { // if not empty
		// write "3329864"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x39, 0x38, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentStartDate == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentStartDate)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentStartDate")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x200000) == 0 { // if not empty
		// write "3329564"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x39, 0x35, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentStartTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentStartTime)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentStartTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x400000) == 0 { // if not empty
		// write "3329364"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x39, 0x33, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentStartWhole == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentStartWhole)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentStartWhole")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x800000) == 0 { // if not empty
		// write "333033"
		err = en.Append(0xa6, 0x33, 0x33, 0x33, 0x30, 0x33, 0x33)
		if err != nil {
			return
		}
		if z.AppointmentStateFlags == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AppointmentStateFlags)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentStateFlags")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x1000000) == 0 { // if not empty
		// write "3330111"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x30, 0x31, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.AppointmentSubType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.AppointmentSubType)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentSubType")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2000000) == 0 { // if not empty
		// write "3331864"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x31, 0x38, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AppointmentUpdateTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AppointmentUpdateTime)
			if err != nil {
				err = msgp.WrapError(err, "AppointmentUpdateTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4000000) == 0 { // if not empty
		// write "164"
		err = en.Append(0xa3, 0x31, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.AttendeeCriticalChange == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.AttendeeCriticalChange)
			if err != nil {
				err = msgp.WrapError(err, "AttendeeCriticalChange")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8000000) == 0 { // if not empty
		// write "3333811"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x33, 0x38, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.AutoFillLocation == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.AutoFillLocation)
			if err != nil {
				err = msgp.WrapError(err, "AutoFillLocation")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x10000000) == 0 { // if not empty
		// write "3334811"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x34, 0x38, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.AutoStartCheck == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.AutoStartCheck)
			if err != nil {
				err = msgp.WrapError(err, "AutoStartCheck")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x20000000) == 0 { // if not empty
		// write "332853"
		err = en.Append(0xa6, 0x33, 0x33, 0x32, 0x38, 0x35, 0x33)
		if err != nil {
			return
		}
		if z.BusyStatus == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.BusyStatus)
			if err != nil {
				err = msgp.WrapError(err, "BusyStatus")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x40000000) == 0 { // if not empty
		// write "283"
		err = en.Append(0xa3, 0x32, 0x38, 0x33)
		if err != nil {
			return
		}
		if z.CalendarType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.CalendarType)
			if err != nil {
				err = msgp.WrapError(err, "CalendarType")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x80000000) == 0 { // if not empty
		// write "3334031"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x34, 0x30, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.CcAttendeesString == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.CcAttendeesString)
			if err != nil {
				err = msgp.WrapError(err, "CcAttendeesString")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x100000000) == 0 { // if not empty
		// write "332843"
		err = en.Append(0xa6, 0x33, 0x33, 0x32, 0x38, 0x34, 0x33)
		if err != nil {
			return
		}
		if z.ChangeHighlight == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.ChangeHighlight)
			if err != nil {
				err = msgp.WrapError(err, "ChangeHighlight")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x200000000) == 0 { // if not empty
		// write "213"
		err = en.Append(0xa3, 0x32, 0x31, 0x33)
		if err != nil {
			return
		}
		if z.ClientIntent == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.ClientIntent)
			if err != nil {
				err = msgp.WrapError(err, "ClientIntent")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x400000000) == 0 { // if not empty
		// write "3333464"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x33, 0x34, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ClipEnd == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ClipEnd)
			if err != nil {
				err = msgp.WrapError(err, "ClipEnd")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x800000000) == 0 { // if not empty
		// write "3333364"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x33, 0x33, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ClipStart == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ClipStart)
			if err != nil {
				err = msgp.WrapError(err, "ClipStart")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x1000000000) == 0 { // if not empty
		// write "3335131"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x35, 0x31, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.CollaborateDoc == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.CollaborateDoc)
			if err != nil {
				err = msgp.WrapError(err, "CollaborateDoc")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2000000000) == 0 { // if not empty
		// write "3334411"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x34, 0x34, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ConferencingCheck == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ConferencingCheck)
			if err != nil {
				err = msgp.WrapError(err, "ConferencingCheck")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4000000000) == 0 { // if not empty
		// write "333453"
		err = en.Append(0xa6, 0x33, 0x33, 0x33, 0x34, 0x35, 0x33)
		if err != nil {
			return
		}
		if z.ConferencingType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.ConferencingType)
			if err != nil {
				err = msgp.WrapError(err, "ConferencingType")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8000000000) == 0 { // if not empty
		// write "172"
		err = en.Append(0xa3, 0x31, 0x37, 0x32)
		if err != nil {
			return
		}
		if z.DayInterval == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.DayInterval)
			if err != nil {
				err = msgp.WrapError(err, "DayInterval")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x10000000000) == 0 { // if not empty
		// write "40963"
		err = en.Append(0xa5, 0x34, 0x30, 0x39, 0x36, 0x33)
		if err != nil {
			return
		}
		if z.DayOfMonth == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.DayOfMonth)
			if err != nil {
				err = msgp.WrapError(err, "DayOfMonth")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x20000000000) == 0 { // if not empty
		// write "911"
		err = en.Append(0xa3, 0x39, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.DelegateMail == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.DelegateMail)
			if err != nil {
				err = msgp.WrapError(err, "DelegateMail")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x40000000000) == 0 { // if not empty
		// write "3334631"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x34, 0x36, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.Directory == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.Directory)
			if err != nil {
				err = msgp.WrapError(err, "Directory")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x80000000000) == 0 { // if not empty
		// write "153"
		err = en.Append(0xa3, 0x31, 0x35, 0x33)
		if err != nil {
			return
		}
		if z.EndRecurrenceDate == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.EndRecurrenceDate)
			if err != nil {
				err = msgp.WrapError(err, "EndRecurrenceDate")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x100000000000) == 0 { // if not empty
		// write "163"
		err = en.Append(0xa3, 0x31, 0x36, 0x33)
		if err != nil {
			return
		}
		if z.EndRecurrenceTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.EndRecurrenceTime)
			if err != nil {
				err = msgp.WrapError(err, "EndRecurrenceTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x200000000000) == 0 { // if not empty
		// write "3332064"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x32, 0x30, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ExceptionReplaceTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ExceptionReplaceTime)
			if err != nil {
				err = msgp.WrapError(err, "ExceptionReplaceTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x400000000000) == 0 { // if not empty
		// write "3332311"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.FExceptionalAttendees == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.FExceptionalAttendees)
			if err != nil {
				err = msgp.WrapError(err, "FExceptionalAttendees")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x800000000000) == 0 { // if not empty
		// write "3328611"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x38, 0x36, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.FExceptionalBody == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.FExceptionalBody)
			if err != nil {
				err = msgp.WrapError(err, "FExceptionalBody")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x1000000000000) == 0 { // if not empty
		// write "3332111"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x32, 0x31, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.FInvited == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.FInvited)
			if err != nil {
				err = msgp.WrapError(err, "FInvited")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2000000000000) == 0 { // if not empty
		// write "3329011"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x39, 0x30, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ForwardInstance == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ForwardInstance)
			if err != nil {
				err = msgp.WrapError(err, "ForwardInstance")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4000000000000) == 0 { // if not empty
		// write "3332711"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x32, 0x37, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.FOthersAppointment == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.FOthersAppointment)
			if err != nil {
				err = msgp.WrapError(err, "FOthersAppointment")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8000000000000) == 0 { // if not empty
		// write "40973"
		err = en.Append(0xa5, 0x34, 0x30, 0x39, 0x37, 0x33)
		if err != nil {
			return
		}
		if z.ICalendarDayOfWeekMask == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.ICalendarDayOfWeekMask)
			if err != nil {
				err = msgp.WrapError(err, "ICalendarDayOfWeekMask")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x10000000000000) == 0 { // if not empty
		// write "333163"
		err = en.Append(0xa6, 0x33, 0x33, 0x33, 0x31, 0x36, 0x33)
		if err != nil {
			return
		}
		if z.IntendedBusyStatus == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.IntendedBusyStatus)
			if err != nil {
				err = msgp.WrapError(err, "IntendedBusyStatus")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x20000000000000) == 0 { // if not empty
		// write "1011"
		err = en.Append(0xa4, 0x31, 0x30, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.IsException == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.IsException)
			if err != nil {
				err = msgp.WrapError(err, "IsException")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x40000000000000) == 0 { // if not empty
		// write "511"
		err = en.Append(0xa3, 0x35, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.IsRecurring == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.IsRecurring)
			if err != nil {
				err = msgp.WrapError(err, "IsRecurring")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x80000000000000) == 0 { // if not empty
		// write "411"
		err = en.Append(0xa3, 0x34, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.IsSilent == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.IsSilent)
			if err != nil {
				err = msgp.WrapError(err, "IsSilent")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x100000000000000) == 0 { // if not empty
		// write "3328831"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x38, 0x38, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.Location == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.Location)
			if err != nil {
				err = msgp.WrapError(err, "Location")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x200000000000000) == 0 { // if not empty
		// write "383"
		err = en.Append(0xa3, 0x33, 0x38, 0x33)
		if err != nil {
			return
		}
		if z.MeetingType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.MeetingType)
			if err != nil {
				err = msgp.WrapError(err, "MeetingType")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x400000000000000) == 0 { // if not empty
		// write "3328931"
		err = en.Append(0xa7, 0x33, 0x33, 0x32, 0x38, 0x39, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.MeetingWorkspaceUrl == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.MeetingWorkspaceUrl)
			if err != nil {
				err = msgp.WrapError(err, "MeetingWorkspaceUrl")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x800000000000000) == 0 { // if not empty
		// write "192"
		err = en.Append(0xa3, 0x31, 0x39, 0x32)
		if err != nil {
			return
		}
		if z.MonthInterval == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.MonthInterval)
			if err != nil {
				err = msgp.WrapError(err, "MonthInterval")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x1000000000000000) == 0 { // if not empty
		// write "41023"
		err = en.Append(0xa5, 0x34, 0x31, 0x30, 0x32, 0x33)
		if err != nil {
			return
		}
		if z.MonthOfYear == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.MonthOfYear)
			if err != nil {
				err = msgp.WrapError(err, "MonthOfYear")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2000000000000000) == 0 { // if not empty
		// write "233"
		err = en.Append(0xa3, 0x32, 0x33, 0x33)
		if err != nil {
			return
		}
		if z.MonthOfYearMask == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.MonthOfYearMask)
			if err != nil {
				err = msgp.WrapError(err, "MonthOfYearMask")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4000000000000000) == 0 { // if not empty
		// write "3335231"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x35, 0x32, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.NetShowUrl == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.NetShowUrl)
			if err != nil {
				err = msgp.WrapError(err, "NetShowUrl")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8000000000000000) == 0 { // if not empty
		// write "410711"
		err = en.Append(0xa6, 0x34, 0x31, 0x30, 0x37, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.NoEndDateFlag == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.NoEndDateFlag)
			if err != nil {
				err = msgp.WrapError(err, "NoEndDateFlag")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x1) == 0 { // if not empty
		// write "3410431"
		err = en.Append(0xa7, 0x33, 0x34, 0x31, 0x30, 0x34, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.NonSendableBcc == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.NonSendableBcc)
			if err != nil {
				err = msgp.WrapError(err, "NonSendableBcc")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x2) == 0 { // if not empty
		// write "3410331"
		err = en.Append(0xa7, 0x33, 0x34, 0x31, 0x30, 0x33, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.NonSendableCc == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.NonSendableCc)
			if err != nil {
				err = msgp.WrapError(err, "NonSendableCc")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x4) == 0 { // if not empty
		// write "3410231"
		err = en.Append(0xa7, 0x33, 0x34, 0x31, 0x30, 0x32, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.NonSendableTo == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.NonSendableTo)
			if err != nil {
				err = msgp.WrapError(err, "NonSendableTo")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x8) == 0 { // if not empty
		// write "41013"
		err = en.Append(0xa5, 0x34, 0x31, 0x30, 0x31, 0x33)
		if err != nil {
			return
		}
		if z.Occurrences == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.Occurrences)
			if err != nil {
				err = msgp.WrapError(err, "Occurrences")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x10) == 0 { // if not empty
		// write "4031"
		err = en.Append(0xa4, 0x34, 0x30, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.OldLocation == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.OldLocation)
			if err != nil {
				err = msgp.WrapError(err, "OldLocation")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x20) == 0 { // if not empty
		// write "242"
		err = en.Append(0xa3, 0x32, 0x34, 0x32)
		if err != nil {
			return
		}
		if z.OldRecurrenceType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.OldRecurrenceType)
			if err != nil {
				err = msgp.WrapError(err, "OldRecurrenceType")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x40) == 0 { // if not empty
		// write "4264"
		err = en.Append(0xa4, 0x34, 0x32, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.OldWhenEndWhole == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.OldWhenEndWhole)
			if err != nil {
				err = msgp.WrapError(err, "OldWhenEndWhole")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x80) == 0 { // if not empty
		// write "4164"
		err = en.Append(0xa4, 0x34, 0x31, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.OldWhenStartWhole == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.OldWhenStartWhole)
			if err != nil {
				err = msgp.WrapError(err, "OldWhenStartWhole")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x100) == 0 { // if not empty
		// write "3335331"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x35, 0x33, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.OnlinePassword == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.OnlinePassword)
			if err != nil {
				err = msgp.WrapError(err, "OnlinePassword")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x200) == 0 { // if not empty
		// write "731"
		err = en.Append(0xa3, 0x37, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.OptionalAttendees == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.OptionalAttendees)
			if err != nil {
				err = msgp.WrapError(err, "OptionalAttendees")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x400) == 0 { // if not empty
		// write "3334731"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x34, 0x37, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.OrganizerAlias == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.OrganizerAlias)
			if err != nil {
				err = msgp.WrapError(err, "OrganizerAlias")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x800) == 0 { // if not empty
		// write "2664"
		err = en.Append(0xa4, 0x32, 0x36, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.OwnerCriticalChange == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.OwnerCriticalChange)
			if err != nil {
				err = msgp.WrapError(err, "OwnerCriticalChange")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x1000) == 0 { // if not empty
		// write "3332631"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x32, 0x36, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.OwnerName == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.OwnerName)
			if err != nil {
				err = msgp.WrapError(err, "OwnerName")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x2000) == 0 { // if not empty
		// write "41093"
		err = en.Append(0xa5, 0x34, 0x31, 0x30, 0x39, 0x33)
		if err != nil {
			return
		}
		if z.RecurrenceDuration == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.RecurrenceDuration)
			if err != nil {
				err = msgp.WrapError(err, "RecurrenceDuration")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x4000) == 0 { // if not empty
		// write "3333031"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x33, 0x30, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.RecurrencePattern == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.RecurrencePattern)
			if err != nil {
				err = msgp.WrapError(err, "RecurrencePattern")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x8000) == 0 { // if not empty
		// write "333293"
		err = en.Append(0xa6, 0x33, 0x33, 0x33, 0x32, 0x39, 0x33)
		if err != nil {
			return
		}
		if z.RecurrenceType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.RecurrenceType)
			if err != nil {
				err = msgp.WrapError(err, "RecurrenceType")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x10000) == 0 { // if not empty
		// write "3331511"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x31, 0x35, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.Recurring == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.Recurring)
			if err != nil {
				err = msgp.WrapError(err, "Recurring")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x20000) == 0 { // if not empty
		// write "340493"
		err = en.Append(0xa6, 0x33, 0x34, 0x30, 0x34, 0x39, 0x33)
		if err != nil {
			return
		}
		if z.ReminderDelta == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.ReminderDelta)
			if err != nil {
				err = msgp.WrapError(err, "ReminderDelta")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x40000) == 0 { // if not empty
		// write "3407931"
		err = en.Append(0xa7, 0x33, 0x34, 0x30, 0x37, 0x39, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.ReminderFileParameter == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.ReminderFileParameter)
			if err != nil {
				err = msgp.WrapError(err, "ReminderFileParameter")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x80000) == 0 { // if not empty
		// write "3407611"
		err = en.Append(0xa7, 0x33, 0x34, 0x30, 0x37, 0x36, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ReminderOverride == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ReminderOverride)
			if err != nil {
				err = msgp.WrapError(err, "ReminderOverride")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x100000) == 0 { // if not empty
		// write "3407811"
		err = en.Append(0xa7, 0x33, 0x34, 0x30, 0x37, 0x38, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ReminderPlaySound == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ReminderPlaySound)
			if err != nil {
				err = msgp.WrapError(err, "ReminderPlaySound")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x200000) == 0 { // if not empty
		// write "3405111"
		err = en.Append(0xa7, 0x33, 0x34, 0x30, 0x35, 0x31, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ReminderSet == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ReminderSet)
			if err != nil {
				err = msgp.WrapError(err, "ReminderSet")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x400000) == 0 { // if not empty
		// write "3414464"
		err = en.Append(0xa7, 0x33, 0x34, 0x31, 0x34, 0x34, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ReminderSignalTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ReminderSignalTime)
			if err != nil {
				err = msgp.WrapError(err, "ReminderSignalTime")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x800000) == 0 { // if not empty
		// write "3405064"
		err = en.Append(0xa7, 0x33, 0x34, 0x30, 0x35, 0x30, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ReminderTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ReminderTime)
			if err != nil {
				err = msgp.WrapError(err, "ReminderTime")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x1000000) == 0 { // if not empty
		// write "3405364"
		err = en.Append(0xa7, 0x33, 0x34, 0x30, 0x35, 0x33, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ReminderTimeDate == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ReminderTimeDate)
			if err != nil {
				err = msgp.WrapError(err, "ReminderTimeDate")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x2000000) == 0 { // if not empty
		// write "3405264"
		err = en.Append(0xa7, 0x33, 0x34, 0x30, 0x35, 0x32, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ReminderTimeTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ReminderTimeTime)
			if err != nil {
				err = msgp.WrapError(err, "ReminderTimeTime")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x4000000) == 0 { // if not empty
		// write "340773"
		err = en.Append(0xa6, 0x33, 0x34, 0x30, 0x37, 0x37, 0x33)
		if err != nil {
			return
		}
		if z.ReminderType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.ReminderType)
			if err != nil {
				err = msgp.WrapError(err, "ReminderType")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x8000000) == 0 { // if not empty
		// write "631"
		err = en.Append(0xa3, 0x36, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.RequiredAttendees == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.RequiredAttendees)
			if err != nil {
				err = msgp.WrapError(err, "RequiredAttendees")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x10000000) == 0 { // if not empty
		// write "831"
		err = en.Append(0xa3, 0x38, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.ResourceAttendees == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.ResourceAttendees)
			if err != nil {
				err = msgp.WrapError(err, "ResourceAttendees")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x20000000) == 0 { // if not empty
		// write "333043"
		err = en.Append(0xa6, 0x33, 0x33, 0x33, 0x30, 0x34, 0x33)
		if err != nil {
			return
		}
		if z.ResponseStatus == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.ResponseStatus)
			if err != nil {
				err = msgp.WrapError(err, "ResponseStatus")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x40000000) == 0 { // if not empty
		// write "3425211"
		err = en.Append(0xa7, 0x33, 0x34, 0x32, 0x35, 0x32, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ServerProcessed == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ServerProcessed)
			if err != nil {
				err = msgp.WrapError(err, "ServerProcessed")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x80000000) == 0 { // if not empty
		// write "342533"
		err = en.Append(0xa6, 0x33, 0x34, 0x32, 0x35, 0x33, 0x33)
		if err != nil {
			return
		}
		if z.ServerProcessingActions == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.ServerProcessingActions)
			if err != nil {
				err = msgp.WrapError(err, "ServerProcessingActions")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x100000000) == 0 { // if not empty
		// write "3340311"
		err = en.Append(0xa7, 0x33, 0x33, 0x34, 0x30, 0x33, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.SingleBodyiCal == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.SingleBodyiCal)
			if err != nil {
				err = msgp.WrapError(err, "SingleBodyiCal")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x200000000) == 0 { // if not empty
		// write "133"
		err = en.Append(0xa3, 0x31, 0x33, 0x33)
		if err != nil {
			return
		}
		if z.StartRecurrenceDate == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.StartRecurrenceDate)
			if err != nil {
				err = msgp.WrapError(err, "StartRecurrenceDate")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x400000000) == 0 { // if not empty
		// write "143"
		err = en.Append(0xa3, 0x31, 0x34, 0x33)
		if err != nil {
			return
		}
		if z.StartRecurrenceTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.StartRecurrenceTime)
			if err != nil {
				err = msgp.WrapError(err, "StartRecurrenceTime")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x800000000) == 0 { // if not empty
		// write "123"
		err = en.Append(0xa3, 0x31, 0x32, 0x33)
		if err != nil {
			return
		}
		if z.TimeZone == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.TimeZone)
			if err != nil {
				err = msgp.WrapError(err, "TimeZone")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x1000000000) == 0 { // if not empty
		// write "3333231"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.TimeZoneDescription == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.TimeZoneDescription)
			if err != nil {
				err = msgp.WrapError(err, "TimeZoneDescription")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x2000000000) == 0 { // if not empty
		// write "3333931"
		err = en.Append(0xa7, 0x33, 0x33, 0x33, 0x33, 0x39, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.ToAttendeesString == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.ToAttendeesString)
			if err != nil {
				err = msgp.WrapError(err, "ToAttendeesString")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x4000000000) == 0 { // if not empty
		// write "182"
		err = en.Append(0xa3, 0x31, 0x38, 0x32)
		if err != nil {
			return
		}
		if z.WeekInterval == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.WeekInterval)
			if err != nil {
				err = msgp.WrapError(err, "WeekInterval")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x8000000000) == 0 { // if not empty
		// write "231"
		err = en.Append(0xa3, 0x32, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.Where == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.Where)
			if err != nil {
				err = msgp.WrapError(err, "Where")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x10000000000) == 0 { // if not empty
		// write "202"
		err = en.Append(0xa3, 0x32, 0x30, 0x32)
		if err != nil {
			return
		}
		if z.YearInterval == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.YearInterval)
			if err != nil {
				err = msgp.WrapError(err, "YearInterval")
				return
			}
		}
	}
	// write "LocationUrl"
	err = en.Append(0xab, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c)
	if err != nil {
		return
	}
	if z.LocationUrl == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.LocationUrl)
		if err != nil {
			err = msgp.WrapError(err, "LocationUrl")
			return
		}
	}
	// write "MeetingDoNotForward"
	err = en.Append(0xb3, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64)
	if err != nil {
		return
	}
	if z.MeetingDoNotForward == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBool(*z.MeetingDoNotForward)
		if err != nil {
			err = msgp.WrapError(err, "MeetingDoNotForward")
			return
		}
	}
	if (zb0001Mask[1] & 0x80000000000) == 0 { // if not empty
		// write "266963"
		err = en.Append(0xa6, 0x32, 0x36, 0x36, 0x39, 0x36, 0x33)
		if err != nil {
			return
		}
		if z.FreeBusyPublishEnd == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.FreeBusyPublishEnd)
			if err != nil {
				err = msgp.WrapError(err, "FreeBusyPublishEnd")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x100000000000) == 0 { // if not empty
		// write "266953"
		err = en.Append(0xa6, 0x32, 0x36, 0x36, 0x39, 0x35, 0x33)
		if err != nil {
			return
		}
		if z.FreeBusyPublishStart == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.FreeBusyPublishStart)
			if err != nil {
				err = msgp.WrapError(err, "FreeBusyPublishStart")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x200000000000) == 0 { // if not empty
		// write "2672864"
		err = en.Append(0xa7, 0x32, 0x36, 0x37, 0x32, 0x38, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.FreeBusyRangeTimestamp == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.FreeBusyRangeTimestamp)
			if err != nil {
				err = msgp.WrapError(err, "FreeBusyRangeTimestamp")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x400000000000) == 0 { // if not empty
		// write "429264"
		err = en.Append(0xa6, 0x34, 0x32, 0x39, 0x32, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ICalendarEndTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ICalendarEndTime)
			if err != nil {
				err = msgp.WrapError(err, "ICalendarEndTime")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x800000000000) == 0 { // if not empty
		// write "429864"
		err = en.Append(0xa6, 0x34, 0x32, 0x39, 0x38, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.ICalendarReminderNextTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.ICalendarReminderNextTime)
			if err != nil {
				err = msgp.WrapError(err, "ICalendarReminderNextTime")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x1000000000000) == 0 { // if not empty
		// write "3200111"
		err = en.Append(0xa7, 0x33, 0x32, 0x30, 0x30, 0x31, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.Processed == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.Processed)
			if err != nil {
				err = msgp.WrapError(err, "Processed")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x2000000000000) == 0 { // if not empty
		// write "2673311"
		err = en.Append(0xa7, 0x32, 0x36, 0x37, 0x33, 0x33, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ScheduleInfoAutoAcceptAppointments == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ScheduleInfoAutoAcceptAppointments)
			if err != nil {
				err = msgp.WrapError(err, "ScheduleInfoAutoAcceptAppointments")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x4000000000000) == 0 { // if not empty
		// write "2669011"
		err = en.Append(0xa7, 0x32, 0x36, 0x36, 0x39, 0x30, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ScheduleInfoDelegatorWantsCopy == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ScheduleInfoDelegatorWantsCopy)
			if err != nil {
				err = msgp.WrapError(err, "ScheduleInfoDelegatorWantsCopy")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x8000000000000) == 0 { // if not empty
		// write "2669911"
		err = en.Append(0xa7, 0x32, 0x36, 0x36, 0x39, 0x39, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ScheduleInfoDelegatorWantsInfo == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ScheduleInfoDelegatorWantsInfo)
			if err != nil {
				err = msgp.WrapError(err, "ScheduleInfoDelegatorWantsInfo")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x10000000000000) == 0 { // if not empty
		// write "2673511"
		err = en.Append(0xa7, 0x32, 0x36, 0x37, 0x33, 0x35, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ScheduleInfoDisallowOverlappingAppts == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ScheduleInfoDisallowOverlappingAppts)
			if err != nil {
				err = msgp.WrapError(err, "ScheduleInfoDisallowOverlappingAppts")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x20000000000000) == 0 { // if not empty
		// write "2673411"
		err = en.Append(0xa7, 0x32, 0x36, 0x37, 0x33, 0x34, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ScheduleInfoDisallowRecurringAppts == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ScheduleInfoDisallowRecurringAppts)
			if err != nil {
				err = msgp.WrapError(err, "ScheduleInfoDisallowRecurringAppts")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x40000000000000) == 0 { // if not empty
		// write "2669111"
		err = en.Append(0xa7, 0x32, 0x36, 0x36, 0x39, 0x31, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.ScheduleInfoDontMailDelegates == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.ScheduleInfoDontMailDelegates)
			if err != nil {
				err = msgp.WrapError(err, "ScheduleInfoDontMailDelegates")
				return
			}
		}
	}
	if (zb0001Mask[1] & 0x80000000000000) == 0 { // if not empty
		// write "266893"
		err = en.Append(0xa6, 0x32, 0x36, 0x36, 0x38, 0x39, 0x33)
		if err != nil {
			return
		}
		if z.ScheduleInfoResourceType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.ScheduleInfoResourceType)
			if err != nil {
				err = msgp.WrapError(err, "ScheduleInfoResourceType")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Appointment) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(120)
	var zb0001Mask [2]uint64 /* 120 bits */
	_ = zb0001Mask
	if z.AllAttendeesString == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1
	}
	if z.AllowExternalCheck == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2
	}
	if z.AppointmentAuxiliaryFlags == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4
	}
	if z.AppointmentColor == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8
	}
	if z.AppointmentCounterProposal == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10
	}
	if z.AppointmentDuration == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20
	}
	if z.AppointmentEndDate == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40
	}
	if z.AppointmentEndTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80
	}
	if z.AppointmentEndWhole == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100
	}
	if z.AppointmentLastSequence == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200
	}
	if z.AppointmentMessageClass == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400
	}
	if z.AppointmentNotAllowPropose == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800
	}
	if z.AppointmentProposalNumber == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000
	}
	if z.AppointmentProposedDuration == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000
	}
	if z.AppointmentProposedEndWhole == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000
	}
	if z.AppointmentProposedStartWhole == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000
	}
	if z.AppointmentReplyName == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000
	}
	if z.AppointmentReplyTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000
	}
	if z.AppointmentSequence == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000
	}
	if z.AppointmentSequenceTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000
	}
	if z.AppointmentStartDate == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000
	}
	if z.AppointmentStartTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000
	}
	if z.AppointmentStartWhole == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000
	}
	if z.AppointmentStateFlags == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000
	}
	if z.AppointmentSubType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000
	}
	if z.AppointmentUpdateTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000
	}
	if z.AttendeeCriticalChange == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000
	}
	if z.AutoFillLocation == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000
	}
	if z.AutoStartCheck == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000
	}
	if z.BusyStatus == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000
	}
	if z.CalendarType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000
	}
	if z.CcAttendeesString == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000000
	}
	if z.ChangeHighlight == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000000
	}
	if z.ClientIntent == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000000
	}
	if z.ClipEnd == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000000
	}
	if z.ClipStart == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000000
	}
	if z.CollaborateDoc == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000000
	}
	if z.ConferencingCheck == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000000
	}
	if z.ConferencingType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000000
	}
	if z.DayInterval == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000000
	}
	if z.DayOfMonth == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000000
	}
	if z.DelegateMail == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000000
	}
	if z.Directory == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000000
	}
	if z.EndRecurrenceDate == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000000000
	}
	if z.EndRecurrenceTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000000000
	}
	if z.ExceptionReplaceTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000000000
	}
	if z.FExceptionalAttendees == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000000000
	}
	if z.FExceptionalBody == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000000000
	}
	if z.FInvited == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000000000
	}
	if z.ForwardInstance == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000000000
	}
	if z.FOthersAppointment == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000000000
	}
	if z.ICalendarDayOfWeekMask == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000000000
	}
	if z.IntendedBusyStatus == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000000000
	}
	if z.IsException == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000000000
	}
	if z.IsRecurring == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000000000
	}
	if z.IsSilent == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000000000000
	}
	if z.Location == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000000000000
	}
	if z.MeetingType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000000000000
	}
	if z.MeetingWorkspaceUrl == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000000000000
	}
	if z.MonthInterval == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000000000000
	}
	if z.MonthOfYear == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000000000000
	}
	if z.MonthOfYearMask == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000000000000
	}
	if z.NetShowUrl == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000000000000
	}
	if z.NoEndDateFlag == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000000000000
	}
	if z.NonSendableBcc == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x1
	}
	if z.NonSendableCc == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x2
	}
	if z.NonSendableTo == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x4
	}
	if z.Occurrences == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x8
	}
	if z.OldLocation == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x10
	}
	if z.OldRecurrenceType == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x20
	}
	if z.OldWhenEndWhole == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x40
	}
	if z.OldWhenStartWhole == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x80
	}
	if z.OnlinePassword == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x100
	}
	if z.OptionalAttendees == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x200
	}
	if z.OrganizerAlias == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x400
	}
	if z.OwnerCriticalChange == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x800
	}
	if z.OwnerName == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x1000
	}
	if z.RecurrenceDuration == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x2000
	}
	if z.RecurrencePattern == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x4000
	}
	if z.RecurrenceType == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x8000
	}
	if z.Recurring == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x10000
	}
	if z.ReminderDelta == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x20000
	}
	if z.ReminderFileParameter == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x40000
	}
	if z.ReminderOverride == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x80000
	}
	if z.ReminderPlaySound == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x100000
	}
	if z.ReminderSet == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x200000
	}
	if z.ReminderSignalTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x400000
	}
	if z.ReminderTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x800000
	}
	if z.ReminderTimeDate == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x1000000
	}
	if z.ReminderTimeTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x2000000
	}
	if z.ReminderType == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x4000000
	}
	if z.RequiredAttendees == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x8000000
	}
	if z.ResourceAttendees == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x10000000
	}
	if z.ResponseStatus == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x20000000
	}
	if z.ServerProcessed == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x40000000
	}
	if z.ServerProcessingActions == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x80000000
	}
	if z.SingleBodyiCal == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x100000000
	}
	if z.StartRecurrenceDate == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x200000000
	}
	if z.StartRecurrenceTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x400000000
	}
	if z.TimeZone == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x800000000
	}
	if z.TimeZoneDescription == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x1000000000
	}
	if z.ToAttendeesString == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x2000000000
	}
	if z.WeekInterval == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x4000000000
	}
	if z.Where == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x8000000000
	}
	if z.YearInterval == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x10000000000
	}
	if z.FreeBusyPublishEnd == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x80000000000
	}
	if z.FreeBusyPublishStart == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x100000000000
	}
	if z.FreeBusyRangeTimestamp == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x200000000000
	}
	if z.ICalendarEndTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x400000000000
	}
	if z.ICalendarReminderNextTime == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x800000000000
	}
	if z.Processed == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x1000000000000
	}
	if z.ScheduleInfoAutoAcceptAppointments == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x2000000000000
	}
	if z.ScheduleInfoDelegatorWantsCopy == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x4000000000000
	}
	if z.ScheduleInfoDelegatorWantsInfo == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x8000000000000
	}
	if z.ScheduleInfoDisallowOverlappingAppts == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x10000000000000
	}
	if z.ScheduleInfoDisallowRecurringAppts == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x20000000000000
	}
	if z.ScheduleInfoDontMailDelegates == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x40000000000000
	}
	if z.ScheduleInfoResourceType == nil {
		zb0001Len--
		zb0001Mask[1] |= 0x80000000000000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask[0] & 0x1) == 0 { // if not empty
		// string "3333631"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x33, 0x36, 0x33, 0x31)
		if z.AllAttendeesString == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AllAttendeesString)
		}
	}
	if (zb0001Mask[0] & 0x2) == 0 { // if not empty
		// string "3335011"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x35, 0x30, 0x31, 0x31)
		if z.AllowExternalCheck == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.AllowExternalCheck)
		}
	}
	if (zb0001Mask[0] & 0x4) == 0 { // if not empty
		// string "332873"
		o = append(o, 0xa6, 0x33, 0x33, 0x32, 0x38, 0x37, 0x33)
		if z.AppointmentAuxiliaryFlags == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AppointmentAuxiliaryFlags)
		}
	}
	if (zb0001Mask[0] & 0x8) == 0 { // if not empty
		// string "333003"
		o = append(o, 0xa6, 0x33, 0x33, 0x33, 0x30, 0x30, 0x33)
		if z.AppointmentColor == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AppointmentColor)
		}
	}
	if (zb0001Mask[0] & 0x10) == 0 { // if not empty
		// string "3336711"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x36, 0x37, 0x31, 0x31)
		if z.AppointmentCounterProposal == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.AppointmentCounterProposal)
		}
	}
	if (zb0001Mask[0] & 0x20) == 0 { // if not empty
		// string "332993"
		o = append(o, 0xa6, 0x33, 0x33, 0x32, 0x39, 0x39, 0x33)
		if z.AppointmentDuration == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AppointmentDuration)
		}
	}
	if (zb0001Mask[0] & 0x40) == 0 { // if not empty
		// string "3329764"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x39, 0x37, 0x36, 0x34)
		if z.AppointmentEndDate == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentEndDate)
		}
	}
	if (zb0001Mask[0] & 0x80) == 0 { // if not empty
		// string "3329664"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x39, 0x36, 0x36, 0x34)
		if z.AppointmentEndTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentEndTime)
		}
	}
	if (zb0001Mask[0] & 0x100) == 0 { // if not empty
		// string "3329464"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x39, 0x34, 0x36, 0x34)
		if z.AppointmentEndWhole == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentEndWhole)
		}
	}
	if (zb0001Mask[0] & 0x200) == 0 { // if not empty
		// string "332833"
		o = append(o, 0xa6, 0x33, 0x33, 0x32, 0x38, 0x33, 0x33)
		if z.AppointmentLastSequence == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AppointmentLastSequence)
		}
	}
	if (zb0001Mask[0] & 0x400) == 0 { // if not empty
		// string "3631"
		o = append(o, 0xa4, 0x33, 0x36, 0x33, 0x31)
		if z.AppointmentMessageClass == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AppointmentMessageClass)
		}
	}
	if (zb0001Mask[0] & 0x800) == 0 { // if not empty
		// string "3337011"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x37, 0x30, 0x31, 0x31)
		if z.AppointmentNotAllowPropose == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.AppointmentNotAllowPropose)
		}
	}
	if (zb0001Mask[0] & 0x1000) == 0 { // if not empty
		// string "333693"
		o = append(o, 0xa6, 0x33, 0x33, 0x33, 0x36, 0x39, 0x33)
		if z.AppointmentProposalNumber == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AppointmentProposalNumber)
		}
	}
	if (zb0001Mask[0] & 0x2000) == 0 { // if not empty
		// string "333663"
		o = append(o, 0xa6, 0x33, 0x33, 0x33, 0x36, 0x36, 0x33)
		if z.AppointmentProposedDuration == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AppointmentProposedDuration)
		}
	}
	if (zb0001Mask[0] & 0x4000) == 0 { // if not empty
		// string "3336164"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x36, 0x31, 0x36, 0x34)
		if z.AppointmentProposedEndWhole == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentProposedEndWhole)
		}
	}
	if (zb0001Mask[0] & 0x8000) == 0 { // if not empty
		// string "3336064"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x36, 0x30, 0x36, 0x34)
		if z.AppointmentProposedStartWhole == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentProposedStartWhole)
		}
	}
	if (zb0001Mask[0] & 0x10000) == 0 { // if not empty
		// string "3332831"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x32, 0x38, 0x33, 0x31)
		if z.AppointmentReplyName == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AppointmentReplyName)
		}
	}
	if (zb0001Mask[0] & 0x20000) == 0 { // if not empty
		// string "3331264"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x31, 0x32, 0x36, 0x34)
		if z.AppointmentReplyTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentReplyTime)
		}
	}
	if (zb0001Mask[0] & 0x40000) == 0 { // if not empty
		// string "332813"
		o = append(o, 0xa6, 0x33, 0x33, 0x32, 0x38, 0x31, 0x33)
		if z.AppointmentSequence == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AppointmentSequence)
		}
	}
	if (zb0001Mask[0] & 0x80000) == 0 { // if not empty
		// string "3328264"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x38, 0x32, 0x36, 0x34)
		if z.AppointmentSequenceTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentSequenceTime)
		}
	}
	if (zb0001Mask[0] & 0x100000) == 0 { // if not empty
		// string "3329864"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x39, 0x38, 0x36, 0x34)
		if z.AppointmentStartDate == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentStartDate)
		}
	}
	if (zb0001Mask[0] & 0x200000) == 0 { // if not empty
		// string "3329564"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x39, 0x35, 0x36, 0x34)
		if z.AppointmentStartTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentStartTime)
		}
	}
	if (zb0001Mask[0] & 0x400000) == 0 { // if not empty
		// string "3329364"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x39, 0x33, 0x36, 0x34)
		if z.AppointmentStartWhole == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentStartWhole)
		}
	}
	if (zb0001Mask[0] & 0x800000) == 0 { // if not empty
		// string "333033"
		o = append(o, 0xa6, 0x33, 0x33, 0x33, 0x30, 0x33, 0x33)
		if z.AppointmentStateFlags == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AppointmentStateFlags)
		}
	}
	if (zb0001Mask[0] & 0x1000000) == 0 { // if not empty
		// string "3330111"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x30, 0x31, 0x31, 0x31)
		if z.AppointmentSubType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.AppointmentSubType)
		}
	}
	if (zb0001Mask[0] & 0x2000000) == 0 { // if not empty
		// string "3331864"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x31, 0x38, 0x36, 0x34)
		if z.AppointmentUpdateTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AppointmentUpdateTime)
		}
	}
	if (zb0001Mask[0] & 0x4000000) == 0 { // if not empty
		// string "164"
		o = append(o, 0xa3, 0x31, 0x36, 0x34)
		if z.AttendeeCriticalChange == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.AttendeeCriticalChange)
		}
	}
	if (zb0001Mask[0] & 0x8000000) == 0 { // if not empty
		// string "3333811"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x33, 0x38, 0x31, 0x31)
		if z.AutoFillLocation == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.AutoFillLocation)
		}
	}
	if (zb0001Mask[0] & 0x10000000) == 0 { // if not empty
		// string "3334811"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x34, 0x38, 0x31, 0x31)
		if z.AutoStartCheck == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.AutoStartCheck)
		}
	}
	if (zb0001Mask[0] & 0x20000000) == 0 { // if not empty
		// string "332853"
		o = append(o, 0xa6, 0x33, 0x33, 0x32, 0x38, 0x35, 0x33)
		if z.BusyStatus == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.BusyStatus)
		}
	}
	if (zb0001Mask[0] & 0x40000000) == 0 { // if not empty
		// string "283"
		o = append(o, 0xa3, 0x32, 0x38, 0x33)
		if z.CalendarType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.CalendarType)
		}
	}
	if (zb0001Mask[0] & 0x80000000) == 0 { // if not empty
		// string "3334031"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x34, 0x30, 0x33, 0x31)
		if z.CcAttendeesString == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.CcAttendeesString)
		}
	}
	if (zb0001Mask[0] & 0x100000000) == 0 { // if not empty
		// string "332843"
		o = append(o, 0xa6, 0x33, 0x33, 0x32, 0x38, 0x34, 0x33)
		if z.ChangeHighlight == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.ChangeHighlight)
		}
	}
	if (zb0001Mask[0] & 0x200000000) == 0 { // if not empty
		// string "213"
		o = append(o, 0xa3, 0x32, 0x31, 0x33)
		if z.ClientIntent == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.ClientIntent)
		}
	}
	if (zb0001Mask[0] & 0x400000000) == 0 { // if not empty
		// string "3333464"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x33, 0x34, 0x36, 0x34)
		if z.ClipEnd == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ClipEnd)
		}
	}
	if (zb0001Mask[0] & 0x800000000) == 0 { // if not empty
		// string "3333364"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x33, 0x33, 0x36, 0x34)
		if z.ClipStart == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ClipStart)
		}
	}
	if (zb0001Mask[0] & 0x1000000000) == 0 { // if not empty
		// string "3335131"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x35, 0x31, 0x33, 0x31)
		if z.CollaborateDoc == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.CollaborateDoc)
		}
	}
	if (zb0001Mask[0] & 0x2000000000) == 0 { // if not empty
		// string "3334411"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x34, 0x34, 0x31, 0x31)
		if z.ConferencingCheck == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ConferencingCheck)
		}
	}
	if (zb0001Mask[0] & 0x4000000000) == 0 { // if not empty
		// string "333453"
		o = append(o, 0xa6, 0x33, 0x33, 0x33, 0x34, 0x35, 0x33)
		if z.ConferencingType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.ConferencingType)
		}
	}
	if (zb0001Mask[0] & 0x8000000000) == 0 { // if not empty
		// string "172"
		o = append(o, 0xa3, 0x31, 0x37, 0x32)
		if z.DayInterval == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.DayInterval)
		}
	}
	if (zb0001Mask[0] & 0x10000000000) == 0 { // if not empty
		// string "40963"
		o = append(o, 0xa5, 0x34, 0x30, 0x39, 0x36, 0x33)
		if z.DayOfMonth == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.DayOfMonth)
		}
	}
	if (zb0001Mask[0] & 0x20000000000) == 0 { // if not empty
		// string "911"
		o = append(o, 0xa3, 0x39, 0x31, 0x31)
		if z.DelegateMail == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.DelegateMail)
		}
	}
	if (zb0001Mask[0] & 0x40000000000) == 0 { // if not empty
		// string "3334631"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x34, 0x36, 0x33, 0x31)
		if z.Directory == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.Directory)
		}
	}
	if (zb0001Mask[0] & 0x80000000000) == 0 { // if not empty
		// string "153"
		o = append(o, 0xa3, 0x31, 0x35, 0x33)
		if z.EndRecurrenceDate == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.EndRecurrenceDate)
		}
	}
	if (zb0001Mask[0] & 0x100000000000) == 0 { // if not empty
		// string "163"
		o = append(o, 0xa3, 0x31, 0x36, 0x33)
		if z.EndRecurrenceTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.EndRecurrenceTime)
		}
	}
	if (zb0001Mask[0] & 0x200000000000) == 0 { // if not empty
		// string "3332064"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x32, 0x30, 0x36, 0x34)
		if z.ExceptionReplaceTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ExceptionReplaceTime)
		}
	}
	if (zb0001Mask[0] & 0x400000000000) == 0 { // if not empty
		// string "3332311"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31)
		if z.FExceptionalAttendees == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.FExceptionalAttendees)
		}
	}
	if (zb0001Mask[0] & 0x800000000000) == 0 { // if not empty
		// string "3328611"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x38, 0x36, 0x31, 0x31)
		if z.FExceptionalBody == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.FExceptionalBody)
		}
	}
	if (zb0001Mask[0] & 0x1000000000000) == 0 { // if not empty
		// string "3332111"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x32, 0x31, 0x31, 0x31)
		if z.FInvited == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.FInvited)
		}
	}
	if (zb0001Mask[0] & 0x2000000000000) == 0 { // if not empty
		// string "3329011"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x39, 0x30, 0x31, 0x31)
		if z.ForwardInstance == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ForwardInstance)
		}
	}
	if (zb0001Mask[0] & 0x4000000000000) == 0 { // if not empty
		// string "3332711"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x32, 0x37, 0x31, 0x31)
		if z.FOthersAppointment == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.FOthersAppointment)
		}
	}
	if (zb0001Mask[0] & 0x8000000000000) == 0 { // if not empty
		// string "40973"
		o = append(o, 0xa5, 0x34, 0x30, 0x39, 0x37, 0x33)
		if z.ICalendarDayOfWeekMask == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.ICalendarDayOfWeekMask)
		}
	}
	if (zb0001Mask[0] & 0x10000000000000) == 0 { // if not empty
		// string "333163"
		o = append(o, 0xa6, 0x33, 0x33, 0x33, 0x31, 0x36, 0x33)
		if z.IntendedBusyStatus == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.IntendedBusyStatus)
		}
	}
	if (zb0001Mask[0] & 0x20000000000000) == 0 { // if not empty
		// string "1011"
		o = append(o, 0xa4, 0x31, 0x30, 0x31, 0x31)
		if z.IsException == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.IsException)
		}
	}
	if (zb0001Mask[0] & 0x40000000000000) == 0 { // if not empty
		// string "511"
		o = append(o, 0xa3, 0x35, 0x31, 0x31)
		if z.IsRecurring == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.IsRecurring)
		}
	}
	if (zb0001Mask[0] & 0x80000000000000) == 0 { // if not empty
		// string "411"
		o = append(o, 0xa3, 0x34, 0x31, 0x31)
		if z.IsSilent == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.IsSilent)
		}
	}
	if (zb0001Mask[0] & 0x100000000000000) == 0 { // if not empty
		// string "3328831"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x38, 0x38, 0x33, 0x31)
		if z.Location == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.Location)
		}
	}
	if (zb0001Mask[0] & 0x200000000000000) == 0 { // if not empty
		// string "383"
		o = append(o, 0xa3, 0x33, 0x38, 0x33)
		if z.MeetingType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.MeetingType)
		}
	}
	if (zb0001Mask[0] & 0x400000000000000) == 0 { // if not empty
		// string "3328931"
		o = append(o, 0xa7, 0x33, 0x33, 0x32, 0x38, 0x39, 0x33, 0x31)
		if z.MeetingWorkspaceUrl == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.MeetingWorkspaceUrl)
		}
	}
	if (zb0001Mask[0] & 0x800000000000000) == 0 { // if not empty
		// string "192"
		o = append(o, 0xa3, 0x31, 0x39, 0x32)
		if z.MonthInterval == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.MonthInterval)
		}
	}
	if (zb0001Mask[0] & 0x1000000000000000) == 0 { // if not empty
		// string "41023"
		o = append(o, 0xa5, 0x34, 0x31, 0x30, 0x32, 0x33)
		if z.MonthOfYear == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.MonthOfYear)
		}
	}
	if (zb0001Mask[0] & 0x2000000000000000) == 0 { // if not empty
		// string "233"
		o = append(o, 0xa3, 0x32, 0x33, 0x33)
		if z.MonthOfYearMask == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.MonthOfYearMask)
		}
	}
	if (zb0001Mask[0] & 0x4000000000000000) == 0 { // if not empty
		// string "3335231"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x35, 0x32, 0x33, 0x31)
		if z.NetShowUrl == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.NetShowUrl)
		}
	}
	if (zb0001Mask[0] & 0x8000000000000000) == 0 { // if not empty
		// string "410711"
		o = append(o, 0xa6, 0x34, 0x31, 0x30, 0x37, 0x31, 0x31)
		if z.NoEndDateFlag == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.NoEndDateFlag)
		}
	}
	if (zb0001Mask[1] & 0x1) == 0 { // if not empty
		// string "3410431"
		o = append(o, 0xa7, 0x33, 0x34, 0x31, 0x30, 0x34, 0x33, 0x31)
		if z.NonSendableBcc == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.NonSendableBcc)
		}
	}
	if (zb0001Mask[1] & 0x2) == 0 { // if not empty
		// string "3410331"
		o = append(o, 0xa7, 0x33, 0x34, 0x31, 0x30, 0x33, 0x33, 0x31)
		if z.NonSendableCc == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.NonSendableCc)
		}
	}
	if (zb0001Mask[1] & 0x4) == 0 { // if not empty
		// string "3410231"
		o = append(o, 0xa7, 0x33, 0x34, 0x31, 0x30, 0x32, 0x33, 0x31)
		if z.NonSendableTo == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.NonSendableTo)
		}
	}
	if (zb0001Mask[1] & 0x8) == 0 { // if not empty
		// string "41013"
		o = append(o, 0xa5, 0x34, 0x31, 0x30, 0x31, 0x33)
		if z.Occurrences == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.Occurrences)
		}
	}
	if (zb0001Mask[1] & 0x10) == 0 { // if not empty
		// string "4031"
		o = append(o, 0xa4, 0x34, 0x30, 0x33, 0x31)
		if z.OldLocation == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.OldLocation)
		}
	}
	if (zb0001Mask[1] & 0x20) == 0 { // if not empty
		// string "242"
		o = append(o, 0xa3, 0x32, 0x34, 0x32)
		if z.OldRecurrenceType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.OldRecurrenceType)
		}
	}
	if (zb0001Mask[1] & 0x40) == 0 { // if not empty
		// string "4264"
		o = append(o, 0xa4, 0x34, 0x32, 0x36, 0x34)
		if z.OldWhenEndWhole == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.OldWhenEndWhole)
		}
	}
	if (zb0001Mask[1] & 0x80) == 0 { // if not empty
		// string "4164"
		o = append(o, 0xa4, 0x34, 0x31, 0x36, 0x34)
		if z.OldWhenStartWhole == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.OldWhenStartWhole)
		}
	}
	if (zb0001Mask[1] & 0x100) == 0 { // if not empty
		// string "3335331"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x35, 0x33, 0x33, 0x31)
		if z.OnlinePassword == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.OnlinePassword)
		}
	}
	if (zb0001Mask[1] & 0x200) == 0 { // if not empty
		// string "731"
		o = append(o, 0xa3, 0x37, 0x33, 0x31)
		if z.OptionalAttendees == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.OptionalAttendees)
		}
	}
	if (zb0001Mask[1] & 0x400) == 0 { // if not empty
		// string "3334731"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x34, 0x37, 0x33, 0x31)
		if z.OrganizerAlias == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.OrganizerAlias)
		}
	}
	if (zb0001Mask[1] & 0x800) == 0 { // if not empty
		// string "2664"
		o = append(o, 0xa4, 0x32, 0x36, 0x36, 0x34)
		if z.OwnerCriticalChange == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.OwnerCriticalChange)
		}
	}
	if (zb0001Mask[1] & 0x1000) == 0 { // if not empty
		// string "3332631"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x32, 0x36, 0x33, 0x31)
		if z.OwnerName == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.OwnerName)
		}
	}
	if (zb0001Mask[1] & 0x2000) == 0 { // if not empty
		// string "41093"
		o = append(o, 0xa5, 0x34, 0x31, 0x30, 0x39, 0x33)
		if z.RecurrenceDuration == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.RecurrenceDuration)
		}
	}
	if (zb0001Mask[1] & 0x4000) == 0 { // if not empty
		// string "3333031"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x33, 0x30, 0x33, 0x31)
		if z.RecurrencePattern == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.RecurrencePattern)
		}
	}
	if (zb0001Mask[1] & 0x8000) == 0 { // if not empty
		// string "333293"
		o = append(o, 0xa6, 0x33, 0x33, 0x33, 0x32, 0x39, 0x33)
		if z.RecurrenceType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.RecurrenceType)
		}
	}
	if (zb0001Mask[1] & 0x10000) == 0 { // if not empty
		// string "3331511"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x31, 0x35, 0x31, 0x31)
		if z.Recurring == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.Recurring)
		}
	}
	if (zb0001Mask[1] & 0x20000) == 0 { // if not empty
		// string "340493"
		o = append(o, 0xa6, 0x33, 0x34, 0x30, 0x34, 0x39, 0x33)
		if z.ReminderDelta == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.ReminderDelta)
		}
	}
	if (zb0001Mask[1] & 0x40000) == 0 { // if not empty
		// string "3407931"
		o = append(o, 0xa7, 0x33, 0x34, 0x30, 0x37, 0x39, 0x33, 0x31)
		if z.ReminderFileParameter == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.ReminderFileParameter)
		}
	}
	if (zb0001Mask[1] & 0x80000) == 0 { // if not empty
		// string "3407611"
		o = append(o, 0xa7, 0x33, 0x34, 0x30, 0x37, 0x36, 0x31, 0x31)
		if z.ReminderOverride == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ReminderOverride)
		}
	}
	if (zb0001Mask[1] & 0x100000) == 0 { // if not empty
		// string "3407811"
		o = append(o, 0xa7, 0x33, 0x34, 0x30, 0x37, 0x38, 0x31, 0x31)
		if z.ReminderPlaySound == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ReminderPlaySound)
		}
	}
	if (zb0001Mask[1] & 0x200000) == 0 { // if not empty
		// string "3405111"
		o = append(o, 0xa7, 0x33, 0x34, 0x30, 0x35, 0x31, 0x31, 0x31)
		if z.ReminderSet == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ReminderSet)
		}
	}
	if (zb0001Mask[1] & 0x400000) == 0 { // if not empty
		// string "3414464"
		o = append(o, 0xa7, 0x33, 0x34, 0x31, 0x34, 0x34, 0x36, 0x34)
		if z.ReminderSignalTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ReminderSignalTime)
		}
	}
	if (zb0001Mask[1] & 0x800000) == 0 { // if not empty
		// string "3405064"
		o = append(o, 0xa7, 0x33, 0x34, 0x30, 0x35, 0x30, 0x36, 0x34)
		if z.ReminderTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ReminderTime)
		}
	}
	if (zb0001Mask[1] & 0x1000000) == 0 { // if not empty
		// string "3405364"
		o = append(o, 0xa7, 0x33, 0x34, 0x30, 0x35, 0x33, 0x36, 0x34)
		if z.ReminderTimeDate == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ReminderTimeDate)
		}
	}
	if (zb0001Mask[1] & 0x2000000) == 0 { // if not empty
		// string "3405264"
		o = append(o, 0xa7, 0x33, 0x34, 0x30, 0x35, 0x32, 0x36, 0x34)
		if z.ReminderTimeTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ReminderTimeTime)
		}
	}
	if (zb0001Mask[1] & 0x4000000) == 0 { // if not empty
		// string "340773"
		o = append(o, 0xa6, 0x33, 0x34, 0x30, 0x37, 0x37, 0x33)
		if z.ReminderType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.ReminderType)
		}
	}
	if (zb0001Mask[1] & 0x8000000) == 0 { // if not empty
		// string "631"
		o = append(o, 0xa3, 0x36, 0x33, 0x31)
		if z.RequiredAttendees == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.RequiredAttendees)
		}
	}
	if (zb0001Mask[1] & 0x10000000) == 0 { // if not empty
		// string "831"
		o = append(o, 0xa3, 0x38, 0x33, 0x31)
		if z.ResourceAttendees == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.ResourceAttendees)
		}
	}
	if (zb0001Mask[1] & 0x20000000) == 0 { // if not empty
		// string "333043"
		o = append(o, 0xa6, 0x33, 0x33, 0x33, 0x30, 0x34, 0x33)
		if z.ResponseStatus == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.ResponseStatus)
		}
	}
	if (zb0001Mask[1] & 0x40000000) == 0 { // if not empty
		// string "3425211"
		o = append(o, 0xa7, 0x33, 0x34, 0x32, 0x35, 0x32, 0x31, 0x31)
		if z.ServerProcessed == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ServerProcessed)
		}
	}
	if (zb0001Mask[1] & 0x80000000) == 0 { // if not empty
		// string "342533"
		o = append(o, 0xa6, 0x33, 0x34, 0x32, 0x35, 0x33, 0x33)
		if z.ServerProcessingActions == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.ServerProcessingActions)
		}
	}
	if (zb0001Mask[1] & 0x100000000) == 0 { // if not empty
		// string "3340311"
		o = append(o, 0xa7, 0x33, 0x33, 0x34, 0x30, 0x33, 0x31, 0x31)
		if z.SingleBodyiCal == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.SingleBodyiCal)
		}
	}
	if (zb0001Mask[1] & 0x200000000) == 0 { // if not empty
		// string "133"
		o = append(o, 0xa3, 0x31, 0x33, 0x33)
		if z.StartRecurrenceDate == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.StartRecurrenceDate)
		}
	}
	if (zb0001Mask[1] & 0x400000000) == 0 { // if not empty
		// string "143"
		o = append(o, 0xa3, 0x31, 0x34, 0x33)
		if z.StartRecurrenceTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.StartRecurrenceTime)
		}
	}
	if (zb0001Mask[1] & 0x800000000) == 0 { // if not empty
		// string "123"
		o = append(o, 0xa3, 0x31, 0x32, 0x33)
		if z.TimeZone == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.TimeZone)
		}
	}
	if (zb0001Mask[1] & 0x1000000000) == 0 { // if not empty
		// string "3333231"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31)
		if z.TimeZoneDescription == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.TimeZoneDescription)
		}
	}
	if (zb0001Mask[1] & 0x2000000000) == 0 { // if not empty
		// string "3333931"
		o = append(o, 0xa7, 0x33, 0x33, 0x33, 0x33, 0x39, 0x33, 0x31)
		if z.ToAttendeesString == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.ToAttendeesString)
		}
	}
	if (zb0001Mask[1] & 0x4000000000) == 0 { // if not empty
		// string "182"
		o = append(o, 0xa3, 0x31, 0x38, 0x32)
		if z.WeekInterval == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.WeekInterval)
		}
	}
	if (zb0001Mask[1] & 0x8000000000) == 0 { // if not empty
		// string "231"
		o = append(o, 0xa3, 0x32, 0x33, 0x31)
		if z.Where == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.Where)
		}
	}
	if (zb0001Mask[1] & 0x10000000000) == 0 { // if not empty
		// string "202"
		o = append(o, 0xa3, 0x32, 0x30, 0x32)
		if z.YearInterval == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.YearInterval)
		}
	}
	// string "LocationUrl"
	o = append(o, 0xab, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c)
	if z.LocationUrl == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.LocationUrl)
	}
	// string "MeetingDoNotForward"
	o = append(o, 0xb3, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64)
	if z.MeetingDoNotForward == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBool(o, *z.MeetingDoNotForward)
	}
	if (zb0001Mask[1] & 0x80000000000) == 0 { // if not empty
		// string "266963"
		o = append(o, 0xa6, 0x32, 0x36, 0x36, 0x39, 0x36, 0x33)
		if z.FreeBusyPublishEnd == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.FreeBusyPublishEnd)
		}
	}
	if (zb0001Mask[1] & 0x100000000000) == 0 { // if not empty
		// string "266953"
		o = append(o, 0xa6, 0x32, 0x36, 0x36, 0x39, 0x35, 0x33)
		if z.FreeBusyPublishStart == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.FreeBusyPublishStart)
		}
	}
	if (zb0001Mask[1] & 0x200000000000) == 0 { // if not empty
		// string "2672864"
		o = append(o, 0xa7, 0x32, 0x36, 0x37, 0x32, 0x38, 0x36, 0x34)
		if z.FreeBusyRangeTimestamp == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.FreeBusyRangeTimestamp)
		}
	}
	if (zb0001Mask[1] & 0x400000000000) == 0 { // if not empty
		// string "429264"
		o = append(o, 0xa6, 0x34, 0x32, 0x39, 0x32, 0x36, 0x34)
		if z.ICalendarEndTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ICalendarEndTime)
		}
	}
	if (zb0001Mask[1] & 0x800000000000) == 0 { // if not empty
		// string "429864"
		o = append(o, 0xa6, 0x34, 0x32, 0x39, 0x38, 0x36, 0x34)
		if z.ICalendarReminderNextTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.ICalendarReminderNextTime)
		}
	}
	if (zb0001Mask[1] & 0x1000000000000) == 0 { // if not empty
		// string "3200111"
		o = append(o, 0xa7, 0x33, 0x32, 0x30, 0x30, 0x31, 0x31, 0x31)
		if z.Processed == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.Processed)
		}
	}
	if (zb0001Mask[1] & 0x2000000000000) == 0 { // if not empty
		// string "2673311"
		o = append(o, 0xa7, 0x32, 0x36, 0x37, 0x33, 0x33, 0x31, 0x31)
		if z.ScheduleInfoAutoAcceptAppointments == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ScheduleInfoAutoAcceptAppointments)
		}
	}
	if (zb0001Mask[1] & 0x4000000000000) == 0 { // if not empty
		// string "2669011"
		o = append(o, 0xa7, 0x32, 0x36, 0x36, 0x39, 0x30, 0x31, 0x31)
		if z.ScheduleInfoDelegatorWantsCopy == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ScheduleInfoDelegatorWantsCopy)
		}
	}
	if (zb0001Mask[1] & 0x8000000000000) == 0 { // if not empty
		// string "2669911"
		o = append(o, 0xa7, 0x32, 0x36, 0x36, 0x39, 0x39, 0x31, 0x31)
		if z.ScheduleInfoDelegatorWantsInfo == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ScheduleInfoDelegatorWantsInfo)
		}
	}
	if (zb0001Mask[1] & 0x10000000000000) == 0 { // if not empty
		// string "2673511"
		o = append(o, 0xa7, 0x32, 0x36, 0x37, 0x33, 0x35, 0x31, 0x31)
		if z.ScheduleInfoDisallowOverlappingAppts == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ScheduleInfoDisallowOverlappingAppts)
		}
	}
	if (zb0001Mask[1] & 0x20000000000000) == 0 { // if not empty
		// string "2673411"
		o = append(o, 0xa7, 0x32, 0x36, 0x37, 0x33, 0x34, 0x31, 0x31)
		if z.ScheduleInfoDisallowRecurringAppts == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ScheduleInfoDisallowRecurringAppts)
		}
	}
	if (zb0001Mask[1] & 0x40000000000000) == 0 { // if not empty
		// string "2669111"
		o = append(o, 0xa7, 0x32, 0x36, 0x36, 0x39, 0x31, 0x31, 0x31)
		if z.ScheduleInfoDontMailDelegates == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.ScheduleInfoDontMailDelegates)
		}
	}
	if (zb0001Mask[1] & 0x80000000000000) == 0 { // if not empty
		// string "266893"
		o = append(o, 0xa6, 0x32, 0x36, 0x36, 0x38, 0x39, 0x33)
		if z.ScheduleInfoResourceType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.ScheduleInfoResourceType)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Appointment) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "3333631":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AllAttendeesString = nil
			} else {
				if z.AllAttendeesString == nil {
					z.AllAttendeesString = new(string)
				}
				*z.AllAttendeesString, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AllAttendeesString")
					return
				}
			}
		case "3335011":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AllowExternalCheck = nil
			} else {
				if z.AllowExternalCheck == nil {
					z.AllowExternalCheck = new(bool)
				}
				*z.AllowExternalCheck, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AllowExternalCheck")
					return
				}
			}
		case "332873":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentAuxiliaryFlags = nil
			} else {
				if z.AppointmentAuxiliaryFlags == nil {
					z.AppointmentAuxiliaryFlags = new(int32)
				}
				*z.AppointmentAuxiliaryFlags, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentAuxiliaryFlags")
					return
				}
			}
		case "333003":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentColor = nil
			} else {
				if z.AppointmentColor == nil {
					z.AppointmentColor = new(int32)
				}
				*z.AppointmentColor, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentColor")
					return
				}
			}
		case "3336711":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentCounterProposal = nil
			} else {
				if z.AppointmentCounterProposal == nil {
					z.AppointmentCounterProposal = new(bool)
				}
				*z.AppointmentCounterProposal, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentCounterProposal")
					return
				}
			}
		case "332993":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentDuration = nil
			} else {
				if z.AppointmentDuration == nil {
					z.AppointmentDuration = new(int32)
				}
				*z.AppointmentDuration, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentDuration")
					return
				}
			}
		case "3329764":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentEndDate = nil
			} else {
				if z.AppointmentEndDate == nil {
					z.AppointmentEndDate = new(int64)
				}
				*z.AppointmentEndDate, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentEndDate")
					return
				}
			}
		case "3329664":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentEndTime = nil
			} else {
				if z.AppointmentEndTime == nil {
					z.AppointmentEndTime = new(int64)
				}
				*z.AppointmentEndTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentEndTime")
					return
				}
			}
		case "3329464":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentEndWhole = nil
			} else {
				if z.AppointmentEndWhole == nil {
					z.AppointmentEndWhole = new(int64)
				}
				*z.AppointmentEndWhole, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentEndWhole")
					return
				}
			}
		case "332833":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentLastSequence = nil
			} else {
				if z.AppointmentLastSequence == nil {
					z.AppointmentLastSequence = new(int32)
				}
				*z.AppointmentLastSequence, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentLastSequence")
					return
				}
			}
		case "3631":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentMessageClass = nil
			} else {
				if z.AppointmentMessageClass == nil {
					z.AppointmentMessageClass = new(string)
				}
				*z.AppointmentMessageClass, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentMessageClass")
					return
				}
			}
		case "3337011":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentNotAllowPropose = nil
			} else {
				if z.AppointmentNotAllowPropose == nil {
					z.AppointmentNotAllowPropose = new(bool)
				}
				*z.AppointmentNotAllowPropose, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentNotAllowPropose")
					return
				}
			}
		case "333693":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentProposalNumber = nil
			} else {
				if z.AppointmentProposalNumber == nil {
					z.AppointmentProposalNumber = new(int32)
				}
				*z.AppointmentProposalNumber, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposalNumber")
					return
				}
			}
		case "333663":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentProposedDuration = nil
			} else {
				if z.AppointmentProposedDuration == nil {
					z.AppointmentProposedDuration = new(int32)
				}
				*z.AppointmentProposedDuration, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposedDuration")
					return
				}
			}
		case "3336164":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentProposedEndWhole = nil
			} else {
				if z.AppointmentProposedEndWhole == nil {
					z.AppointmentProposedEndWhole = new(int64)
				}
				*z.AppointmentProposedEndWhole, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposedEndWhole")
					return
				}
			}
		case "3336064":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentProposedStartWhole = nil
			} else {
				if z.AppointmentProposedStartWhole == nil {
					z.AppointmentProposedStartWhole = new(int64)
				}
				*z.AppointmentProposedStartWhole, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentProposedStartWhole")
					return
				}
			}
		case "3332831":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentReplyName = nil
			} else {
				if z.AppointmentReplyName == nil {
					z.AppointmentReplyName = new(string)
				}
				*z.AppointmentReplyName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentReplyName")
					return
				}
			}
		case "3331264":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentReplyTime = nil
			} else {
				if z.AppointmentReplyTime == nil {
					z.AppointmentReplyTime = new(int64)
				}
				*z.AppointmentReplyTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentReplyTime")
					return
				}
			}
		case "332813":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentSequence = nil
			} else {
				if z.AppointmentSequence == nil {
					z.AppointmentSequence = new(int32)
				}
				*z.AppointmentSequence, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentSequence")
					return
				}
			}
		case "3328264":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentSequenceTime = nil
			} else {
				if z.AppointmentSequenceTime == nil {
					z.AppointmentSequenceTime = new(int64)
				}
				*z.AppointmentSequenceTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentSequenceTime")
					return
				}
			}
		case "3329864":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentStartDate = nil
			} else {
				if z.AppointmentStartDate == nil {
					z.AppointmentStartDate = new(int64)
				}
				*z.AppointmentStartDate, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStartDate")
					return
				}
			}
		case "3329564":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentStartTime = nil
			} else {
				if z.AppointmentStartTime == nil {
					z.AppointmentStartTime = new(int64)
				}
				*z.AppointmentStartTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStartTime")
					return
				}
			}
		case "3329364":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentStartWhole = nil
			} else {
				if z.AppointmentStartWhole == nil {
					z.AppointmentStartWhole = new(int64)
				}
				*z.AppointmentStartWhole, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStartWhole")
					return
				}
			}
		case "333033":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentStateFlags = nil
			} else {
				if z.AppointmentStateFlags == nil {
					z.AppointmentStateFlags = new(int32)
				}
				*z.AppointmentStateFlags, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentStateFlags")
					return
				}
			}
		case "3330111":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentSubType = nil
			} else {
				if z.AppointmentSubType == nil {
					z.AppointmentSubType = new(bool)
				}
				*z.AppointmentSubType, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentSubType")
					return
				}
			}
		case "3331864":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AppointmentUpdateTime = nil
			} else {
				if z.AppointmentUpdateTime == nil {
					z.AppointmentUpdateTime = new(int64)
				}
				*z.AppointmentUpdateTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AppointmentUpdateTime")
					return
				}
			}
		case "164":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttendeeCriticalChange = nil
			} else {
				if z.AttendeeCriticalChange == nil {
					z.AttendeeCriticalChange = new(int64)
				}
				*z.AttendeeCriticalChange, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttendeeCriticalChange")
					return
				}
			}
		case "3333811":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AutoFillLocation = nil
			} else {
				if z.AutoFillLocation == nil {
					z.AutoFillLocation = new(bool)
				}
				*z.AutoFillLocation, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AutoFillLocation")
					return
				}
			}
		case "3334811":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AutoStartCheck = nil
			} else {
				if z.AutoStartCheck == nil {
					z.AutoStartCheck = new(bool)
				}
				*z.AutoStartCheck, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AutoStartCheck")
					return
				}
			}
		case "332853":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.BusyStatus = nil
			} else {
				if z.BusyStatus == nil {
					z.BusyStatus = new(int32)
				}
				*z.BusyStatus, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "BusyStatus")
					return
				}
			}
		case "283":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.CalendarType = nil
			} else {
				if z.CalendarType == nil {
					z.CalendarType = new(int32)
				}
				*z.CalendarType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CalendarType")
					return
				}
			}
		case "3334031":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.CcAttendeesString = nil
			} else {
				if z.CcAttendeesString == nil {
					z.CcAttendeesString = new(string)
				}
				*z.CcAttendeesString, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CcAttendeesString")
					return
				}
			}
		case "332843":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ChangeHighlight = nil
			} else {
				if z.ChangeHighlight == nil {
					z.ChangeHighlight = new(int32)
				}
				*z.ChangeHighlight, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ChangeHighlight")
					return
				}
			}
		case "213":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ClientIntent = nil
			} else {
				if z.ClientIntent == nil {
					z.ClientIntent = new(int32)
				}
				*z.ClientIntent, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClientIntent")
					return
				}
			}
		case "3333464":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ClipEnd = nil
			} else {
				if z.ClipEnd == nil {
					z.ClipEnd = new(int64)
				}
				*z.ClipEnd, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClipEnd")
					return
				}
			}
		case "3333364":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ClipStart = nil
			} else {
				if z.ClipStart == nil {
					z.ClipStart = new(int64)
				}
				*z.ClipStart, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClipStart")
					return
				}
			}
		case "3335131":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.CollaborateDoc = nil
			} else {
				if z.CollaborateDoc == nil {
					z.CollaborateDoc = new(string)
				}
				*z.CollaborateDoc, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CollaborateDoc")
					return
				}
			}
		case "3334411":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ConferencingCheck = nil
			} else {
				if z.ConferencingCheck == nil {
					z.ConferencingCheck = new(bool)
				}
				*z.ConferencingCheck, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConferencingCheck")
					return
				}
			}
		case "333453":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ConferencingType = nil
			} else {
				if z.ConferencingType == nil {
					z.ConferencingType = new(int32)
				}
				*z.ConferencingType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConferencingType")
					return
				}
			}
		case "172":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DayInterval = nil
			} else {
				if z.DayInterval == nil {
					z.DayInterval = new(int32)
				}
				*z.DayInterval, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DayInterval")
					return
				}
			}
		case "40963":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DayOfMonth = nil
			} else {
				if z.DayOfMonth == nil {
					z.DayOfMonth = new(int32)
				}
				*z.DayOfMonth, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DayOfMonth")
					return
				}
			}
		case "911":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DelegateMail = nil
			} else {
				if z.DelegateMail == nil {
					z.DelegateMail = new(bool)
				}
				*z.DelegateMail, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DelegateMail")
					return
				}
			}
		case "3334631":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Directory = nil
			} else {
				if z.Directory == nil {
					z.Directory = new(string)
				}
				*z.Directory, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Directory")
					return
				}
			}
		case "153":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.EndRecurrenceDate = nil
			} else {
				if z.EndRecurrenceDate == nil {
					z.EndRecurrenceDate = new(int32)
				}
				*z.EndRecurrenceDate, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "EndRecurrenceDate")
					return
				}
			}
		case "163":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.EndRecurrenceTime = nil
			} else {
				if z.EndRecurrenceTime == nil {
					z.EndRecurrenceTime = new(int32)
				}
				*z.EndRecurrenceTime, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "EndRecurrenceTime")
					return
				}
			}
		case "3332064":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ExceptionReplaceTime = nil
			} else {
				if z.ExceptionReplaceTime == nil {
					z.ExceptionReplaceTime = new(int64)
				}
				*z.ExceptionReplaceTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExceptionReplaceTime")
					return
				}
			}
		case "3332311":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FExceptionalAttendees = nil
			} else {
				if z.FExceptionalAttendees == nil {
					z.FExceptionalAttendees = new(bool)
				}
				*z.FExceptionalAttendees, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FExceptionalAttendees")
					return
				}
			}
		case "3328611":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FExceptionalBody = nil
			} else {
				if z.FExceptionalBody == nil {
					z.FExceptionalBody = new(bool)
				}
				*z.FExceptionalBody, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FExceptionalBody")
					return
				}
			}
		case "3332111":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FInvited = nil
			} else {
				if z.FInvited == nil {
					z.FInvited = new(bool)
				}
				*z.FInvited, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FInvited")
					return
				}
			}
		case "3329011":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ForwardInstance = nil
			} else {
				if z.ForwardInstance == nil {
					z.ForwardInstance = new(bool)
				}
				*z.ForwardInstance, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ForwardInstance")
					return
				}
			}
		case "3332711":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FOthersAppointment = nil
			} else {
				if z.FOthersAppointment == nil {
					z.FOthersAppointment = new(bool)
				}
				*z.FOthersAppointment, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FOthersAppointment")
					return
				}
			}
		case "40973":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ICalendarDayOfWeekMask = nil
			} else {
				if z.ICalendarDayOfWeekMask == nil {
					z.ICalendarDayOfWeekMask = new(int32)
				}
				*z.ICalendarDayOfWeekMask, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ICalendarDayOfWeekMask")
					return
				}
			}
		case "333163":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.IntendedBusyStatus = nil
			} else {
				if z.IntendedBusyStatus == nil {
					z.IntendedBusyStatus = new(int32)
				}
				*z.IntendedBusyStatus, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "IntendedBusyStatus")
					return
				}
			}
		case "1011":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.IsException = nil
			} else {
				if z.IsException == nil {
					z.IsException = new(bool)
				}
				*z.IsException, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "IsException")
					return
				}
			}
		case "511":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.IsRecurring = nil
			} else {
				if z.IsRecurring == nil {
					z.IsRecurring = new(bool)
				}
				*z.IsRecurring, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "IsRecurring")
					return
				}
			}
		case "411":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.IsSilent = nil
			} else {
				if z.IsSilent == nil {
					z.IsSilent = new(bool)
				}
				*z.IsSilent, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "IsSilent")
					return
				}
			}
		case "3328831":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Location = nil
			} else {
				if z.Location == nil {
					z.Location = new(string)
				}
				*z.Location, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Location")
					return
				}
			}
		case "383":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MeetingType = nil
			} else {
				if z.MeetingType == nil {
					z.MeetingType = new(int32)
				}
				*z.MeetingType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MeetingType")
					return
				}
			}
		case "3328931":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MeetingWorkspaceUrl = nil
			} else {
				if z.MeetingWorkspaceUrl == nil {
					z.MeetingWorkspaceUrl = new(string)
				}
				*z.MeetingWorkspaceUrl, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MeetingWorkspaceUrl")
					return
				}
			}
		case "192":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MonthInterval = nil
			} else {
				if z.MonthInterval == nil {
					z.MonthInterval = new(int32)
				}
				*z.MonthInterval, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MonthInterval")
					return
				}
			}
		case "41023":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MonthOfYear = nil
			} else {
				if z.MonthOfYear == nil {
					z.MonthOfYear = new(int32)
				}
				*z.MonthOfYear, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MonthOfYear")
					return
				}
			}
		case "233":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MonthOfYearMask = nil
			} else {
				if z.MonthOfYearMask == nil {
					z.MonthOfYearMask = new(int32)
				}
				*z.MonthOfYearMask, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MonthOfYearMask")
					return
				}
			}
		case "3335231":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NetShowUrl = nil
			} else {
				if z.NetShowUrl == nil {
					z.NetShowUrl = new(string)
				}
				*z.NetShowUrl, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NetShowUrl")
					return
				}
			}
		case "410711":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NoEndDateFlag = nil
			} else {
				if z.NoEndDateFlag == nil {
					z.NoEndDateFlag = new(bool)
				}
				*z.NoEndDateFlag, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NoEndDateFlag")
					return
				}
			}
		case "3410431":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NonSendableBcc = nil
			} else {
				if z.NonSendableBcc == nil {
					z.NonSendableBcc = new(string)
				}
				*z.NonSendableBcc, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NonSendableBcc")
					return
				}
			}
		case "3410331":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NonSendableCc = nil
			} else {
				if z.NonSendableCc == nil {
					z.NonSendableCc = new(string)
				}
				*z.NonSendableCc, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NonSendableCc")
					return
				}
			}
		case "3410231":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NonSendableTo = nil
			} else {
				if z.NonSendableTo == nil {
					z.NonSendableTo = new(string)
				}
				*z.NonSendableTo, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NonSendableTo")
					return
				}
			}
		case "41013":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Occurrences = nil
			} else {
				if z.Occurrences == nil {
					z.Occurrences = new(int32)
				}
				*z.Occurrences, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Occurrences")
					return
				}
			}
		case "4031":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OldLocation = nil
			} else {
				if z.OldLocation == nil {
					z.OldLocation = new(string)
				}
				*z.OldLocation, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OldLocation")
					return
				}
			}
		case "242":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OldRecurrenceType = nil
			} else {
				if z.OldRecurrenceType == nil {
					z.OldRecurrenceType = new(int32)
				}
				*z.OldRecurrenceType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OldRecurrenceType")
					return
				}
			}
		case "4264":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OldWhenEndWhole = nil
			} else {
				if z.OldWhenEndWhole == nil {
					z.OldWhenEndWhole = new(int64)
				}
				*z.OldWhenEndWhole, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OldWhenEndWhole")
					return
				}
			}
		case "4164":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OldWhenStartWhole = nil
			} else {
				if z.OldWhenStartWhole == nil {
					z.OldWhenStartWhole = new(int64)
				}
				*z.OldWhenStartWhole, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OldWhenStartWhole")
					return
				}
			}
		case "3335331":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OnlinePassword = nil
			} else {
				if z.OnlinePassword == nil {
					z.OnlinePassword = new(string)
				}
				*z.OnlinePassword, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OnlinePassword")
					return
				}
			}
		case "731":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OptionalAttendees = nil
			} else {
				if z.OptionalAttendees == nil {
					z.OptionalAttendees = new(string)
				}
				*z.OptionalAttendees, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OptionalAttendees")
					return
				}
			}
		case "3334731":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OrganizerAlias = nil
			} else {
				if z.OrganizerAlias == nil {
					z.OrganizerAlias = new(string)
				}
				*z.OrganizerAlias, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OrganizerAlias")
					return
				}
			}
		case "2664":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OwnerCriticalChange = nil
			} else {
				if z.OwnerCriticalChange == nil {
					z.OwnerCriticalChange = new(int64)
				}
				*z.OwnerCriticalChange, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OwnerCriticalChange")
					return
				}
			}
		case "3332631":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OwnerName = nil
			} else {
				if z.OwnerName == nil {
					z.OwnerName = new(string)
				}
				*z.OwnerName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OwnerName")
					return
				}
			}
		case "41093":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RecurrenceDuration = nil
			} else {
				if z.RecurrenceDuration == nil {
					z.RecurrenceDuration = new(int32)
				}
				*z.RecurrenceDuration, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RecurrenceDuration")
					return
				}
			}
		case "3333031":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RecurrencePattern = nil
			} else {
				if z.RecurrencePattern == nil {
					z.RecurrencePattern = new(string)
				}
				*z.RecurrencePattern, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RecurrencePattern")
					return
				}
			}
		case "333293":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RecurrenceType = nil
			} else {
				if z.RecurrenceType == nil {
					z.RecurrenceType = new(int32)
				}
				*z.RecurrenceType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RecurrenceType")
					return
				}
			}
		case "3331511":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Recurring = nil
			} else {
				if z.Recurring == nil {
					z.Recurring = new(bool)
				}
				*z.Recurring, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Recurring")
					return
				}
			}
		case "340493":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReminderDelta = nil
			} else {
				if z.ReminderDelta == nil {
					z.ReminderDelta = new(int32)
				}
				*z.ReminderDelta, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReminderDelta")
					return
				}
			}
		case "3407931":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReminderFileParameter = nil
			} else {
				if z.ReminderFileParameter == nil {
					z.ReminderFileParameter = new(string)
				}
				*z.ReminderFileParameter, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReminderFileParameter")
					return
				}
			}
		case "3407611":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReminderOverride = nil
			} else {
				if z.ReminderOverride == nil {
					z.ReminderOverride = new(bool)
				}
				*z.ReminderOverride, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReminderOverride")
					return
				}
			}
		case "3407811":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReminderPlaySound = nil
			} else {
				if z.ReminderPlaySound == nil {
					z.ReminderPlaySound = new(bool)
				}
				*z.ReminderPlaySound, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReminderPlaySound")
					return
				}
			}
		case "3405111":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReminderSet = nil
			} else {
				if z.ReminderSet == nil {
					z.ReminderSet = new(bool)
				}
				*z.ReminderSet, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReminderSet")
					return
				}
			}
		case "3414464":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReminderSignalTime = nil
			} else {
				if z.ReminderSignalTime == nil {
					z.ReminderSignalTime = new(int64)
				}
				*z.ReminderSignalTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReminderSignalTime")
					return
				}
			}
		case "3405064":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReminderTime = nil
			} else {
				if z.ReminderTime == nil {
					z.ReminderTime = new(int64)
				}
				*z.ReminderTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReminderTime")
					return
				}
			}
		case "3405364":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReminderTimeDate = nil
			} else {
				if z.ReminderTimeDate == nil {
					z.ReminderTimeDate = new(int64)
				}
				*z.ReminderTimeDate, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReminderTimeDate")
					return
				}
			}
		case "3405264":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReminderTimeTime = nil
			} else {
				if z.ReminderTimeTime == nil {
					z.ReminderTimeTime = new(int64)
				}
				*z.ReminderTimeTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReminderTimeTime")
					return
				}
			}
		case "340773":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReminderType = nil
			} else {
				if z.ReminderType == nil {
					z.ReminderType = new(int32)
				}
				*z.ReminderType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReminderType")
					return
				}
			}
		case "631":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RequiredAttendees = nil
			} else {
				if z.RequiredAttendees == nil {
					z.RequiredAttendees = new(string)
				}
				*z.RequiredAttendees, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RequiredAttendees")
					return
				}
			}
		case "831":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ResourceAttendees = nil
			} else {
				if z.ResourceAttendees == nil {
					z.ResourceAttendees = new(string)
				}
				*z.ResourceAttendees, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ResourceAttendees")
					return
				}
			}
		case "333043":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ResponseStatus = nil
			} else {
				if z.ResponseStatus == nil {
					z.ResponseStatus = new(int32)
				}
				*z.ResponseStatus, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ResponseStatus")
					return
				}
			}
		case "3425211":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ServerProcessed = nil
			} else {
				if z.ServerProcessed == nil {
					z.ServerProcessed = new(bool)
				}
				*z.ServerProcessed, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ServerProcessed")
					return
				}
			}
		case "342533":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ServerProcessingActions = nil
			} else {
				if z.ServerProcessingActions == nil {
					z.ServerProcessingActions = new(int32)
				}
				*z.ServerProcessingActions, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ServerProcessingActions")
					return
				}
			}
		case "3340311":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SingleBodyiCal = nil
			} else {
				if z.SingleBodyiCal == nil {
					z.SingleBodyiCal = new(bool)
				}
				*z.SingleBodyiCal, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SingleBodyiCal")
					return
				}
			}
		case "133":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.StartRecurrenceDate = nil
			} else {
				if z.StartRecurrenceDate == nil {
					z.StartRecurrenceDate = new(int32)
				}
				*z.StartRecurrenceDate, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "StartRecurrenceDate")
					return
				}
			}
		case "143":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.StartRecurrenceTime = nil
			} else {
				if z.StartRecurrenceTime == nil {
					z.StartRecurrenceTime = new(int32)
				}
				*z.StartRecurrenceTime, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "StartRecurrenceTime")
					return
				}
			}
		case "123":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TimeZone = nil
			} else {
				if z.TimeZone == nil {
					z.TimeZone = new(int32)
				}
				*z.TimeZone, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TimeZone")
					return
				}
			}
		case "3333231":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TimeZoneDescription = nil
			} else {
				if z.TimeZoneDescription == nil {
					z.TimeZoneDescription = new(string)
				}
				*z.TimeZoneDescription, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TimeZoneDescription")
					return
				}
			}
		case "3333931":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ToAttendeesString = nil
			} else {
				if z.ToAttendeesString == nil {
					z.ToAttendeesString = new(string)
				}
				*z.ToAttendeesString, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ToAttendeesString")
					return
				}
			}
		case "182":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.WeekInterval = nil
			} else {
				if z.WeekInterval == nil {
					z.WeekInterval = new(int32)
				}
				*z.WeekInterval, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "WeekInterval")
					return
				}
			}
		case "231":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Where = nil
			} else {
				if z.Where == nil {
					z.Where = new(string)
				}
				*z.Where, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Where")
					return
				}
			}
		case "202":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.YearInterval = nil
			} else {
				if z.YearInterval == nil {
					z.YearInterval = new(int32)
				}
				*z.YearInterval, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "YearInterval")
					return
				}
			}
		case "LocationUrl":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.LocationUrl = nil
			} else {
				if z.LocationUrl == nil {
					z.LocationUrl = new(string)
				}
				*z.LocationUrl, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocationUrl")
					return
				}
			}
		case "MeetingDoNotForward":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MeetingDoNotForward = nil
			} else {
				if z.MeetingDoNotForward == nil {
					z.MeetingDoNotForward = new(bool)
				}
				*z.MeetingDoNotForward, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MeetingDoNotForward")
					return
				}
			}
		case "266963":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FreeBusyPublishEnd = nil
			} else {
				if z.FreeBusyPublishEnd == nil {
					z.FreeBusyPublishEnd = new(int32)
				}
				*z.FreeBusyPublishEnd, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreeBusyPublishEnd")
					return
				}
			}
		case "266953":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FreeBusyPublishStart = nil
			} else {
				if z.FreeBusyPublishStart == nil {
					z.FreeBusyPublishStart = new(int32)
				}
				*z.FreeBusyPublishStart, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreeBusyPublishStart")
					return
				}
			}
		case "2672864":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FreeBusyRangeTimestamp = nil
			} else {
				if z.FreeBusyRangeTimestamp == nil {
					z.FreeBusyRangeTimestamp = new(int64)
				}
				*z.FreeBusyRangeTimestamp, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FreeBusyRangeTimestamp")
					return
				}
			}
		case "429264":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ICalendarEndTime = nil
			} else {
				if z.ICalendarEndTime == nil {
					z.ICalendarEndTime = new(int64)
				}
				*z.ICalendarEndTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ICalendarEndTime")
					return
				}
			}
		case "429864":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ICalendarReminderNextTime = nil
			} else {
				if z.ICalendarReminderNextTime == nil {
					z.ICalendarReminderNextTime = new(int64)
				}
				*z.ICalendarReminderNextTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ICalendarReminderNextTime")
					return
				}
			}
		case "3200111":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Processed = nil
			} else {
				if z.Processed == nil {
					z.Processed = new(bool)
				}
				*z.Processed, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Processed")
					return
				}
			}
		case "2673311":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ScheduleInfoAutoAcceptAppointments = nil
			} else {
				if z.ScheduleInfoAutoAcceptAppointments == nil {
					z.ScheduleInfoAutoAcceptAppointments = new(bool)
				}
				*z.ScheduleInfoAutoAcceptAppointments, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoAutoAcceptAppointments")
					return
				}
			}
		case "2669011":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ScheduleInfoDelegatorWantsCopy = nil
			} else {
				if z.ScheduleInfoDelegatorWantsCopy == nil {
					z.ScheduleInfoDelegatorWantsCopy = new(bool)
				}
				*z.ScheduleInfoDelegatorWantsCopy, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDelegatorWantsCopy")
					return
				}
			}
		case "2669911":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ScheduleInfoDelegatorWantsInfo = nil
			} else {
				if z.ScheduleInfoDelegatorWantsInfo == nil {
					z.ScheduleInfoDelegatorWantsInfo = new(bool)
				}
				*z.ScheduleInfoDelegatorWantsInfo, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDelegatorWantsInfo")
					return
				}
			}
		case "2673511":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ScheduleInfoDisallowOverlappingAppts = nil
			} else {
				if z.ScheduleInfoDisallowOverlappingAppts == nil {
					z.ScheduleInfoDisallowOverlappingAppts = new(bool)
				}
				*z.ScheduleInfoDisallowOverlappingAppts, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDisallowOverlappingAppts")
					return
				}
			}
		case "2673411":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ScheduleInfoDisallowRecurringAppts = nil
			} else {
				if z.ScheduleInfoDisallowRecurringAppts == nil {
					z.ScheduleInfoDisallowRecurringAppts = new(bool)
				}
				*z.ScheduleInfoDisallowRecurringAppts, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDisallowRecurringAppts")
					return
				}
			}
		case "2669111":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ScheduleInfoDontMailDelegates = nil
			} else {
				if z.ScheduleInfoDontMailDelegates == nil {
					z.ScheduleInfoDontMailDelegates = new(bool)
				}
				*z.ScheduleInfoDontMailDelegates, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoDontMailDelegates")
					return
				}
			}
		case "266893":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ScheduleInfoResourceType = nil
			} else {
				if z.ScheduleInfoResourceType == nil {
					z.ScheduleInfoResourceType = new(int32)
				}
				*z.ScheduleInfoResourceType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ScheduleInfoResourceType")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Appointment) Msgsize() (s int) {
	s = 3 + 8
	if z.AllAttendeesString == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AllAttendeesString)
	}
	s += 8
	if z.AllowExternalCheck == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.AppointmentAuxiliaryFlags == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.AppointmentColor == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.AppointmentCounterProposal == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.AppointmentDuration == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.AppointmentEndDate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.AppointmentEndTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.AppointmentEndWhole == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.AppointmentLastSequence == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 5
	if z.AppointmentMessageClass == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AppointmentMessageClass)
	}
	s += 8
	if z.AppointmentNotAllowPropose == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.AppointmentProposalNumber == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.AppointmentProposedDuration == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.AppointmentProposedEndWhole == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.AppointmentProposedStartWhole == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.AppointmentReplyName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AppointmentReplyName)
	}
	s += 8
	if z.AppointmentReplyTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.AppointmentSequence == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.AppointmentSequenceTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.AppointmentStartDate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.AppointmentStartTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.AppointmentStartWhole == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.AppointmentStateFlags == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.AppointmentSubType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.AppointmentUpdateTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 4
	if z.AttendeeCriticalChange == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.AutoFillLocation == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.AutoStartCheck == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.BusyStatus == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 4
	if z.CalendarType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.CcAttendeesString == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.CcAttendeesString)
	}
	s += 7
	if z.ChangeHighlight == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 4
	if z.ClientIntent == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.ClipEnd == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.ClipStart == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.CollaborateDoc == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.CollaborateDoc)
	}
	s += 8
	if z.ConferencingCheck == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.ConferencingType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 4
	if z.DayInterval == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 6
	if z.DayOfMonth == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 4
	if z.DelegateMail == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.Directory == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Directory)
	}
	s += 4
	if z.EndRecurrenceDate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 4
	if z.EndRecurrenceTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.ExceptionReplaceTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.FExceptionalAttendees == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.FExceptionalBody == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.FInvited == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ForwardInstance == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.FOthersAppointment == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 6
	if z.ICalendarDayOfWeekMask == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.IntendedBusyStatus == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 5
	if z.IsException == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 4
	if z.IsRecurring == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 4
	if z.IsSilent == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.Location == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Location)
	}
	s += 4
	if z.MeetingType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.MeetingWorkspaceUrl == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.MeetingWorkspaceUrl)
	}
	s += 4
	if z.MonthInterval == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 6
	if z.MonthOfYear == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 4
	if z.MonthOfYearMask == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.NetShowUrl == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.NetShowUrl)
	}
	s += 7
	if z.NoEndDateFlag == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.NonSendableBcc == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.NonSendableBcc)
	}
	s += 8
	if z.NonSendableCc == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.NonSendableCc)
	}
	s += 8
	if z.NonSendableTo == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.NonSendableTo)
	}
	s += 6
	if z.Occurrences == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 5
	if z.OldLocation == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.OldLocation)
	}
	s += 4
	if z.OldRecurrenceType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 5
	if z.OldWhenEndWhole == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 5
	if z.OldWhenStartWhole == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.OnlinePassword == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.OnlinePassword)
	}
	s += 4
	if z.OptionalAttendees == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.OptionalAttendees)
	}
	s += 8
	if z.OrganizerAlias == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.OrganizerAlias)
	}
	s += 5
	if z.OwnerCriticalChange == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.OwnerName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.OwnerName)
	}
	s += 6
	if z.RecurrenceDuration == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.RecurrencePattern == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.RecurrencePattern)
	}
	s += 7
	if z.RecurrenceType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.Recurring == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.ReminderDelta == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.ReminderFileParameter == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ReminderFileParameter)
	}
	s += 8
	if z.ReminderOverride == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ReminderPlaySound == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ReminderSet == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ReminderSignalTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.ReminderTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.ReminderTimeDate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.ReminderTimeTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.ReminderType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 4
	if z.RequiredAttendees == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.RequiredAttendees)
	}
	s += 4
	if z.ResourceAttendees == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ResourceAttendees)
	}
	s += 7
	if z.ResponseStatus == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.ServerProcessed == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.ServerProcessingActions == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.SingleBodyiCal == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 4
	if z.StartRecurrenceDate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 4
	if z.StartRecurrenceTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 4
	if z.TimeZone == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.TimeZoneDescription == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.TimeZoneDescription)
	}
	s += 8
	if z.ToAttendeesString == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ToAttendeesString)
	}
	s += 4
	if z.WeekInterval == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 4
	if z.Where == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Where)
	}
	s += 4
	if z.YearInterval == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 12
	if z.LocationUrl == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.LocationUrl)
	}
	s += 20
	if z.MeetingDoNotForward == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.FreeBusyPublishEnd == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 7
	if z.FreeBusyPublishStart == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.FreeBusyRangeTimestamp == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.ICalendarEndTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.ICalendarReminderNextTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8
	if z.Processed == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ScheduleInfoAutoAcceptAppointments == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ScheduleInfoDelegatorWantsCopy == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ScheduleInfoDelegatorWantsInfo == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ScheduleInfoDisallowOverlappingAppts == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ScheduleInfoDisallowRecurringAppts == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.ScheduleInfoDontMailDelegates == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 7
	if z.ScheduleInfoResourceType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	return
}
