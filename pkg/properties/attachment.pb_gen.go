package properties

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Attachment) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AttachmentMacContentType":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentMacContentType")
					return
				}
				z.AttachmentMacContentType = nil
			} else {
				if z.AttachmentMacContentType == nil {
					z.AttachmentMacContentType = new(string)
				}
				*z.AttachmentMacContentType, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentMacContentType")
					return
				}
			}
		case "AttachmentOriginalPermissionType":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentOriginalPermissionType")
					return
				}
				z.AttachmentOriginalPermissionType = nil
			} else {
				if z.AttachmentOriginalPermissionType == nil {
					z.AttachmentOriginalPermissionType = new(int32)
				}
				*z.AttachmentOriginalPermissionType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentOriginalPermissionType")
					return
				}
			}
		case "AttachmentPermissionType":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentPermissionType")
					return
				}
				z.AttachmentPermissionType = nil
			} else {
				if z.AttachmentPermissionType == nil {
					z.AttachmentPermissionType = new(int32)
				}
				*z.AttachmentPermissionType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentPermissionType")
					return
				}
			}
		case "AttachmentProviderType":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentProviderType")
					return
				}
				z.AttachmentProviderType = nil
			} else {
				if z.AttachmentProviderType == nil {
					z.AttachmentProviderType = new(string)
				}
				*z.AttachmentProviderType, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentProviderType")
					return
				}
			}
		case "14097-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachContentBase")
					return
				}
				z.AttachContentBase = nil
			} else {
				if z.AttachContentBase == nil {
					z.AttachContentBase = new(string)
				}
				*z.AttachContentBase, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachContentBase")
					return
				}
			}
		case "14098-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachContentId")
					return
				}
				z.AttachContentId = nil
			} else {
				if z.AttachContentId == nil {
					z.AttachContentId = new(string)
				}
				*z.AttachContentId, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachContentId")
					return
				}
			}
		case "14099-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachContentLocation")
					return
				}
				z.AttachContentLocation = nil
			} else {
				if z.AttachContentLocation == nil {
					z.AttachContentLocation = new(string)
				}
				*z.AttachContentLocation, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachContentLocation")
					return
				}
			}
		case "14083-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachExtension")
					return
				}
				z.AttachExtension = nil
			} else {
				if z.AttachExtension == nil {
					z.AttachExtension = new(string)
				}
				*z.AttachExtension, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachExtension")
					return
				}
			}
		case "14084-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachFilename")
					return
				}
				z.AttachFilename = nil
			} else {
				if z.AttachFilename == nil {
					z.AttachFilename = new(string)
				}
				*z.AttachFilename, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachFilename")
					return
				}
			}
		case "14100-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachFlags")
					return
				}
				z.AttachFlags = nil
			} else {
				if z.AttachFlags == nil {
					z.AttachFlags = new(int32)
				}
				*z.AttachFlags, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AttachFlags")
					return
				}
			}
		case "14087-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachLongFilename")
					return
				}
				z.AttachLongFilename = nil
			} else {
				if z.AttachLongFilename == nil {
					z.AttachLongFilename = new(string)
				}
				*z.AttachLongFilename, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachLongFilename")
					return
				}
			}
		case "14093-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachLongPathname")
					return
				}
				z.AttachLongPathname = nil
			} else {
				if z.AttachLongPathname == nil {
					z.AttachLongPathname = new(string)
				}
				*z.AttachLongPathname, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachLongPathname")
					return
				}
			}
		case "32767-11":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentContactPhoto")
					return
				}
				z.AttachmentContactPhoto = nil
			} else {
				if z.AttachmentContactPhoto == nil {
					z.AttachmentContactPhoto = new(bool)
				}
				*z.AttachmentContactPhoto, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentContactPhoto")
					return
				}
			}
		case "32765-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentFlags")
					return
				}
				z.AttachmentFlags = nil
			} else {
				if z.AttachmentFlags == nil {
					z.AttachmentFlags = new(int32)
				}
				*z.AttachmentFlags, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentFlags")
					return
				}
			}
		case "32766-11":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentHidden")
					return
				}
				z.AttachmentHidden = nil
			} else {
				if z.AttachmentHidden == nil {
					z.AttachmentHidden = new(bool)
				}
				*z.AttachmentHidden, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentHidden")
					return
				}
			}
		case "32762-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentLinkId")
					return
				}
				z.AttachmentLinkId = nil
			} else {
				if z.AttachmentLinkId == nil {
					z.AttachmentLinkId = new(int32)
				}
				*z.AttachmentLinkId, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AttachmentLinkId")
					return
				}
			}
		case "14085-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachMethod")
					return
				}
				z.AttachMethod = nil
			} else {
				if z.AttachMethod == nil {
					z.AttachMethod = new(int32)
				}
				*z.AttachMethod, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AttachMethod")
					return
				}
			}
		case "14094-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachMimeTag")
					return
				}
				z.AttachMimeTag = nil
			} else {
				if z.AttachMimeTag == nil {
					z.AttachMimeTag = new(string)
				}
				*z.AttachMimeTag, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachMimeTag")
					return
				}
			}
		case "3617-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachNumber")
					return
				}
				z.AttachNumber = nil
			} else {
				if z.AttachNumber == nil {
					z.AttachNumber = new(int32)
				}
				*z.AttachNumber, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AttachNumber")
					return
				}
			}
		case "14088-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachPathname")
					return
				}
				z.AttachPathname = nil
			} else {
				if z.AttachPathname == nil {
					z.AttachPathname = new(string)
				}
				*z.AttachPathname, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachPathname")
					return
				}
			}
		case "3616-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachSize")
					return
				}
				z.AttachSize = nil
			} else {
				if z.AttachSize == nil {
					z.AttachSize = new(int32)
				}
				*z.AttachSize, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "AttachSize")
					return
				}
			}
		case "14092-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AttachTransportName")
					return
				}
				z.AttachTransportName = nil
			} else {
				if z.AttachTransportName == nil {
					z.AttachTransportName = new(string)
				}
				*z.AttachTransportName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AttachTransportName")
					return
				}
			}
		case "14107-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TextAttachmentCharset")
					return
				}
				z.TextAttachmentCharset = nil
			} else {
				if z.TextAttachmentCharset == nil {
					z.TextAttachmentCharset = new(string)
				}
				*z.TextAttachmentCharset, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "TextAttachmentCharset")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Attachment) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(23)
	var zb0001Mask uint32 /* 23 bits */
	if z.AttachContentBase == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.AttachContentId == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.AttachContentLocation == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.AttachExtension == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.AttachFilename == nil {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.AttachFlags == nil {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.AttachLongFilename == nil {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.AttachLongPathname == nil {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.AttachmentContactPhoto == nil {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.AttachmentFlags == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.AttachmentHidden == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.AttachmentLinkId == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if z.AttachMethod == nil {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	if z.AttachMimeTag == nil {
		zb0001Len--
		zb0001Mask |= 0x20000
	}
	if z.AttachNumber == nil {
		zb0001Len--
		zb0001Mask |= 0x40000
	}
	if z.AttachPathname == nil {
		zb0001Len--
		zb0001Mask |= 0x80000
	}
	if z.AttachSize == nil {
		zb0001Len--
		zb0001Mask |= 0x100000
	}
	if z.AttachTransportName == nil {
		zb0001Len--
		zb0001Mask |= 0x200000
	}
	if z.TextAttachmentCharset == nil {
		zb0001Len--
		zb0001Mask |= 0x400000
	}
	// variable map header, size zb0001Len
	err = en.WriteMapHeader(zb0001Len)
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "AttachmentMacContentType"
	err = en.Append(0xb8, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	if z.AttachmentMacContentType == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.AttachmentMacContentType)
		if err != nil {
			err = msgp.WrapError(err, "AttachmentMacContentType")
			return
		}
	}
	// write "AttachmentOriginalPermissionType"
	err = en.Append(0xd9, 0x20, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	if z.AttachmentOriginalPermissionType == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt32(*z.AttachmentOriginalPermissionType)
		if err != nil {
			err = msgp.WrapError(err, "AttachmentOriginalPermissionType")
			return
		}
	}
	// write "AttachmentPermissionType"
	err = en.Append(0xb8, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	if z.AttachmentPermissionType == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt32(*z.AttachmentPermissionType)
		if err != nil {
			err = msgp.WrapError(err, "AttachmentPermissionType")
			return
		}
	}
	// write "AttachmentProviderType"
	err = en.Append(0xb6, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	if z.AttachmentProviderType == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.AttachmentProviderType)
		if err != nil {
			err = msgp.WrapError(err, "AttachmentProviderType")
			return
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "14097-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x30, 0x39, 0x37, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AttachContentBase == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AttachContentBase)
			if err != nil {
				err = msgp.WrapError(err, "AttachContentBase")
				return
			}
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "14098-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x30, 0x39, 0x38, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AttachContentId == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AttachContentId)
			if err != nil {
				err = msgp.WrapError(err, "AttachContentId")
				return
			}
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// write "14099-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x30, 0x39, 0x39, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AttachContentLocation == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AttachContentLocation)
			if err != nil {
				err = msgp.WrapError(err, "AttachContentLocation")
				return
			}
		}
	}
	if (zb0001Mask & 0x80) == 0 { // if not empty
		// write "14083-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x30, 0x38, 0x33, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AttachExtension == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AttachExtension)
			if err != nil {
				err = msgp.WrapError(err, "AttachExtension")
				return
			}
		}
	}
	if (zb0001Mask & 0x100) == 0 { // if not empty
		// write "14084-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x30, 0x38, 0x34, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AttachFilename == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AttachFilename)
			if err != nil {
				err = msgp.WrapError(err, "AttachFilename")
				return
			}
		}
	}
	if (zb0001Mask & 0x200) == 0 { // if not empty
		// write "14100-3"
		err = en.Append(0xa7, 0x31, 0x34, 0x31, 0x30, 0x30, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.AttachFlags == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AttachFlags)
			if err != nil {
				err = msgp.WrapError(err, "AttachFlags")
				return
			}
		}
	}
	if (zb0001Mask & 0x400) == 0 { // if not empty
		// write "14087-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x30, 0x38, 0x37, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AttachLongFilename == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AttachLongFilename)
			if err != nil {
				err = msgp.WrapError(err, "AttachLongFilename")
				return
			}
		}
	}
	if (zb0001Mask & 0x800) == 0 { // if not empty
		// write "14093-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x30, 0x39, 0x33, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AttachLongPathname == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AttachLongPathname)
			if err != nil {
				err = msgp.WrapError(err, "AttachLongPathname")
				return
			}
		}
	}
	if (zb0001Mask & 0x1000) == 0 { // if not empty
		// write "32767-11"
		err = en.Append(0xa8, 0x33, 0x32, 0x37, 0x36, 0x37, 0x2d, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.AttachmentContactPhoto == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.AttachmentContactPhoto)
			if err != nil {
				err = msgp.WrapError(err, "AttachmentContactPhoto")
				return
			}
		}
	}
	if (zb0001Mask & 0x2000) == 0 { // if not empty
		// write "32765-3"
		err = en.Append(0xa7, 0x33, 0x32, 0x37, 0x36, 0x35, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.AttachmentFlags == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AttachmentFlags)
			if err != nil {
				err = msgp.WrapError(err, "AttachmentFlags")
				return
			}
		}
	}
	if (zb0001Mask & 0x4000) == 0 { // if not empty
		// write "32766-11"
		err = en.Append(0xa8, 0x33, 0x32, 0x37, 0x36, 0x36, 0x2d, 0x31, 0x31)
		if err != nil {
			return
		}
		if z.AttachmentHidden == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBool(*z.AttachmentHidden)
			if err != nil {
				err = msgp.WrapError(err, "AttachmentHidden")
				return
			}
		}
	}
	if (zb0001Mask & 0x8000) == 0 { // if not empty
		// write "32762-3"
		err = en.Append(0xa7, 0x33, 0x32, 0x37, 0x36, 0x32, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.AttachmentLinkId == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AttachmentLinkId)
			if err != nil {
				err = msgp.WrapError(err, "AttachmentLinkId")
				return
			}
		}
	}
	if (zb0001Mask & 0x10000) == 0 { // if not empty
		// write "14085-3"
		err = en.Append(0xa7, 0x31, 0x34, 0x30, 0x38, 0x35, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.AttachMethod == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AttachMethod)
			if err != nil {
				err = msgp.WrapError(err, "AttachMethod")
				return
			}
		}
	}
	if (zb0001Mask & 0x20000) == 0 { // if not empty
		// write "14094-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x30, 0x39, 0x34, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AttachMimeTag == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AttachMimeTag)
			if err != nil {
				err = msgp.WrapError(err, "AttachMimeTag")
				return
			}
		}
	}
	if (zb0001Mask & 0x40000) == 0 { // if not empty
		// write "3617-3"
		err = en.Append(0xa6, 0x33, 0x36, 0x31, 0x37, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.AttachNumber == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AttachNumber)
			if err != nil {
				err = msgp.WrapError(err, "AttachNumber")
				return
			}
		}
	}
	if (zb0001Mask & 0x80000) == 0 { // if not empty
		// write "14088-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x30, 0x38, 0x38, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AttachPathname == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AttachPathname)
			if err != nil {
				err = msgp.WrapError(err, "AttachPathname")
				return
			}
		}
	}
	if (zb0001Mask & 0x100000) == 0 { // if not empty
		// write "3616-3"
		err = en.Append(0xa6, 0x33, 0x36, 0x31, 0x36, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.AttachSize == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.AttachSize)
			if err != nil {
				err = msgp.WrapError(err, "AttachSize")
				return
			}
		}
	}
	if (zb0001Mask & 0x200000) == 0 { // if not empty
		// write "14092-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x30, 0x39, 0x32, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.AttachTransportName == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.AttachTransportName)
			if err != nil {
				err = msgp.WrapError(err, "AttachTransportName")
				return
			}
		}
	}
	if (zb0001Mask & 0x400000) == 0 { // if not empty
		// write "14107-31"
		err = en.Append(0xa8, 0x31, 0x34, 0x31, 0x30, 0x37, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.TextAttachmentCharset == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.TextAttachmentCharset)
			if err != nil {
				err = msgp.WrapError(err, "TextAttachmentCharset")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Attachment) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(23)
	var zb0001Mask uint32 /* 23 bits */
	if z.AttachContentBase == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.AttachContentId == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.AttachContentLocation == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.AttachExtension == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.AttachFilename == nil {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.AttachFlags == nil {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.AttachLongFilename == nil {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.AttachLongPathname == nil {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.AttachmentContactPhoto == nil {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.AttachmentFlags == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.AttachmentHidden == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.AttachmentLinkId == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if z.AttachMethod == nil {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	if z.AttachMimeTag == nil {
		zb0001Len--
		zb0001Mask |= 0x20000
	}
	if z.AttachNumber == nil {
		zb0001Len--
		zb0001Mask |= 0x40000
	}
	if z.AttachPathname == nil {
		zb0001Len--
		zb0001Mask |= 0x80000
	}
	if z.AttachSize == nil {
		zb0001Len--
		zb0001Mask |= 0x100000
	}
	if z.AttachTransportName == nil {
		zb0001Len--
		zb0001Mask |= 0x200000
	}
	if z.TextAttachmentCharset == nil {
		zb0001Len--
		zb0001Mask |= 0x400000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)
	if zb0001Len == 0 {
		return
	}
	// string "AttachmentMacContentType"
	o = append(o, 0xb8, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	if z.AttachmentMacContentType == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.AttachmentMacContentType)
	}
	// string "AttachmentOriginalPermissionType"
	o = append(o, 0xd9, 0x20, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65)
	if z.AttachmentOriginalPermissionType == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt32(o, *z.AttachmentOriginalPermissionType)
	}
	// string "AttachmentPermissionType"
	o = append(o, 0xb8, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65)
	if z.AttachmentPermissionType == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt32(o, *z.AttachmentPermissionType)
	}
	// string "AttachmentProviderType"
	o = append(o, 0xb6, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65)
	if z.AttachmentProviderType == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.AttachmentProviderType)
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "14097-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x30, 0x39, 0x37, 0x2d, 0x33, 0x31)
		if z.AttachContentBase == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AttachContentBase)
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "14098-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x30, 0x39, 0x38, 0x2d, 0x33, 0x31)
		if z.AttachContentId == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AttachContentId)
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// string "14099-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x30, 0x39, 0x39, 0x2d, 0x33, 0x31)
		if z.AttachContentLocation == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AttachContentLocation)
		}
	}
	if (zb0001Mask & 0x80) == 0 { // if not empty
		// string "14083-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x30, 0x38, 0x33, 0x2d, 0x33, 0x31)
		if z.AttachExtension == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AttachExtension)
		}
	}
	if (zb0001Mask & 0x100) == 0 { // if not empty
		// string "14084-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x30, 0x38, 0x34, 0x2d, 0x33, 0x31)
		if z.AttachFilename == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AttachFilename)
		}
	}
	if (zb0001Mask & 0x200) == 0 { // if not empty
		// string "14100-3"
		o = append(o, 0xa7, 0x31, 0x34, 0x31, 0x30, 0x30, 0x2d, 0x33)
		if z.AttachFlags == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AttachFlags)
		}
	}
	if (zb0001Mask & 0x400) == 0 { // if not empty
		// string "14087-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x30, 0x38, 0x37, 0x2d, 0x33, 0x31)
		if z.AttachLongFilename == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AttachLongFilename)
		}
	}
	if (zb0001Mask & 0x800) == 0 { // if not empty
		// string "14093-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x30, 0x39, 0x33, 0x2d, 0x33, 0x31)
		if z.AttachLongPathname == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AttachLongPathname)
		}
	}
	if (zb0001Mask & 0x1000) == 0 { // if not empty
		// string "32767-11"
		o = append(o, 0xa8, 0x33, 0x32, 0x37, 0x36, 0x37, 0x2d, 0x31, 0x31)
		if z.AttachmentContactPhoto == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.AttachmentContactPhoto)
		}
	}
	if (zb0001Mask & 0x2000) == 0 { // if not empty
		// string "32765-3"
		o = append(o, 0xa7, 0x33, 0x32, 0x37, 0x36, 0x35, 0x2d, 0x33)
		if z.AttachmentFlags == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AttachmentFlags)
		}
	}
	if (zb0001Mask & 0x4000) == 0 { // if not empty
		// string "32766-11"
		o = append(o, 0xa8, 0x33, 0x32, 0x37, 0x36, 0x36, 0x2d, 0x31, 0x31)
		if z.AttachmentHidden == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBool(o, *z.AttachmentHidden)
		}
	}
	if (zb0001Mask & 0x8000) == 0 { // if not empty
		// string "32762-3"
		o = append(o, 0xa7, 0x33, 0x32, 0x37, 0x36, 0x32, 0x2d, 0x33)
		if z.AttachmentLinkId == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AttachmentLinkId)
		}
	}
	if (zb0001Mask & 0x10000) == 0 { // if not empty
		// string "14085-3"
		o = append(o, 0xa7, 0x31, 0x34, 0x30, 0x38, 0x35, 0x2d, 0x33)
		if z.AttachMethod == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AttachMethod)
		}
	}
	if (zb0001Mask & 0x20000) == 0 { // if not empty
		// string "14094-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x30, 0x39, 0x34, 0x2d, 0x33, 0x31)
		if z.AttachMimeTag == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AttachMimeTag)
		}
	}
	if (zb0001Mask & 0x40000) == 0 { // if not empty
		// string "3617-3"
		o = append(o, 0xa6, 0x33, 0x36, 0x31, 0x37, 0x2d, 0x33)
		if z.AttachNumber == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AttachNumber)
		}
	}
	if (zb0001Mask & 0x80000) == 0 { // if not empty
		// string "14088-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x30, 0x38, 0x38, 0x2d, 0x33, 0x31)
		if z.AttachPathname == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AttachPathname)
		}
	}
	if (zb0001Mask & 0x100000) == 0 { // if not empty
		// string "3616-3"
		o = append(o, 0xa6, 0x33, 0x36, 0x31, 0x36, 0x2d, 0x33)
		if z.AttachSize == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.AttachSize)
		}
	}
	if (zb0001Mask & 0x200000) == 0 { // if not empty
		// string "14092-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x30, 0x39, 0x32, 0x2d, 0x33, 0x31)
		if z.AttachTransportName == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.AttachTransportName)
		}
	}
	if (zb0001Mask & 0x400000) == 0 { // if not empty
		// string "14107-31"
		o = append(o, 0xa8, 0x31, 0x34, 0x31, 0x30, 0x37, 0x2d, 0x33, 0x31)
		if z.TextAttachmentCharset == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.TextAttachmentCharset)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Attachment) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AttachmentMacContentType":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachmentMacContentType = nil
			} else {
				if z.AttachmentMacContentType == nil {
					z.AttachmentMacContentType = new(string)
				}
				*z.AttachmentMacContentType, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachmentMacContentType")
					return
				}
			}
		case "AttachmentOriginalPermissionType":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachmentOriginalPermissionType = nil
			} else {
				if z.AttachmentOriginalPermissionType == nil {
					z.AttachmentOriginalPermissionType = new(int32)
				}
				*z.AttachmentOriginalPermissionType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachmentOriginalPermissionType")
					return
				}
			}
		case "AttachmentPermissionType":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachmentPermissionType = nil
			} else {
				if z.AttachmentPermissionType == nil {
					z.AttachmentPermissionType = new(int32)
				}
				*z.AttachmentPermissionType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachmentPermissionType")
					return
				}
			}
		case "AttachmentProviderType":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachmentProviderType = nil
			} else {
				if z.AttachmentProviderType == nil {
					z.AttachmentProviderType = new(string)
				}
				*z.AttachmentProviderType, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachmentProviderType")
					return
				}
			}
		case "14097-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachContentBase = nil
			} else {
				if z.AttachContentBase == nil {
					z.AttachContentBase = new(string)
				}
				*z.AttachContentBase, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachContentBase")
					return
				}
			}
		case "14098-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachContentId = nil
			} else {
				if z.AttachContentId == nil {
					z.AttachContentId = new(string)
				}
				*z.AttachContentId, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachContentId")
					return
				}
			}
		case "14099-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachContentLocation = nil
			} else {
				if z.AttachContentLocation == nil {
					z.AttachContentLocation = new(string)
				}
				*z.AttachContentLocation, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachContentLocation")
					return
				}
			}
		case "14083-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachExtension = nil
			} else {
				if z.AttachExtension == nil {
					z.AttachExtension = new(string)
				}
				*z.AttachExtension, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachExtension")
					return
				}
			}
		case "14084-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachFilename = nil
			} else {
				if z.AttachFilename == nil {
					z.AttachFilename = new(string)
				}
				*z.AttachFilename, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachFilename")
					return
				}
			}
		case "14100-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachFlags = nil
			} else {
				if z.AttachFlags == nil {
					z.AttachFlags = new(int32)
				}
				*z.AttachFlags, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachFlags")
					return
				}
			}
		case "14087-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachLongFilename = nil
			} else {
				if z.AttachLongFilename == nil {
					z.AttachLongFilename = new(string)
				}
				*z.AttachLongFilename, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachLongFilename")
					return
				}
			}
		case "14093-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachLongPathname = nil
			} else {
				if z.AttachLongPathname == nil {
					z.AttachLongPathname = new(string)
				}
				*z.AttachLongPathname, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachLongPathname")
					return
				}
			}
		case "32767-11":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachmentContactPhoto = nil
			} else {
				if z.AttachmentContactPhoto == nil {
					z.AttachmentContactPhoto = new(bool)
				}
				*z.AttachmentContactPhoto, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachmentContactPhoto")
					return
				}
			}
		case "32765-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachmentFlags = nil
			} else {
				if z.AttachmentFlags == nil {
					z.AttachmentFlags = new(int32)
				}
				*z.AttachmentFlags, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachmentFlags")
					return
				}
			}
		case "32766-11":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachmentHidden = nil
			} else {
				if z.AttachmentHidden == nil {
					z.AttachmentHidden = new(bool)
				}
				*z.AttachmentHidden, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachmentHidden")
					return
				}
			}
		case "32762-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachmentLinkId = nil
			} else {
				if z.AttachmentLinkId == nil {
					z.AttachmentLinkId = new(int32)
				}
				*z.AttachmentLinkId, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachmentLinkId")
					return
				}
			}
		case "14085-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachMethod = nil
			} else {
				if z.AttachMethod == nil {
					z.AttachMethod = new(int32)
				}
				*z.AttachMethod, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachMethod")
					return
				}
			}
		case "14094-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachMimeTag = nil
			} else {
				if z.AttachMimeTag == nil {
					z.AttachMimeTag = new(string)
				}
				*z.AttachMimeTag, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachMimeTag")
					return
				}
			}
		case "3617-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachNumber = nil
			} else {
				if z.AttachNumber == nil {
					z.AttachNumber = new(int32)
				}
				*z.AttachNumber, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachNumber")
					return
				}
			}
		case "14088-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachPathname = nil
			} else {
				if z.AttachPathname == nil {
					z.AttachPathname = new(string)
				}
				*z.AttachPathname, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachPathname")
					return
				}
			}
		case "3616-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachSize = nil
			} else {
				if z.AttachSize == nil {
					z.AttachSize = new(int32)
				}
				*z.AttachSize, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachSize")
					return
				}
			}
		case "14092-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AttachTransportName = nil
			} else {
				if z.AttachTransportName == nil {
					z.AttachTransportName = new(string)
				}
				*z.AttachTransportName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AttachTransportName")
					return
				}
			}
		case "14107-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TextAttachmentCharset = nil
			} else {
				if z.TextAttachmentCharset == nil {
					z.TextAttachmentCharset = new(string)
				}
				*z.TextAttachmentCharset, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TextAttachmentCharset")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Attachment) Msgsize() (s int) {
	s = 3 + 25
	if z.AttachmentMacContentType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachmentMacContentType)
	}
	s += 34
	if z.AttachmentOriginalPermissionType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 25
	if z.AttachmentPermissionType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 23
	if z.AttachmentProviderType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachmentProviderType)
	}
	s += 9
	if z.AttachContentBase == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachContentBase)
	}
	s += 9
	if z.AttachContentId == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachContentId)
	}
	s += 9
	if z.AttachContentLocation == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachContentLocation)
	}
	s += 9
	if z.AttachExtension == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachExtension)
	}
	s += 9
	if z.AttachFilename == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachFilename)
	}
	s += 8
	if z.AttachFlags == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.AttachLongFilename == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachLongFilename)
	}
	s += 9
	if z.AttachLongPathname == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachLongPathname)
	}
	s += 9
	if z.AttachmentContactPhoto == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.AttachmentFlags == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.AttachmentHidden == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 8
	if z.AttachmentLinkId == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 8
	if z.AttachMethod == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.AttachMimeTag == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachMimeTag)
	}
	s += 7
	if z.AttachNumber == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.AttachPathname == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachPathname)
	}
	s += 7
	if z.AttachSize == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.AttachTransportName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AttachTransportName)
	}
	s += 9
	if z.TextAttachmentCharset == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.TextAttachmentCharset)
	}
	return
}
