// go-pst is a library for reading Personal Storage Table (.pst) files (written in Go/Golang).
//
// Copyright 2023 Marten Mooij
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//go:generate msgp -tests=false

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: message.proto

package properties

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the options used in the automatic processing of email messages.
	AutoProcessState *int32 `protobuf:"varint,1,opt,name=auto_process_state,json=autoProcessState,proto3,oneof" json:"auto_process_state,omitempty" msg:"340743,omitempty"`  
	// Specifies billing information for the contact.
	Billing *string `protobuf:"bytes,2,opt,name=billing,proto3,oneof" json:"billing,omitempty" msg:"3410131,omitempty"`  
	// Contains a list of the classification categories to which the associated Message object has been assigned.
	Classification *string `protobuf:"bytes,3,opt,name=classification,proto3,oneof" json:"classification,omitempty" msg:"3423031,omitempty"`  
	// Contains a human-readable summary of each of the classification categories included in the PidLidClassification property (section 2.53).
	ClassificationDescription *string `protobuf:"bytes,4,opt,name=classification_description,json=classificationDescription,proto3,oneof" json:"classification_description,omitempty" msg:"3423131,omitempty"`  
	// Contains the GUID that identifies the list of email classification categories used by a Message object.
	ClassificationGuid *string `protobuf:"bytes,5,opt,name=classification_guid,json=classificationGuid,proto3,oneof" json:"classification_guid,omitempty" msg:"3423231,omitempty"`  
	// Indicates whether the message uses any classification categories.
	ClassificationKeep *bool `protobuf:"varint,6,opt,name=classification_keep,json=classificationKeep,proto3,oneof" json:"classification_keep,omitempty" msg:"3423411,omitempty"`  
	// Indicates whether the contents of this message are regarded as classified information.
	Classified *bool `protobuf:"varint,7,opt,name=classified,proto3,oneof" json:"classified,omitempty" msg:"3422911,omitempty"`  
	// Indicates the end time for the Message object.
	CommonEnd *int64 `protobuf:"varint,8,opt,name=common_end,json=commonEnd,proto3,oneof" json:"common_end,omitempty" msg:"3407164,omitempty"`  
	// Indicates the start time for the Message object.
	CommonStart *int64 `protobuf:"varint,9,opt,name=common_start,json=commonStart,proto3,oneof" json:"common_start,omitempty" msg:"3407064,omitempty"`  
	// Specifies the build number of the client application that sent the message.
	CurrentVersion *int32 `protobuf:"varint,12,opt,name=current_version,json=currentVersion,proto3,oneof" json:"current_version,omitempty" msg:"341303,omitempty"`  
	// Specifies the name of the client application that sent the message.
	CurrentVersionName *string `protobuf:"bytes,13,opt,name=current_version_name,json=currentVersionName,proto3,oneof" json:"current_version_name,omitempty" msg:"3413231,omitempty"`  
	// Specifies the user-visible email account name through which the email message is sent.
	InternetAccountName *string `protobuf:"bytes,14,opt,name=internet_account_name,json=internetAccountName,proto3,oneof" json:"internet_account_name,omitempty" msg:"3417631,omitempty"`  
	// Specifies the email account ID through which the email message is sent.
	InternetAccountStamp *string `protobuf:"bytes,15,opt,name=internet_account_stamp,json=internetAccountStamp,proto3,oneof" json:"internet_account_stamp,omitempty" msg:"3417731,omitempty"`  
	// Indicates whether the end user wishes for this Message object to be hidden from other users who have access to the Message object.
	Private *bool `protobuf:"varint,19,opt,name=private,proto3,oneof" json:"private,omitempty" msg:"3405411,omitempty"`  
	// Specifies the voting option that a respondent has selected.
	VerbResponse *string `protobuf:"bytes,20,opt,name=verb_response,json=verbResponse,proto3,oneof" json:"verb_response,omitempty" msg:"3408431,omitempty"`  
	// Contains the value of the MIME Accept-Language header.
	AcceptLanguage *string `protobuf:"bytes,21,opt,name=accept_language,json=acceptLanguage,proto3,oneof" json:"accept_language,omitempty"`
	// Specifies the value of the MIME Content-Base header, which defines the base URI for resolving relative URLs contained within the message body.
	ContentBase *string `protobuf:"bytes,22,opt,name=content_base,json=contentBase,proto3,oneof" json:"content_base,omitempty"`
	// Contains a string that identifies the type of content of a Message object.
	ContentClass *string `protobuf:"bytes,23,opt,name=content_class,json=contentClass,proto3,oneof" json:"content_class,omitempty"`
	// Specifies the type of the body part content.
	ContentType *string `protobuf:"bytes,24,opt,name=content_type,json=contentType,proto3,oneof" json:"content_type,omitempty"`
	// Contains the name of the host (with domains omitted) and a white-space-separated list of colon-separated pairs of newsgroup names and message numbers.
	CrossReference *string `protobuf:"bytes,25,opt,name=cross_reference,json=crossReference,proto3,oneof" json:"cross_reference,omitempty"`
	// Indicates that the message is not to be processed by a spam filter.
	ExchangeJunkEmailMoveStamp *int32 `protobuf:"varint,26,opt,name=exchange_junk_email_move_stamp,json=exchangeJunkEmailMoveStamp,proto3,oneof" json:"exchange_junk_email_move_stamp,omitempty"`
	// Specifies the SMTP email alias of the organizer of an appointment or meeting.
	From *string `protobuf:"bytes,27,opt,name=from,proto3,oneof" json:"from,omitempty"`
	// Specifies the subject of the message.
	InternetSubject *string `protobuf:"bytes,28,opt,name=internet_subject,json=internetSubject,proto3,oneof" json:"internet_subject,omitempty"`
	// Contains the string that specifies the CLP label information.
	MsipLabels *string `protobuf:"bytes,30,opt,name=msip_labels,json=msipLabels,proto3,oneof" json:"msip_labels,omitempty"`
	// Indicates whether a message is likely to be phishing.
	PhishingStamp *int32 `protobuf:"varint,31,opt,name=phishing_stamp,json=phishingStamp,proto3,oneof" json:"phishing_stamp,omitempty"`
	// Contains the email address type of a Message object.
	AddressType *string `protobuf:"bytes,33,opt,name=address_type,json=addressType,proto3,oneof" json:"address_type,omitempty" msg:"1229031,omitempty"`  
	// Specifies whether the sender permits the message to be auto-forwarded.
	AlternateRecipientAllowed *bool `protobuf:"varint,34,opt,name=alternate_recipient_allowed,json=alternateRecipientAllowed,proto3,oneof" json:"alternate_recipient_allowed,omitempty" msg:"211,omitempty"`  
	// Specifies the date, in UTC, after which a Message object is archived by the server.
	ArchiveDate *int64 `protobuf:"varint,35,opt,name=archive_date,json=archiveDate,proto3,oneof" json:"archive_date,omitempty" msg:"1231964,omitempty"`  
	// Specifies the number of days that a Message object can remain unarchived.
	ArchivePeriod *int32 `protobuf:"varint,36,opt,name=archive_period,json=archivePeriod,proto3,oneof" json:"archive_period,omitempty" msg:"123183,omitempty"`  
	// Contains the name of the mail user's administrative assistant.
	Assistant *string `protobuf:"bytes,38,opt,name=assistant,proto3,oneof" json:"assistant,omitempty" msg:"1489631,omitempty"`  
	// Contains the telephone number of the mail user's administrative assistant.
	AssistantTelephoneNumber *string `protobuf:"bytes,39,opt,name=assistant_telephone_number,json=assistantTelephoneNumber,proto3,oneof" json:"assistant_telephone_number,omitempty" msg:"1489431,omitempty"`  
	// Specifies whether a client or server application will forego sending automated replies in response to this message.
	AutoResponseSuppress *int32 `protobuf:"varint,40,opt,name=auto_response_suppress,json=autoResponseSuppress,proto3,oneof" json:"auto_response_suppress,omitempty" msg:"163513,omitempty"`  
	// Indicates the user's preference for viewing external content (such as links to images on an HTTP server) in the message body.
	BlockStatus *int32 `protobuf:"varint,41,opt,name=block_status,json=blockStatus,proto3,oneof" json:"block_status,omitempty" msg:"42463,omitempty"`  
	// Contains message body text in plain text format.
	Body *string `protobuf:"bytes,42,opt,name=body,proto3,oneof" json:"body,omitempty" msg:"409631,omitempty"`  
	// Contains a globally unique Uniform Resource Identifier (URI) that serves as a label for the current message body.
	BodyContentLocation *string `protobuf:"bytes,43,opt,name=body_content_location,json=bodyContentLocation,proto3,oneof" json:"body_content_location,omitempty" msg:"411631,omitempty"`  
	// Contains the HTML body of the Message object.
	BodyHtml *string `protobuf:"bytes,44,opt,name=body_html,json=bodyHtml,proto3,oneof" json:"body_html,omitempty" msg:"411531,omitempty"`  
	// Contains the current time, in UTC, when the email message is submitted.
	ClientSubmitTime *int64 `protobuf:"varint,45,opt,name=client_submit_time,json=clientSubmitTime,proto3,oneof" json:"client_submit_time,omitempty" msg:"5764,omitempty"`  
	// Indicates a confidence level that the message is spam.
	ContentFilterSpamConfidenceLevel *int32 `protobuf:"varint,46,opt,name=content_filter_spam_confidence_level,json=contentFilterSpamConfidenceLevel,proto3,oneof" json:"content_filter_spam_confidence_level,omitempty" msg:"165023,omitempty"`  
	// Contains an unchanging copy of the original subject.
	ConversationTopic *string `protobuf:"bytes,48,opt,name=conversation_topic,json=conversationTopic,proto3,oneof" json:"conversation_topic,omitempty" msg:"11231,omitempty"`  
	// Contains the time, in UTC, that the object was created.
	CreationTime *int64 `protobuf:"varint,49,opt,name=creation_time,json=creationTime,proto3,oneof" json:"creation_time,omitempty" msg:"1229564,omitempty"`  
	// Contains the name of the creator of a Message object.
	CreatorName *string `protobuf:"bytes,50,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty" msg:"1637631,omitempty"`  
	// Contains the delivery time for a delivery status notification, as specified [RFC3464], or a message disposition notification, as specified in [RFC3798].
	DeliverTime *int64 `protobuf:"varint,51,opt,name=deliver_time,json=deliverTime,proto3,oneof" json:"deliver_time,omitempty" msg:"1664,omitempty"`  
	// Contains a list of blind carbon copy (Bcc) recipient display names.
	DisplayBcc *string `protobuf:"bytes,52,opt,name=display_bcc,json=displayBcc,proto3,oneof" json:"display_bcc,omitempty" msg:"358631,omitempty"`  
	// Contains a list of carbon copy (Cc) recipient display names.
	DisplayCc *string `protobuf:"bytes,53,opt,name=display_cc,json=displayCc,proto3,oneof" json:"display_cc,omitempty" msg:"358731,omitempty"`  
	// Contains a list of the primary recipient display names, separated by semicolons, when an email message has primary recipients .
	DisplayTo *string `protobuf:"bytes,54,opt,name=display_to,json=displayTo,proto3,oneof" json:"display_to,omitempty" msg:"358831,omitempty"`  
	// Specifies which icon is to be used by a user interface when displaying a group of Message objects.
	IconIndex *int32 `protobuf:"varint,56,opt,name=icon_index,json=iconIndex,proto3,oneof" json:"icon_index,omitempty" msg:"42243,omitempty"`  
	// Indicates the level of importance assigned by the end user to the Message object.
	Importance *int32 `protobuf:"varint,57,opt,name=importance,proto3,oneof" json:"importance,omitempty" msg:"233,omitempty"`  
	// Contains the initials for parts of the full name of the mail user.
	Initials *string `protobuf:"bytes,58,opt,name=initials,proto3,oneof" json:"initials,omitempty" msg:"1485831,omitempty"`  
	// Contains the value of the original message's PidTagInternetMessageId property (section 2.748) value.
	InReplyToId *string `protobuf:"bytes,59,opt,name=in_reply_to_id,json=inReplyToId,proto3,oneof" json:"in_reply_to_id,omitempty" msg:"416231,omitempty"`  
	// Indicates the encoding method and HTML inclusion for attachments.
	InternetMailOverrideFormat *int32 `protobuf:"varint,60,opt,name=internet_mail_override_format,json=internetMailOverrideFormat,proto3,oneof" json:"internet_mail_override_format,omitempty" msg:"227863,omitempty"`  
	// Corresponds to the message-id field.
	InternetMessageId *string `protobuf:"bytes,61,opt,name=internet_message_id,json=internetMessageId,proto3,oneof" json:"internet_message_id,omitempty" msg:"414931,omitempty"`  
	// Contains a list of message IDs that specify the messages to which this reply is related.
	InternetReferences *string `protobuf:"bytes,62,opt,name=internet_references,json=internetReferences,proto3,oneof" json:"internet_references,omitempty" msg:"415331,omitempty"`  
	// Contains the Integrated Services Digital Network (ISDN) telephone number of the mail user.
	IsdnNumber *string `protobuf:"bytes,63,opt,name=isdn_number,json=isdnNumber,proto3,oneof" json:"isdn_number,omitempty" msg:"1489331,omitempty"`  
	// Contains a keyword that identifies the mail user to the mail user's system administrator.
	Keyword *string `protobuf:"bytes,64,opt,name=keyword,proto3,oneof" json:"keyword,omitempty" msg:"1485931,omitempty"`  
	// Contains a value that indicates the language in which the messaging user is writing messages.
	Language *string `protobuf:"bytes,65,opt,name=language,proto3,oneof" json:"language,omitempty" msg:"1486031,omitempty"`  
	// Contains the time, in UTC, of the last modification to the object.
	LastModificationTime *int64 `protobuf:"varint,66,opt,name=last_modification_time,json=lastModificationTime,proto3,oneof" json:"last_modification_time,omitempty" msg:"1229664,omitempty"`  
	// Contains the name of the mail user's locality, such as the town or city.
	Locality *string `protobuf:"bytes,67,opt,name=locality,proto3,oneof" json:"locality,omitempty" msg:"1488731,omitempty"`  
	// Contains the location of the mail user.
	Location *string `protobuf:"bytes,68,opt,name=location,proto3,oneof" json:"location,omitempty" msg:"1486131,omitempty"`  
	// Contains the name of the mail user's manager.
	ManagerName *string `protobuf:"bytes,69,opt,name=manager_name,json=managerName,proto3,oneof" json:"manager_name,omitempty" msg:"1492631,omitempty"`  
	MessageCcMe *bool `protobuf:"varint,70,opt,name=message_cc_me,json=messageCcMe,proto3,oneof" json:"message_cc_me,omitempty" msg:"8811,omitempty"`  
	// Specifies the time (in UTC) when the server received the message.
	MessageDeliveryTime *int64 `protobuf:"varint,71,opt,name=message_delivery_time,json=messageDeliveryTime,proto3,oneof" json:"message_delivery_time,omitempty" msg:"359064,omitempty"`  
	// Specifies the status of the Message object.
	MessageFlags *int32 `protobuf:"varint,72,opt,name=message_flags,json=messageFlags,proto3,oneof" json:"message_flags,omitempty" msg:"35913,omitempty"`  
	// Contains the common name of a messaging user for use in a message header.
	MessageHandlingSystemCommonName *string `protobuf:"bytes,73,opt,name=message_handling_system_common_name,json=messageHandlingSystemCommonName,proto3,oneof" json:"message_handling_system_common_name,omitempty" msg:"1486331,omitempty"`  
	// Indicates that the receiving mailbox owner is a primary or a carbon copy (Cc) recipient of this email message.
	MessageRecipientMe *bool `protobuf:"varint,74,opt,name=message_recipient_me,json=messageRecipientMe,proto3,oneof" json:"message_recipient_me,omitempty" msg:"8911,omitempty"`  
	// Contains the size, in bytes, consumed by the Message object on the server.
	MessageSize *int32 `protobuf:"varint,76,opt,name=message_size,json=messageSize,proto3,oneof" json:"message_size,omitempty" msg:"35923,omitempty"`  
	// Specifies the 64-bit version of the PidTagMessageSize property (section 2.796).
	MessageSizeExtended *float64 `protobuf:"fixed64,77,opt,name=message_size_extended,json=messageSizeExtended,proto3,oneof" json:"message_size_extended,omitempty" msg:"359220,omitempty"`  
	// Specifies the status of a message in a contents table.
	MessageStatus *int32 `protobuf:"varint,78,opt,name=message_status,json=messageStatus,proto3,oneof" json:"message_status,omitempty" msg:"36073,omitempty"`  
	// Indicates that the receiving mailbox owner is one of the primary recipients of this email message.
	MessageToMe *bool `protobuf:"varint,80,opt,name=message_to_me,json=messageToMe,proto3,oneof" json:"message_to_me,omitempty" msg:"8711,omitempty"`  
	// Specifies the middle name(s) of the contact.
	MiddleName *string `protobuf:"bytes,81,opt,name=middle_name,json=middleName,proto3,oneof" json:"middle_name,omitempty" msg:"1491631,omitempty"`  
	// Contains the mail user's cellular telephone number.
	MobileTelephoneNumber *string `protobuf:"bytes,82,opt,name=mobile_telephone_number,json=mobileTelephoneNumber,proto3,oneof" json:"mobile_telephone_number,omitempty" msg:"1487631,omitempty"`  
	// Contains the mail user's nickname.
	Nickname *string `protobuf:"bytes,83,opt,name=nickname,proto3,oneof" json:"nickname,omitempty" msg:"1492731,omitempty"`  
	// Contains the diagnostic code for a delivery status notification, as specified in [RFC3464].
	NonDeliveryReportDiagCode *int32 `protobuf:"varint,84,opt,name=non_delivery_report_diag_code,json=nonDeliveryReportDiagCode,proto3,oneof" json:"non_delivery_report_diag_code,omitempty" msg:"30773,omitempty"`  
	// Contains an integer value that indicates a reason for delivery failure.
	NonDeliveryReportReasonCode *int32 `protobuf:"varint,85,opt,name=non_delivery_report_reason_code,json=nonDeliveryReportReasonCode,proto3,oneof" json:"non_delivery_report_reason_code,omitempty" msg:"30763,omitempty"`  
	// Specifies whether the client sends a non-read receipt.
	NonDeliveryReportStatusCode *int32 `protobuf:"varint,86,opt,name=non_delivery_report_status_code,json=nonDeliveryReportStatusCode,proto3,oneof" json:"non_delivery_report_status_code,omitempty" msg:"30783,omitempty"`  
	// Contains the normalized subject of the message.
	NormalizedSubject *string `protobuf:"bytes,87,opt,name=normalized_subject,json=normalizedSubject,proto3,oneof" json:"normalized_subject,omitempty" msg:"361331,omitempty"`  
	// Contains the mail user's office location.
	OfficeLocation *string `protobuf:"bytes,88,opt,name=office_location,json=officeLocation,proto3,oneof" json:"office_location,omitempty" msg:"1487331,omitempty"`  
	// Contains an identifier for the mail user used within the mail user's organization.
	OrganizationalIdNumber *string `protobuf:"bytes,89,opt,name=organizational_id_number,json=organizationalIdNumber,proto3,oneof" json:"organizational_id_number,omitempty" msg:"1486431,omitempty"`  
	// Contains the display name of the sender of the original message referenced by a report message.
	OriginalAuthorName *string `protobuf:"bytes,91,opt,name=original_author_name,json=originalAuthorName,proto3,oneof" json:"original_author_name,omitempty" msg:"7731,omitempty"`  
	// Contains the delivery time, in UTC, from the original message.
	OriginalDeliveryTime *int64 `protobuf:"varint,92,opt,name=original_delivery_time,json=originalDeliveryTime,proto3,oneof" json:"original_delivery_time,omitempty" msg:"8564,omitempty"`  
	// Contains the value of the PidTagDisplayBcc property (section 2.674) from the original message.
	OriginalDisplayBcc *string `protobuf:"bytes,93,opt,name=original_display_bcc,json=originalDisplayBcc,proto3,oneof" json:"original_display_bcc,omitempty" msg:"11431,omitempty"`  
	// Contains the value of the PidTagDisplayCc property(section 2.675) from the original message.
	OriginalDisplayCc *string `protobuf:"bytes,94,opt,name=original_display_cc,json=originalDisplayCc,proto3,oneof" json:"original_display_cc,omitempty" msg:"11531,omitempty"`  
	// Contains the value of the PidTagDisplayTo property (section 2.678) from the original message.
	OriginalDisplayTo *string `protobuf:"bytes,95,opt,name=original_display_to,json=originalDisplayTo,proto3,oneof" json:"original_display_to,omitempty" msg:"11631,omitempty"`  
	// Designates the PidTagMessageClass property ([MS-OXCMSG] section 2.2.1.3) from the original message.
	OriginalMessageClass *string `protobuf:"bytes,97,opt,name=original_message_class,json=originalMessageClass,proto3,oneof" json:"original_message_class,omitempty" msg:"7531,omitempty"`  
	// Contains the value of the original message sender's PidTagSenderAddressType property (section 2.1000).
	OriginalSenderAddressType *string `protobuf:"bytes,98,opt,name=original_sender_address_type,json=originalSenderAddressType,proto3,oneof" json:"original_sender_address_type,omitempty" msg:"10231,omitempty"`  
	// Contains the value of the original message sender's PidTagSenderEmailAddress property (section 2.1001).
	OriginalSenderEmailAddress *string `protobuf:"bytes,99,opt,name=original_sender_email_address,json=originalSenderEmailAddress,proto3,oneof" json:"original_sender_email_address,omitempty" msg:"10331,omitempty"`  
	// Contains the value of the original message sender's PidTagSenderName property (section 2.1004), and is set on delivery report messages.
	OriginalSenderName *string `protobuf:"bytes,101,opt,name=original_sender_name,json=originalSenderName,proto3,oneof" json:"original_sender_name,omitempty" msg:"9031,omitempty"`  
	// Contains the sensitivity value of the original email message.
	OriginalSensitivity *int32 `protobuf:"varint,103,opt,name=original_sensitivity,json=originalSensitivity,proto3,oneof" json:"original_sensitivity,omitempty" msg:"463,omitempty"`  
	// Contains the address type of the end user who is represented by the original email message sender.
	OriginalSentRepresentingAddressType *string `protobuf:"bytes,104,opt,name=original_sent_representing_address_type,json=originalSentRepresentingAddressType,proto3,oneof" json:"original_sent_representing_address_type,omitempty" msg:"10431,omitempty"`  
	// Contains the email address of the end user who is represented by the original email message sender.
	OriginalSentRepresentingEmailAddress *string `protobuf:"bytes,105,opt,name=original_sent_representing_email_address,json=originalSentRepresentingEmailAddress,proto3,oneof" json:"original_sent_representing_email_address,omitempty" msg:"10531,omitempty"`  
	// Contains the display name of the end user who is represented by the original email message sender.
	OriginalSentRepresentingName *string `protobuf:"bytes,107,opt,name=original_sent_representing_name,json=originalSentRepresentingName,proto3,oneof" json:"original_sent_representing_name,omitempty" msg:"9331,omitempty"`  
	// Specifies the subject of the original message.
	OriginalSubject *string `protobuf:"bytes,109,opt,name=original_subject,json=originalSubject,proto3,oneof" json:"original_subject,omitempty" msg:"7331,omitempty"`  
	// Specifies the original email message's submission date and time, in UTC.
	OriginalSubmitTime *int64 `protobuf:"varint,110,opt,name=original_submit_time,json=originalSubmitTime,proto3,oneof" json:"original_submit_time,omitempty" msg:"7864,omitempty"`  
	// Indicates whether an email sender requests an email delivery receipt from the messaging system.
	OriginatorDeliveryReportRequested *bool `protobuf:"varint,111,opt,name=originator_delivery_report_requested,json=originatorDeliveryReportRequested,proto3,oneof" json:"originator_delivery_report_requested,omitempty" msg:"3511,omitempty"`  
	// Specifies whether an email sender requests suppression of nondelivery receipts.
	OriginatorNonDeliveryReportRequested *bool `protobuf:"varint,112,opt,name=originator_non_delivery_report_requested,json=originatorNonDeliveryReportRequested,proto3,oneof" json:"originator_non_delivery_report_requested,omitempty" msg:"308011,omitempty"`  
	// Contains the name of the mail user's other locality, such as the town or city.
	OtherAddressCity *string `protobuf:"bytes,113,opt,name=other_address_city,json=otherAddressCity,proto3,oneof" json:"other_address_city,omitempty" msg:"1494331,omitempty"`  
	// Contains the name of the mail user's other country/region.
	OtherAddressCountry *string `protobuf:"bytes,114,opt,name=other_address_country,json=otherAddressCountry,proto3,oneof" json:"other_address_country,omitempty" msg:"1494431,omitempty"`  
	// Contains the postal code for the mail user's other postal address.
	OtherAddressPostalCode *string `protobuf:"bytes,115,opt,name=other_address_postal_code,json=otherAddressPostalCode,proto3,oneof" json:"other_address_postal_code,omitempty" msg:"1494531,omitempty"`  
	// Contains the number or identifier of the mail user's other post office box.
	OtherAddressPostOfficeBox *string `protobuf:"bytes,116,opt,name=other_address_post_office_box,json=otherAddressPostOfficeBox,proto3,oneof" json:"other_address_post_office_box,omitempty" msg:"1494831,omitempty"`  
	// Contains the name of the mail user's other state or province.
	OtherAddressStateOrProvince *string `protobuf:"bytes,117,opt,name=other_address_state_or_province,json=otherAddressStateOrProvince,proto3,oneof" json:"other_address_state_or_province,omitempty" msg:"1494631,omitempty"`  
	// Contains the mail user's other street address.
	OtherAddressStreet *string `protobuf:"bytes,118,opt,name=other_address_street,json=otherAddressStreet,proto3,oneof" json:"other_address_street,omitempty" msg:"1494731,omitempty"`  
	// Contains an alternate telephone number for the mail user.
	OtherTelephoneNumber *string `protobuf:"bytes,119,opt,name=other_telephone_number,json=otherTelephoneNumber,proto3,oneof" json:"other_telephone_number,omitempty" msg:"1487931,omitempty"`  
	// Contains the mail user's pager telephone number.
	PagerTelephoneNumber *string `protobuf:"bytes,120,opt,name=pager_telephone_number,json=pagerTelephoneNumber,proto3,oneof" json:"pager_telephone_number,omitempty" msg:"1488131,omitempty"`  
	// Indicates the client's request for the priority with which the message is to be sent by the messaging system.
	Priority *int32 `protobuf:"varint,122,opt,name=priority,proto3,oneof" json:"priority,omitempty" msg:"383,omitempty"`  
	// Specifies whether the email sender requests a read receipt from all recipients when this email message is read or opened.
	ReadReceiptRequested *bool `protobuf:"varint,123,opt,name=read_receipt_requested,json=readReceiptRequested,proto3,oneof" json:"read_receipt_requested,omitempty" msg:"4111,omitempty"`  
	// Contains the sent time for a message disposition notification, as specified in [RFC3798].
	ReceiptTime *int64 `protobuf:"varint,124,opt,name=receipt_time,json=receiptTime,proto3,oneof" json:"receipt_time,omitempty" msg:"4264,omitempty"`  
	// Contains the email message receiver's email address.
	ReceivedByEmailAddress *string `protobuf:"bytes,125,opt,name=received_by_email_address,json=receivedByEmailAddress,proto3,oneof" json:"received_by_email_address,omitempty" msg:"11831,omitempty"`  
	// Contains the email message receiver's display name.
	ReceivedByName *string `protobuf:"bytes,127,opt,name=received_by_name,json=receivedByName,proto3,oneof" json:"received_by_name,omitempty" msg:"6431,omitempty"`  
	// Contains the email address type for the end user represented by the receiving mailbox owner.
	ReceivedRepresentingAddressType *string `protobuf:"bytes,129,opt,name=received_representing_address_type,json=receivedRepresentingAddressType,proto3,oneof" json:"received_representing_address_type,omitempty" msg:"11931,omitempty"`  
	// Contains the email address for the end user represented by the receiving mailbox owner.
	ReceivedRepresentingEmailAddress *string `protobuf:"bytes,130,opt,name=received_representing_email_address,json=receivedRepresentingEmailAddress,proto3,oneof" json:"received_representing_email_address,omitempty" msg:"12031,omitempty"`  
	// Contains the display name for the end user represented by the receiving mailbox owner.
	ReceivedRepresentingName *string `protobuf:"bytes,132,opt,name=received_representing_name,json=receivedRepresentingName,proto3,oneof" json:"received_representing_name,omitempty" msg:"6831,omitempty"`  
	// Represents the recipient type of a recipient on the message.
	RecipientType *int32 `protobuf:"varint,134,opt,name=recipient_type,json=recipientType,proto3,oneof" json:"recipient_type,omitempty" msg:"30933,omitempty"`  
	// Contains the value of the Remote-MTA field for a delivery status notification, as specified in [RFC3464].
	RemoteMessageTransferAgent *string `protobuf:"bytes,135,opt,name=remote_message_transfer_agent,json=remoteMessageTransferAgent,proto3,oneof" json:"remote_message_transfer_agent,omitempty" msg:"310531,omitempty"`  
	// Indicates whether a reply is requested to a Message object.
	ReplyRequested *bool `protobuf:"varint,136,opt,name=reply_requested,json=replyRequested,proto3,oneof" json:"reply_requested,omitempty" msg:"309511,omitempty"`  
	// Contains a string indicating whether the original message was displayed to the user or deleted (report messages only).
	ReportDisposition *string `protobuf:"bytes,137,opt,name=report_disposition,json=reportDisposition,proto3,oneof" json:"report_disposition,omitempty" msg:"12831,omitempty"`  
	// Contains a description of the action that a client has performed on behalf of a user (report messages only).
	ReportDispositionMode *string `protobuf:"bytes,138,opt,name=report_disposition_mode,json=reportDispositionMode,proto3,oneof" json:"report_disposition_mode,omitempty" msg:"12931,omitempty"`  
	// Contains the value of the Reporting-MTA field for a delivery status notification, as specified in [RFC3464].
	ReportingMessageTransferAgent *string `protobuf:"bytes,139,opt,name=reporting_message_transfer_agent,json=reportingMessageTransferAgent,proto3,oneof" json:"reporting_message_transfer_agent,omitempty" msg:"2665631,omitempty"`  
	// Specifies the date, in UTC, after which a Message object is expired by the server.
	RetentionDate *int64 `protobuf:"varint,140,opt,name=retention_date,json=retentionDate,proto3,oneof" json:"retention_date,omitempty" msg:"1231664,omitempty"`  
	// Contains flags that specify the status or nature of an item's retention tag or archive tag.
	RetentionFlags *int32 `protobuf:"varint,141,opt,name=retention_flags,json=retentionFlags,proto3,oneof" json:"retention_flags,omitempty" msg:"123173,omitempty"`  
	// Specifies the number of days that a Message object can remain unarchived.
	RetentionPeriod *int32 `protobuf:"varint,142,opt,name=retention_period,json=retentionPeriod,proto3,oneof" json:"retention_period,omitempty" msg:"123143,omitempty"`  
	// Indicates whether the PidTagBody property (section 2.618) and the PidTagRtfCompressed property (section 2.941) contain the same text (ignoring formatting).
	RtfInSync *bool `protobuf:"varint,144,opt,name=rtf_in_sync,json=rtfInSync,proto3,oneof" json:"rtf_in_sync,omitempty" msg:"361511,omitempty"`  
	// Contains the email address type of the sending mailbox owner.
	SenderAddressType *string `protobuf:"bytes,145,opt,name=sender_address_type,json=senderAddressType,proto3,oneof" json:"sender_address_type,omitempty" msg:"310231,omitempty"`  
	// Contains the email address of the sending mailbox owner.
	SenderEmailAddress *string `protobuf:"bytes,146,opt,name=sender_email_address,json=senderEmailAddress,proto3,oneof" json:"sender_email_address,omitempty" msg:"310331,omitempty"`  
	// Reports the results of a Sender-ID check.
	SenderIdStatus *int32 `protobuf:"varint,148,opt,name=sender_id_status,json=senderIdStatus,proto3,oneof" json:"sender_id_status,omitempty" msg:"165053,omitempty"`  
	// Contains the display name of the sending mailbox owner.
	SenderName *string `protobuf:"bytes,149,opt,name=sender_name,json=senderName,proto3,oneof" json:"sender_name,omitempty" msg:"309831,omitempty"`  
	// Contains a bitmask of message encoding preferences for email sent to an email-enabled entity that is represented by this Address Book object.
	SendInternetEncoding *int32 `protobuf:"varint,151,opt,name=send_internet_encoding,json=sendInternetEncoding,proto3,oneof" json:"send_internet_encoding,omitempty" msg:"149613,omitempty"`  
	// Indicates whether the email-enabled entity represented by the Address Book object can receive all message content, including Rich Text Format (RTF) and other embedded objects.
	SendRichInfo *bool `protobuf:"varint,152,opt,name=send_rich_info,json=sendRichInfo,proto3,oneof" json:"send_rich_info,omitempty" msg:"1491211,omitempty"`  
	// Indicates the sender's assessment of the sensitivity of the Message object.
	Sensitivity *int32 `protobuf:"varint,153,opt,name=sensitivity,proto3,oneof" json:"sensitivity,omitempty" msg:"543,omitempty"`  
	// Contains an email address type.
	SentRepresentingAddressType *string `protobuf:"bytes,154,opt,name=sent_representing_address_type,json=sentRepresentingAddressType,proto3,oneof" json:"sent_representing_address_type,omitempty" msg:"10031,omitempty"`  
	// Contains an email address for the end user who is represented by the sending mailbox owner.
	SentRepresentingEmailAddress *string `protobuf:"bytes,155,opt,name=sent_representing_email_address,json=sentRepresentingEmailAddress,proto3,oneof" json:"sent_representing_email_address,omitempty" msg:"10131,omitempty"`  
	// Contains the display name for the end user who is represented by the sending mailbox owner.
	SentRepresentingName *string `protobuf:"bytes,157,opt,name=sent_representing_name,json=sentRepresentingName,proto3,oneof" json:"sent_representing_name,omitempty" msg:"6631,omitempty"`  
	// Contains the SMTP address of the Message object.
	SmtpAddress *string `protobuf:"bytes,159,opt,name=smtp_address,json=smtpAddress,proto3,oneof" json:"smtp_address,omitempty" msg:"1484631,omitempty"`  
	// Contains the subject of the email message.
	Subject *string `protobuf:"bytes,161,opt,name=subject,proto3,oneof" json:"subject,omitempty" msg:"5531,omitempty"`  
	// Contains the prefix for the subject of the message.
	SubjectPrefix *string `protobuf:"bytes,162,opt,name=subject_prefix,json=subjectPrefix,proto3,oneof" json:"subject_prefix,omitempty" msg:"6131,omitempty"`  
	// Contains supplementary information about a delivery status notification, as specified in [RFC3464].
	SupplementaryInfo *string `protobuf:"bytes,163,opt,name=supplementary_info,json=supplementaryInfo,proto3,oneof" json:"supplementary_info,omitempty" msg:"309931,omitempty"`  
	// Contains an Address Book object's display name that is transmitted with the message.
	TransmittableDisplayName *string `protobuf:"bytes,164,opt,name=transmittable_display_name,json=transmittableDisplayName,proto3,oneof" json:"transmittable_display_name,omitempty" msg:"1488031,omitempty"`  
	// Contains transport-specific message envelope information for email.
	TransportMessageHeaders *string `protobuf:"bytes,165,opt,name=transport_message_headers,json=transportMessageHeaders,proto3,oneof" json:"transport_message_headers,omitempty" msg:"12531,omitempty"`  
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetAutoProcessState() int32 {
	if x != nil && x.AutoProcessState != nil {
		return *x.AutoProcessState
	}
	return 0
}

func (x *Message) GetBilling() string {
	if x != nil && x.Billing != nil {
		return *x.Billing
	}
	return ""
}

func (x *Message) GetClassification() string {
	if x != nil && x.Classification != nil {
		return *x.Classification
	}
	return ""
}

func (x *Message) GetClassificationDescription() string {
	if x != nil && x.ClassificationDescription != nil {
		return *x.ClassificationDescription
	}
	return ""
}

func (x *Message) GetClassificationGuid() string {
	if x != nil && x.ClassificationGuid != nil {
		return *x.ClassificationGuid
	}
	return ""
}

func (x *Message) GetClassificationKeep() bool {
	if x != nil && x.ClassificationKeep != nil {
		return *x.ClassificationKeep
	}
	return false
}

func (x *Message) GetClassified() bool {
	if x != nil && x.Classified != nil {
		return *x.Classified
	}
	return false
}

func (x *Message) GetCommonEnd() int64 {
	if x != nil && x.CommonEnd != nil {
		return *x.CommonEnd
	}
	return 0
}

func (x *Message) GetCommonStart() int64 {
	if x != nil && x.CommonStart != nil {
		return *x.CommonStart
	}
	return 0
}

func (x *Message) GetCurrentVersion() int32 {
	if x != nil && x.CurrentVersion != nil {
		return *x.CurrentVersion
	}
	return 0
}

func (x *Message) GetCurrentVersionName() string {
	if x != nil && x.CurrentVersionName != nil {
		return *x.CurrentVersionName
	}
	return ""
}

func (x *Message) GetInternetAccountName() string {
	if x != nil && x.InternetAccountName != nil {
		return *x.InternetAccountName
	}
	return ""
}

func (x *Message) GetInternetAccountStamp() string {
	if x != nil && x.InternetAccountStamp != nil {
		return *x.InternetAccountStamp
	}
	return ""
}

func (x *Message) GetPrivate() bool {
	if x != nil && x.Private != nil {
		return *x.Private
	}
	return false
}

func (x *Message) GetVerbResponse() string {
	if x != nil && x.VerbResponse != nil {
		return *x.VerbResponse
	}
	return ""
}

func (x *Message) GetAcceptLanguage() string {
	if x != nil && x.AcceptLanguage != nil {
		return *x.AcceptLanguage
	}
	return ""
}

func (x *Message) GetContentBase() string {
	if x != nil && x.ContentBase != nil {
		return *x.ContentBase
	}
	return ""
}

func (x *Message) GetContentClass() string {
	if x != nil && x.ContentClass != nil {
		return *x.ContentClass
	}
	return ""
}

func (x *Message) GetContentType() string {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return ""
}

func (x *Message) GetCrossReference() string {
	if x != nil && x.CrossReference != nil {
		return *x.CrossReference
	}
	return ""
}

func (x *Message) GetExchangeJunkEmailMoveStamp() int32 {
	if x != nil && x.ExchangeJunkEmailMoveStamp != nil {
		return *x.ExchangeJunkEmailMoveStamp
	}
	return 0
}

func (x *Message) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *Message) GetInternetSubject() string {
	if x != nil && x.InternetSubject != nil {
		return *x.InternetSubject
	}
	return ""
}

func (x *Message) GetMsipLabels() string {
	if x != nil && x.MsipLabels != nil {
		return *x.MsipLabels
	}
	return ""
}

func (x *Message) GetPhishingStamp() int32 {
	if x != nil && x.PhishingStamp != nil {
		return *x.PhishingStamp
	}
	return 0
}

func (x *Message) GetAddressType() string {
	if x != nil && x.AddressType != nil {
		return *x.AddressType
	}
	return ""
}

func (x *Message) GetAlternateRecipientAllowed() bool {
	if x != nil && x.AlternateRecipientAllowed != nil {
		return *x.AlternateRecipientAllowed
	}
	return false
}

func (x *Message) GetArchiveDate() int64 {
	if x != nil && x.ArchiveDate != nil {
		return *x.ArchiveDate
	}
	return 0
}

func (x *Message) GetArchivePeriod() int32 {
	if x != nil && x.ArchivePeriod != nil {
		return *x.ArchivePeriod
	}
	return 0
}

func (x *Message) GetAssistant() string {
	if x != nil && x.Assistant != nil {
		return *x.Assistant
	}
	return ""
}

func (x *Message) GetAssistantTelephoneNumber() string {
	if x != nil && x.AssistantTelephoneNumber != nil {
		return *x.AssistantTelephoneNumber
	}
	return ""
}

func (x *Message) GetAutoResponseSuppress() int32 {
	if x != nil && x.AutoResponseSuppress != nil {
		return *x.AutoResponseSuppress
	}
	return 0
}

func (x *Message) GetBlockStatus() int32 {
	if x != nil && x.BlockStatus != nil {
		return *x.BlockStatus
	}
	return 0
}

func (x *Message) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *Message) GetBodyContentLocation() string {
	if x != nil && x.BodyContentLocation != nil {
		return *x.BodyContentLocation
	}
	return ""
}

func (x *Message) GetBodyHtml() string {
	if x != nil && x.BodyHtml != nil {
		return *x.BodyHtml
	}
	return ""
}

func (x *Message) GetClientSubmitTime() int64 {
	if x != nil && x.ClientSubmitTime != nil {
		return *x.ClientSubmitTime
	}
	return 0
}

func (x *Message) GetContentFilterSpamConfidenceLevel() int32 {
	if x != nil && x.ContentFilterSpamConfidenceLevel != nil {
		return *x.ContentFilterSpamConfidenceLevel
	}
	return 0
}

func (x *Message) GetConversationTopic() string {
	if x != nil && x.ConversationTopic != nil {
		return *x.ConversationTopic
	}
	return ""
}

func (x *Message) GetCreationTime() int64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *Message) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *Message) GetDeliverTime() int64 {
	if x != nil && x.DeliverTime != nil {
		return *x.DeliverTime
	}
	return 0
}

func (x *Message) GetDisplayBcc() string {
	if x != nil && x.DisplayBcc != nil {
		return *x.DisplayBcc
	}
	return ""
}

func (x *Message) GetDisplayCc() string {
	if x != nil && x.DisplayCc != nil {
		return *x.DisplayCc
	}
	return ""
}

func (x *Message) GetDisplayTo() string {
	if x != nil && x.DisplayTo != nil {
		return *x.DisplayTo
	}
	return ""
}

func (x *Message) GetIconIndex() int32 {
	if x != nil && x.IconIndex != nil {
		return *x.IconIndex
	}
	return 0
}

func (x *Message) GetImportance() int32 {
	if x != nil && x.Importance != nil {
		return *x.Importance
	}
	return 0
}

func (x *Message) GetInitials() string {
	if x != nil && x.Initials != nil {
		return *x.Initials
	}
	return ""
}

func (x *Message) GetInReplyToId() string {
	if x != nil && x.InReplyToId != nil {
		return *x.InReplyToId
	}
	return ""
}

func (x *Message) GetInternetMailOverrideFormat() int32 {
	if x != nil && x.InternetMailOverrideFormat != nil {
		return *x.InternetMailOverrideFormat
	}
	return 0
}

func (x *Message) GetInternetMessageId() string {
	if x != nil && x.InternetMessageId != nil {
		return *x.InternetMessageId
	}
	return ""
}

func (x *Message) GetInternetReferences() string {
	if x != nil && x.InternetReferences != nil {
		return *x.InternetReferences
	}
	return ""
}

func (x *Message) GetIsdnNumber() string {
	if x != nil && x.IsdnNumber != nil {
		return *x.IsdnNumber
	}
	return ""
}

func (x *Message) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *Message) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *Message) GetLastModificationTime() int64 {
	if x != nil && x.LastModificationTime != nil {
		return *x.LastModificationTime
	}
	return 0
}

func (x *Message) GetLocality() string {
	if x != nil && x.Locality != nil {
		return *x.Locality
	}
	return ""
}

func (x *Message) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *Message) GetManagerName() string {
	if x != nil && x.ManagerName != nil {
		return *x.ManagerName
	}
	return ""
}

func (x *Message) GetMessageCcMe() bool {
	if x != nil && x.MessageCcMe != nil {
		return *x.MessageCcMe
	}
	return false
}

func (x *Message) GetMessageDeliveryTime() int64 {
	if x != nil && x.MessageDeliveryTime != nil {
		return *x.MessageDeliveryTime
	}
	return 0
}

func (x *Message) GetMessageFlags() int32 {
	if x != nil && x.MessageFlags != nil {
		return *x.MessageFlags
	}
	return 0
}

func (x *Message) GetMessageHandlingSystemCommonName() string {
	if x != nil && x.MessageHandlingSystemCommonName != nil {
		return *x.MessageHandlingSystemCommonName
	}
	return ""
}

func (x *Message) GetMessageRecipientMe() bool {
	if x != nil && x.MessageRecipientMe != nil {
		return *x.MessageRecipientMe
	}
	return false
}

func (x *Message) GetMessageSize() int32 {
	if x != nil && x.MessageSize != nil {
		return *x.MessageSize
	}
	return 0
}

func (x *Message) GetMessageSizeExtended() float64 {
	if x != nil && x.MessageSizeExtended != nil {
		return *x.MessageSizeExtended
	}
	return 0
}

func (x *Message) GetMessageStatus() int32 {
	if x != nil && x.MessageStatus != nil {
		return *x.MessageStatus
	}
	return 0
}

func (x *Message) GetMessageToMe() bool {
	if x != nil && x.MessageToMe != nil {
		return *x.MessageToMe
	}
	return false
}

func (x *Message) GetMiddleName() string {
	if x != nil && x.MiddleName != nil {
		return *x.MiddleName
	}
	return ""
}

func (x *Message) GetMobileTelephoneNumber() string {
	if x != nil && x.MobileTelephoneNumber != nil {
		return *x.MobileTelephoneNumber
	}
	return ""
}

func (x *Message) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *Message) GetNonDeliveryReportDiagCode() int32 {
	if x != nil && x.NonDeliveryReportDiagCode != nil {
		return *x.NonDeliveryReportDiagCode
	}
	return 0
}

func (x *Message) GetNonDeliveryReportReasonCode() int32 {
	if x != nil && x.NonDeliveryReportReasonCode != nil {
		return *x.NonDeliveryReportReasonCode
	}
	return 0
}

func (x *Message) GetNonDeliveryReportStatusCode() int32 {
	if x != nil && x.NonDeliveryReportStatusCode != nil {
		return *x.NonDeliveryReportStatusCode
	}
	return 0
}

func (x *Message) GetNormalizedSubject() string {
	if x != nil && x.NormalizedSubject != nil {
		return *x.NormalizedSubject
	}
	return ""
}

func (x *Message) GetOfficeLocation() string {
	if x != nil && x.OfficeLocation != nil {
		return *x.OfficeLocation
	}
	return ""
}

func (x *Message) GetOrganizationalIdNumber() string {
	if x != nil && x.OrganizationalIdNumber != nil {
		return *x.OrganizationalIdNumber
	}
	return ""
}

func (x *Message) GetOriginalAuthorName() string {
	if x != nil && x.OriginalAuthorName != nil {
		return *x.OriginalAuthorName
	}
	return ""
}

func (x *Message) GetOriginalDeliveryTime() int64 {
	if x != nil && x.OriginalDeliveryTime != nil {
		return *x.OriginalDeliveryTime
	}
	return 0
}

func (x *Message) GetOriginalDisplayBcc() string {
	if x != nil && x.OriginalDisplayBcc != nil {
		return *x.OriginalDisplayBcc
	}
	return ""
}

func (x *Message) GetOriginalDisplayCc() string {
	if x != nil && x.OriginalDisplayCc != nil {
		return *x.OriginalDisplayCc
	}
	return ""
}

func (x *Message) GetOriginalDisplayTo() string {
	if x != nil && x.OriginalDisplayTo != nil {
		return *x.OriginalDisplayTo
	}
	return ""
}

func (x *Message) GetOriginalMessageClass() string {
	if x != nil && x.OriginalMessageClass != nil {
		return *x.OriginalMessageClass
	}
	return ""
}

func (x *Message) GetOriginalSenderAddressType() string {
	if x != nil && x.OriginalSenderAddressType != nil {
		return *x.OriginalSenderAddressType
	}
	return ""
}

func (x *Message) GetOriginalSenderEmailAddress() string {
	if x != nil && x.OriginalSenderEmailAddress != nil {
		return *x.OriginalSenderEmailAddress
	}
	return ""
}

func (x *Message) GetOriginalSenderName() string {
	if x != nil && x.OriginalSenderName != nil {
		return *x.OriginalSenderName
	}
	return ""
}

func (x *Message) GetOriginalSensitivity() int32 {
	if x != nil && x.OriginalSensitivity != nil {
		return *x.OriginalSensitivity
	}
	return 0
}

func (x *Message) GetOriginalSentRepresentingAddressType() string {
	if x != nil && x.OriginalSentRepresentingAddressType != nil {
		return *x.OriginalSentRepresentingAddressType
	}
	return ""
}

func (x *Message) GetOriginalSentRepresentingEmailAddress() string {
	if x != nil && x.OriginalSentRepresentingEmailAddress != nil {
		return *x.OriginalSentRepresentingEmailAddress
	}
	return ""
}

func (x *Message) GetOriginalSentRepresentingName() string {
	if x != nil && x.OriginalSentRepresentingName != nil {
		return *x.OriginalSentRepresentingName
	}
	return ""
}

func (x *Message) GetOriginalSubject() string {
	if x != nil && x.OriginalSubject != nil {
		return *x.OriginalSubject
	}
	return ""
}

func (x *Message) GetOriginalSubmitTime() int64 {
	if x != nil && x.OriginalSubmitTime != nil {
		return *x.OriginalSubmitTime
	}
	return 0
}

func (x *Message) GetOriginatorDeliveryReportRequested() bool {
	if x != nil && x.OriginatorDeliveryReportRequested != nil {
		return *x.OriginatorDeliveryReportRequested
	}
	return false
}

func (x *Message) GetOriginatorNonDeliveryReportRequested() bool {
	if x != nil && x.OriginatorNonDeliveryReportRequested != nil {
		return *x.OriginatorNonDeliveryReportRequested
	}
	return false
}

func (x *Message) GetOtherAddressCity() string {
	if x != nil && x.OtherAddressCity != nil {
		return *x.OtherAddressCity
	}
	return ""
}

func (x *Message) GetOtherAddressCountry() string {
	if x != nil && x.OtherAddressCountry != nil {
		return *x.OtherAddressCountry
	}
	return ""
}

func (x *Message) GetOtherAddressPostalCode() string {
	if x != nil && x.OtherAddressPostalCode != nil {
		return *x.OtherAddressPostalCode
	}
	return ""
}

func (x *Message) GetOtherAddressPostOfficeBox() string {
	if x != nil && x.OtherAddressPostOfficeBox != nil {
		return *x.OtherAddressPostOfficeBox
	}
	return ""
}

func (x *Message) GetOtherAddressStateOrProvince() string {
	if x != nil && x.OtherAddressStateOrProvince != nil {
		return *x.OtherAddressStateOrProvince
	}
	return ""
}

func (x *Message) GetOtherAddressStreet() string {
	if x != nil && x.OtherAddressStreet != nil {
		return *x.OtherAddressStreet
	}
	return ""
}

func (x *Message) GetOtherTelephoneNumber() string {
	if x != nil && x.OtherTelephoneNumber != nil {
		return *x.OtherTelephoneNumber
	}
	return ""
}

func (x *Message) GetPagerTelephoneNumber() string {
	if x != nil && x.PagerTelephoneNumber != nil {
		return *x.PagerTelephoneNumber
	}
	return ""
}

func (x *Message) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *Message) GetReadReceiptRequested() bool {
	if x != nil && x.ReadReceiptRequested != nil {
		return *x.ReadReceiptRequested
	}
	return false
}

func (x *Message) GetReceiptTime() int64 {
	if x != nil && x.ReceiptTime != nil {
		return *x.ReceiptTime
	}
	return 0
}

func (x *Message) GetReceivedByEmailAddress() string {
	if x != nil && x.ReceivedByEmailAddress != nil {
		return *x.ReceivedByEmailAddress
	}
	return ""
}

func (x *Message) GetReceivedByName() string {
	if x != nil && x.ReceivedByName != nil {
		return *x.ReceivedByName
	}
	return ""
}

func (x *Message) GetReceivedRepresentingAddressType() string {
	if x != nil && x.ReceivedRepresentingAddressType != nil {
		return *x.ReceivedRepresentingAddressType
	}
	return ""
}

func (x *Message) GetReceivedRepresentingEmailAddress() string {
	if x != nil && x.ReceivedRepresentingEmailAddress != nil {
		return *x.ReceivedRepresentingEmailAddress
	}
	return ""
}

func (x *Message) GetReceivedRepresentingName() string {
	if x != nil && x.ReceivedRepresentingName != nil {
		return *x.ReceivedRepresentingName
	}
	return ""
}

func (x *Message) GetRecipientType() int32 {
	if x != nil && x.RecipientType != nil {
		return *x.RecipientType
	}
	return 0
}

func (x *Message) GetRemoteMessageTransferAgent() string {
	if x != nil && x.RemoteMessageTransferAgent != nil {
		return *x.RemoteMessageTransferAgent
	}
	return ""
}

func (x *Message) GetReplyRequested() bool {
	if x != nil && x.ReplyRequested != nil {
		return *x.ReplyRequested
	}
	return false
}

func (x *Message) GetReportDisposition() string {
	if x != nil && x.ReportDisposition != nil {
		return *x.ReportDisposition
	}
	return ""
}

func (x *Message) GetReportDispositionMode() string {
	if x != nil && x.ReportDispositionMode != nil {
		return *x.ReportDispositionMode
	}
	return ""
}

func (x *Message) GetReportingMessageTransferAgent() string {
	if x != nil && x.ReportingMessageTransferAgent != nil {
		return *x.ReportingMessageTransferAgent
	}
	return ""
}

func (x *Message) GetRetentionDate() int64 {
	if x != nil && x.RetentionDate != nil {
		return *x.RetentionDate
	}
	return 0
}

func (x *Message) GetRetentionFlags() int32 {
	if x != nil && x.RetentionFlags != nil {
		return *x.RetentionFlags
	}
	return 0
}

func (x *Message) GetRetentionPeriod() int32 {
	if x != nil && x.RetentionPeriod != nil {
		return *x.RetentionPeriod
	}
	return 0
}

func (x *Message) GetRtfInSync() bool {
	if x != nil && x.RtfInSync != nil {
		return *x.RtfInSync
	}
	return false
}

func (x *Message) GetSenderAddressType() string {
	if x != nil && x.SenderAddressType != nil {
		return *x.SenderAddressType
	}
	return ""
}

func (x *Message) GetSenderEmailAddress() string {
	if x != nil && x.SenderEmailAddress != nil {
		return *x.SenderEmailAddress
	}
	return ""
}

func (x *Message) GetSenderIdStatus() int32 {
	if x != nil && x.SenderIdStatus != nil {
		return *x.SenderIdStatus
	}
	return 0
}

func (x *Message) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *Message) GetSendInternetEncoding() int32 {
	if x != nil && x.SendInternetEncoding != nil {
		return *x.SendInternetEncoding
	}
	return 0
}

func (x *Message) GetSendRichInfo() bool {
	if x != nil && x.SendRichInfo != nil {
		return *x.SendRichInfo
	}
	return false
}

func (x *Message) GetSensitivity() int32 {
	if x != nil && x.Sensitivity != nil {
		return *x.Sensitivity
	}
	return 0
}

func (x *Message) GetSentRepresentingAddressType() string {
	if x != nil && x.SentRepresentingAddressType != nil {
		return *x.SentRepresentingAddressType
	}
	return ""
}

func (x *Message) GetSentRepresentingEmailAddress() string {
	if x != nil && x.SentRepresentingEmailAddress != nil {
		return *x.SentRepresentingEmailAddress
	}
	return ""
}

func (x *Message) GetSentRepresentingName() string {
	if x != nil && x.SentRepresentingName != nil {
		return *x.SentRepresentingName
	}
	return ""
}

func (x *Message) GetSmtpAddress() string {
	if x != nil && x.SmtpAddress != nil {
		return *x.SmtpAddress
	}
	return ""
}

func (x *Message) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *Message) GetSubjectPrefix() string {
	if x != nil && x.SubjectPrefix != nil {
		return *x.SubjectPrefix
	}
	return ""
}

func (x *Message) GetSupplementaryInfo() string {
	if x != nil && x.SupplementaryInfo != nil {
		return *x.SupplementaryInfo
	}
	return ""
}

func (x *Message) GetTransmittableDisplayName() string {
	if x != nil && x.TransmittableDisplayName != nil {
		return *x.TransmittableDisplayName
	}
	return ""
}

func (x *Message) GetTransportMessageHeaders() string {
	if x != nil && x.TransportMessageHeaders != nil {
		return *x.TransportMessageHeaders
	}
	return ""
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xee, 0x50, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x19, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x05, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06,
	0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x14, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0c, 0x76, 0x65,
	0x72, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x10, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x0e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6a, 0x75, 0x6e, 0x6b, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x1a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x75, 0x6e, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x16, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x73, 0x69, 0x70, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0a, 0x6d, 0x73,
	0x69, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70,
	0x68, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x0d, 0x70, 0x68, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x1b, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x1a, 0x52, 0x19, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1b, 0x52, 0x0b, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1e, 0x52, 0x18, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1f,
	0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x20, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x21, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x13, 0x62, 0x6f, 0x64,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x74, 0x6d, 0x6c,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x48, 0x74,
	0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x24, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x24, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x25, 0x52, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x48, 0x27, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x28, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x48, 0x29, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x63, 0x63, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x2a, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x63, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x63, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x63, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x09, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52,
	0x09, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x2e, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0b, 0x69,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x31, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x4d, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x32, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x64, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x0a, 0x69, 0x73, 0x64, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x03, 0x48, 0x37, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x38, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x39, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3a, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x63, 0x5f, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x3b, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x63, 0x4d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x3c, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x3e, 0x52, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3f, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x40, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x41, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x42, 0x52, 0x0d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x08, 0x48, 0x43, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x4d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x48, 0x44, 0x52, 0x0a,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x17, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x48, 0x45,
	0x52, 0x15, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x48, 0x46, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x6e,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x47, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x1f, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x05, 0x48, 0x48, 0x52, 0x1b, 0x6e,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x1f, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x05, 0x48, 0x49, 0x52, 0x1b, 0x6e, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x57,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x4a, 0x52, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4c, 0x52, 0x16,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4d, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x4e, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x62, 0x63, 0x63, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4f, 0x52, 0x12, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x63, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x63, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x50, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x63, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x5f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x51, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x48, 0x52, 0x52, 0x14,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x48, 0x53, 0x52,
	0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x1d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x54, 0x52, 0x1a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x55, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x48, 0x56, 0x52, 0x13, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x27, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x09, 0x48, 0x57, 0x52, 0x23, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x5b, 0x0a, 0x28, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x58, 0x52, 0x24, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x59, 0x52, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x6d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x5a, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x5b, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x54, 0x0a, 0x24, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x5c, 0x52,
	0x21, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x28, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x08, 0x48, 0x5d, 0x52, 0x24, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5e,
	0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x5f, 0x52, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x60, 0x52, 0x16, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x1d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x18,
	0x74, 0x20, 0x01, 0x28, 0x09, 0x48, 0x61, 0x52, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x42,
	0x6f, 0x78, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x48, 0x62,
	0x52, 0x1b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x48, 0x63,
	0x52, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x48, 0x64, 0x52, 0x14, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x70, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x65, 0x52, 0x14, 0x70, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x66, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x67,
	0x52, 0x14, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x68, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x7d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x69, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6a, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x51, 0x0a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6b, 0x52,
	0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x23, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x6c, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6d, 0x52,
	0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x86,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x6f, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x70, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x71,
	0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x72, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x73, 0x52, 0x1d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x74, 0x52, 0x0d,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x75, 0x52, 0x0e, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x76, 0x52, 0x0f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x74, 0x66, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x90, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x77, 0x52, 0x09, 0x72, 0x74, 0x66, 0x49, 0x6e, 0x53,
	0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x91, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x78, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x79, 0x52, 0x12, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x7a, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7b, 0x52, 0x0a, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x16, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x7c, 0x52, 0x14,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x72, 0x69, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x7d, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x69, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x7e, 0x52, 0x0b, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x9a, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x7f, 0x52, 0x1b, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x1f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x80, 0x01, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9d,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x81, 0x01, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0c, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x82, 0x01, 0x52, 0x0b, 0x73, 0x6d, 0x74,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x83, 0x01,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xa2,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x84, 0x01, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x12, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x85, 0x01, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa4,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x86, 0x01, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x87, 0x01, 0x52, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76,
	0x65, 0x72, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6a, 0x75, 0x6e, 0x6b, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x73,
	0x69, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x68,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42,
	0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x62, 0x63, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x74, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f,
	0x69, 0x64, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x64, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x63, 0x5f, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x22, 0x0a,
	0x20, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x63, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x63, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x2b,
	0x0a, 0x29, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x42, 0x22, 0x0a, 0x20,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x25, 0x0a, 0x23, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x20, 0x0a, 0x1e,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x74, 0x66, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x22, 0x0a,
	0x20, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x6f, 0x6f, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x73, 0x74, 0x3b,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_message_proto_goTypes = []interface{}{
	(*Message)(nil), // 0: Message
}
var file_message_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
