// go-pst is a library for reading Personal Storage Table (.pst) files (written in Go/Golang).
//
// Copyright 2023 Marten Mooij
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//go:generate msgp -tests=false

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: address_book.proto

package properties

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddressBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the alias of an Address Book object, which is an alternative name by which the object can be identified.
	Account *string `protobuf:"bytes,1,opt,name=account,proto3,oneof" json:"account,omitempty" msg:"1484831,omitempty"`  
	// Contains the ID of a container on an NSPI server.
	AddressBookContainerId *int32 `protobuf:"varint,3,opt,name=address_book_container_id,json=addressBookContainerId,proto3,oneof" json:"address_book_container_id,omitempty" msg:"655333,omitempty"`  
	// Specifies the maximum size, in bytes, of a message that a recipient can receive.
	AddressBookDeliveryContentLength *int32 `protobuf:"varint,4,opt,name=address_book_delivery_content_length,json=addressBookDeliveryContentLength,proto3,oneof" json:"address_book_delivery_content_length,omitempty" msg:"328743,omitempty"`  
	// Contains the printable string version of the display name.
	AddressBookDisplayNamePrintable *string `protobuf:"bytes,5,opt,name=address_book_display_name_printable,json=addressBookDisplayNamePrintable,proto3,oneof" json:"address_book_display_name_printable,omitempty" msg:"1484731,omitempty"`  
	// Contains a value that indicates how to display an Address Book object in a table or as a recipient on a message.
	AddressBookDisplayTypeExtended *int32 `protobuf:"varint,6,opt,name=address_book_display_type_extended,json=addressBookDisplayTypeExtended,proto3,oneof" json:"address_book_display_type_extended,omitempty" msg:"359873,omitempty"`  
	// Contains the number of external recipients in the distribution list.
	AddressBookDistributionListExternalMemberCount *int32 `protobuf:"varint,7,opt,name=address_book_distribution_list_external_member_count,json=addressBookDistributionListExternalMemberCount,proto3,oneof" json:"address_book_distribution_list_external_member_count,omitempty" msg:"360673,omitempty"`  
	// Contains the total number of recipients in the distribution list.
	AddressBookDistributionListMemberCount *int32 `protobuf:"varint,8,opt,name=address_book_distribution_list_member_count,json=addressBookDistributionListMemberCount,proto3,oneof" json:"address_book_distribution_list_member_count,omitempty" msg:"360663,omitempty"`  
	// Contains the name-service EntryID of a directory object that refers to a public folder.
	AddressBookEntryId []byte `protobuf:"bytes,11,opt,name=address_book_entry_id,json=addressBookEntryId,proto3,oneof" json:"address_book_entry_id,omitempty" msg:"26171258,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute1 *string `protobuf:"bytes,12,opt,name=address_book_extension_attribute1,json=addressBookExtensionAttribute1,proto3,oneof" json:"address_book_extension_attribute1,omitempty" msg:"3281331,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute10 *string `protobuf:"bytes,13,opt,name=address_book_extension_attribute10,json=addressBookExtensionAttribute10,proto3,oneof" json:"address_book_extension_attribute10,omitempty" msg:"3282231,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute11 *string `protobuf:"bytes,14,opt,name=address_book_extension_attribute11,json=addressBookExtensionAttribute11,proto3,oneof" json:"address_book_extension_attribute11,omitempty" msg:"3592731,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute12 *string `protobuf:"bytes,15,opt,name=address_book_extension_attribute12,json=addressBookExtensionAttribute12,proto3,oneof" json:"address_book_extension_attribute12,omitempty" msg:"3592831,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute13 *string `protobuf:"bytes,16,opt,name=address_book_extension_attribute13,json=addressBookExtensionAttribute13,proto3,oneof" json:"address_book_extension_attribute13,omitempty" msg:"3592931,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute14 *string `protobuf:"bytes,17,opt,name=address_book_extension_attribute14,json=addressBookExtensionAttribute14,proto3,oneof" json:"address_book_extension_attribute14,omitempty" msg:"3593631,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute15 *string `protobuf:"bytes,18,opt,name=address_book_extension_attribute15,json=addressBookExtensionAttribute15,proto3,oneof" json:"address_book_extension_attribute15,omitempty" msg:"3593731,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute2 *string `protobuf:"bytes,19,opt,name=address_book_extension_attribute2,json=addressBookExtensionAttribute2,proto3,oneof" json:"address_book_extension_attribute2,omitempty" msg:"3281431,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute3 *string `protobuf:"bytes,20,opt,name=address_book_extension_attribute3,json=addressBookExtensionAttribute3,proto3,oneof" json:"address_book_extension_attribute3,omitempty" msg:"3281531,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute4 *string `protobuf:"bytes,21,opt,name=address_book_extension_attribute4,json=addressBookExtensionAttribute4,proto3,oneof" json:"address_book_extension_attribute4,omitempty" msg:"3281631,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute5 *string `protobuf:"bytes,22,opt,name=address_book_extension_attribute5,json=addressBookExtensionAttribute5,proto3,oneof" json:"address_book_extension_attribute5,omitempty" msg:"3281731,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute6 *string `protobuf:"bytes,23,opt,name=address_book_extension_attribute6,json=addressBookExtensionAttribute6,proto3,oneof" json:"address_book_extension_attribute6,omitempty" msg:"3281831,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute7 *string `protobuf:"bytes,24,opt,name=address_book_extension_attribute7,json=addressBookExtensionAttribute7,proto3,oneof" json:"address_book_extension_attribute7,omitempty" msg:"3281931,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute8 *string `protobuf:"bytes,25,opt,name=address_book_extension_attribute8,json=addressBookExtensionAttribute8,proto3,oneof" json:"address_book_extension_attribute8,omitempty" msg:"3282031,omitempty"`  
	// Contains custom values defined and populated by the organization that modified the display templates.
	AddressBookExtensionAttribute9 *string `protobuf:"bytes,26,opt,name=address_book_extension_attribute9,json=addressBookExtensionAttribute9,proto3,oneof" json:"address_book_extension_attribute9,omitempty" msg:"3282131,omitempty"`  
	// This property is deprecated and is to be ignored.
	AddressBookFolderPathname *string `protobuf:"bytes,27,opt,name=address_book_folder_pathname,json=addressBookFolderPathname,proto3,oneof" json:"address_book_folder_pathname,omitempty" msg:"3277231,omitempty"`  
	// Indicates whether the distribution list represents a departmental group.
	AddressBookHierarchicalIsHierarchicalGroup *bool `protobuf:"varint,30,opt,name=address_book_hierarchical_is_hierarchical_group,json=addressBookHierarchicalIsHierarchicalGroup,proto3,oneof" json:"address_book_hierarchical_is_hierarchical_group,omitempty" msg:"3606111,omitempty"`  
	// Contains the distinguished name (DN) of either the root Department object or the root departmental group in the department hierarchy for the organization.
	AddressBookHierarchicalRootDepartment *string `protobuf:"bytes,32,opt,name=address_book_hierarchical_root_department,json=addressBookHierarchicalRootDepartment,proto3,oneof" json:"address_book_hierarchical_root_department,omitempty" msg:"3599230,omitempty"`  
	// Contains the DN expressed in the X500 DN format. This property is returned from a name service provider interface (NSPI) server as a PtypEmbeddedTable. Otherwise, the data type is PtypString8.
	AddressBookHomeMessageDatabase *string `protobuf:"bytes,34,opt,name=address_book_home_message_database,json=addressBookHomeMessageDatabase,proto3,oneof" json:"address_book_home_message_database,omitempty" msg:"3277430,omitempty"`  
	// Contains a Boolean value of TRUE if it is possible to create Address Book objects in that container, and FALSE otherwise.
	AddressBookIsMaster *bool `protobuf:"varint,35,opt,name=address_book_is_master,json=addressBookIsMaster,proto3,oneof" json:"address_book_is_master,omitempty" msg:"6553111,omitempty"`  
	// Lists all of the distribution lists for which the object is a member. This property is returned from an NSPI server as a PtypEmbeddedTable. Otherwise, the data type is PtypString8.
	AddressBookIsMemberOfDistributionList *string `protobuf:"bytes,36,opt,name=address_book_is_member_of_distribution_list,json=addressBookIsMemberOfDistributionList,proto3,oneof" json:"address_book_is_member_of_distribution_list,omitempty" msg:"3277630,omitempty"`  
	// Contains the DN of the mail user's manager.
	AddressBookManagerDistinguishedName *string `protobuf:"bytes,39,opt,name=address_book_manager_distinguished_name,json=addressBookManagerDistinguishedName,proto3,oneof" json:"address_book_manager_distinguished_name,omitempty" msg:"3277331,omitempty"`  
	// Indicates whether moderation is enabled for the mail user or distribution list.
	AddressBookModerationEnabled *bool `protobuf:"varint,41,opt,name=address_book_moderation_enabled,json=addressBookModerationEnabled,proto3,oneof" json:"address_book_moderation_enabled,omitempty" msg:"3602111,omitempty"`  
	// Contains the DN of the Address Book object.
	AddressBookObjectDistinguishedName *string `protobuf:"bytes,43,opt,name=address_book_object_distinguished_name,json=addressBookObjectDistinguishedName,proto3,oneof" json:"address_book_object_distinguished_name,omitempty" msg:"3282831,omitempty"`  
	// Contains a GUID that identifies an Address Book object.
	AddressBookObjectGuid []byte `protobuf:"bytes,44,opt,name=address_book_object_guid,json=addressBookObjectGuid,proto3,oneof" json:"address_book_object_guid,omitempty" msg:"35949258,omitempty"`  
	// Contains the DN of the Organization object of the mail user's organization.
	AddressBookOrganizationalUnitRootDistinguishedName *string `protobuf:"bytes,45,opt,name=address_book_organizational_unit_root_distinguished_name,json=addressBookOrganizationalUnitRootDistinguishedName,proto3,oneof" json:"address_book_organizational_unit_root_distinguished_name,omitempty" msg:"3600831,omitempty"`  
	// Contains the EntryID of the parent container in a hierarchy of address book containers.
	AddressBookParentEntryId []byte `protobuf:"bytes,48,opt,name=address_book_parent_entry_id,json=addressBookParentEntryId,proto3,oneof" json:"address_book_parent_entry_id,omitempty" msg:"65532258,omitempty"`  
	// Contains the phonetic representation of the PidTagCompanyName property (section 2.639).
	AddressBookPhoneticCompanyName *string `protobuf:"bytes,49,opt,name=address_book_phonetic_company_name,json=addressBookPhoneticCompanyName,proto3,oneof" json:"address_book_phonetic_company_name,omitempty" msg:"3598531,omitempty"`  
	// Contains the phonetic representation of the PidTagDepartmentName property (section 2.672).
	AddressBookPhoneticDepartmentName *string `protobuf:"bytes,50,opt,name=address_book_phonetic_department_name,json=addressBookPhoneticDepartmentName,proto3,oneof" json:"address_book_phonetic_department_name,omitempty" msg:"3598431,omitempty"`  
	// Contains the phonetic representation of the PidTagDisplayName property (section 2.676).
	AddressBookPhoneticDisplayName *string `protobuf:"bytes,51,opt,name=address_book_phonetic_display_name,json=addressBookPhoneticDisplayName,proto3,oneof" json:"address_book_phonetic_display_name,omitempty" msg:"3598631,omitempty"`  
	// Contains the phonetic representation of the PidTagGivenName property (section 2.714).
	AddressBookPhoneticGivenName *string `protobuf:"bytes,52,opt,name=address_book_phonetic_given_name,json=addressBookPhoneticGivenName,proto3,oneof" json:"address_book_phonetic_given_name,omitempty" msg:"3598231,omitempty"`  
	// Contains the phonetic representation of the PidTagSurname property (section 2.1036).
	AddressBookPhoneticSurname *string `protobuf:"bytes,53,opt,name=address_book_phonetic_surname,json=addressBookPhoneticSurname,proto3,oneof" json:"address_book_phonetic_surname,omitempty" msg:"3598331,omitempty"`  
	// Contains the maximum occupancy of the room.
	AddressBookRoomCapacity *int32 `protobuf:"varint,57,opt,name=address_book_room_capacity,json=addressBookRoomCapacity,proto3,oneof" json:"address_book_room_capacity,omitempty" msg:"20553,omitempty"`  
	// Contains a description of the Resource object.
	AddressBookRoomDescription *string `protobuf:"bytes,59,opt,name=address_book_room_description,json=addressBookRoomDescription,proto3,oneof" json:"address_book_room_description,omitempty" msg:"205731,omitempty"`  
	// Contains a signed integer that specifies the seniority order of Address Book objects that represent members of a department and are referenced by a Department object or departmental group, with larger values specifying members that are more senior.
	AddressBookSeniorityIndex *int32 `protobuf:"varint,61,opt,name=address_book_seniority_index,json=addressBookSeniorityIndex,proto3,oneof" json:"address_book_seniority_index,omitempty" msg:"360003,omitempty"`  
	// Contains the foreign system email address of an Address Book object.
	AddressBookTargetAddress *string `protobuf:"bytes,62,opt,name=address_book_target_address,json=addressBookTargetAddress,proto3,oneof" json:"address_book_target_address,omitempty" msg:"3278531,omitempty"`  
	// Contains a filter value used in ambiguous name resolution.
	Anr *string `protobuf:"bytes,65,opt,name=anr,proto3,oneof" json:"anr,omitempty" msg:"1383631,omitempty"`  
	// Contains a bitmask of flags that describe capabilities of an address book container.
	ContainerFlags *int32 `protobuf:"varint,66,opt,name=container_flags,json=containerFlags,proto3,oneof" json:"container_flags,omitempty" msg:"138243,omitempty"`  
	// Contains an integer value that indicates how to display an Address Book object in a table or as an addressee on a message.
	DisplayType *int32 `protobuf:"varint,67,opt,name=display_type,json=displayType,proto3,oneof" json:"display_type,omitempty" msg:"145923,omitempty"`  
	// Contains an integer value that indicates how to display an Address Book object in a table or as a recipient on a message.
	DisplayTypeEx *int32 `protobuf:"varint,68,opt,name=display_type_ex,json=displayTypeEx,proto3,oneof" json:"display_type_ex,omitempty" msg:"145973,omitempty"`  
	// Contains a series of instructions that can be executed to format an address and the data that is needed to execute those instructions.
	ScriptData []byte `protobuf:"bytes,69,opt,name=script_data,json=scriptData,proto3,oneof" json:"script_data,omitempty" msg:"4258,omitempty"`  
	// Contains a recording of the mail user's name pronunciation.
	SpokenName []byte `protobuf:"bytes,70,opt,name=spoken_name,json=spokenName,proto3,oneof" json:"spoken_name,omitempty" msg:"36034258,omitempty"`  
	// Describes the controls used in the template that is used to retrieve address book information.
	TemplateData []byte `protobuf:"bytes,71,opt,name=template_data,json=templateData,proto3,oneof" json:"template_data,omitempty" msg:"1258,omitempty"`  
	// Contains the value of the PidTagEntryId property (section 2.683), expressed as a Permanent Entry ID format.
	Templateid []byte `protobuf:"bytes,72,opt,name=templateid,proto3,oneof" json:"templateid,omitempty" msg:"14594258,omitempty"`  
	// Contains the mail user's photo in .jpg format.
	ThumbnailPhoto []byte `protobuf:"bytes,73,opt,name=thumbnail_photo,json=thumbnailPhoto,proto3,oneof" json:"thumbnail_photo,omitempty" msg:"35998258,omitempty"`  
}

func (x *AddressBook) Reset() {
	*x = AddressBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_address_book_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressBook) ProtoMessage() {}

func (x *AddressBook) ProtoReflect() protoreflect.Message {
	mi := &file_address_book_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressBook.ProtoReflect.Descriptor instead.
func (*AddressBook) Descriptor() ([]byte, []int) {
	return file_address_book_proto_rawDescGZIP(), []int{0}
}

func (x *AddressBook) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *AddressBook) GetAddressBookContainerId() int32 {
	if x != nil && x.AddressBookContainerId != nil {
		return *x.AddressBookContainerId
	}
	return 0
}

func (x *AddressBook) GetAddressBookDeliveryContentLength() int32 {
	if x != nil && x.AddressBookDeliveryContentLength != nil {
		return *x.AddressBookDeliveryContentLength
	}
	return 0
}

func (x *AddressBook) GetAddressBookDisplayNamePrintable() string {
	if x != nil && x.AddressBookDisplayNamePrintable != nil {
		return *x.AddressBookDisplayNamePrintable
	}
	return ""
}

func (x *AddressBook) GetAddressBookDisplayTypeExtended() int32 {
	if x != nil && x.AddressBookDisplayTypeExtended != nil {
		return *x.AddressBookDisplayTypeExtended
	}
	return 0
}

func (x *AddressBook) GetAddressBookDistributionListExternalMemberCount() int32 {
	if x != nil && x.AddressBookDistributionListExternalMemberCount != nil {
		return *x.AddressBookDistributionListExternalMemberCount
	}
	return 0
}

func (x *AddressBook) GetAddressBookDistributionListMemberCount() int32 {
	if x != nil && x.AddressBookDistributionListMemberCount != nil {
		return *x.AddressBookDistributionListMemberCount
	}
	return 0
}

func (x *AddressBook) GetAddressBookEntryId() []byte {
	if x != nil {
		return x.AddressBookEntryId
	}
	return nil
}

func (x *AddressBook) GetAddressBookExtensionAttribute1() string {
	if x != nil && x.AddressBookExtensionAttribute1 != nil {
		return *x.AddressBookExtensionAttribute1
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute10() string {
	if x != nil && x.AddressBookExtensionAttribute10 != nil {
		return *x.AddressBookExtensionAttribute10
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute11() string {
	if x != nil && x.AddressBookExtensionAttribute11 != nil {
		return *x.AddressBookExtensionAttribute11
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute12() string {
	if x != nil && x.AddressBookExtensionAttribute12 != nil {
		return *x.AddressBookExtensionAttribute12
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute13() string {
	if x != nil && x.AddressBookExtensionAttribute13 != nil {
		return *x.AddressBookExtensionAttribute13
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute14() string {
	if x != nil && x.AddressBookExtensionAttribute14 != nil {
		return *x.AddressBookExtensionAttribute14
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute15() string {
	if x != nil && x.AddressBookExtensionAttribute15 != nil {
		return *x.AddressBookExtensionAttribute15
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute2() string {
	if x != nil && x.AddressBookExtensionAttribute2 != nil {
		return *x.AddressBookExtensionAttribute2
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute3() string {
	if x != nil && x.AddressBookExtensionAttribute3 != nil {
		return *x.AddressBookExtensionAttribute3
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute4() string {
	if x != nil && x.AddressBookExtensionAttribute4 != nil {
		return *x.AddressBookExtensionAttribute4
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute5() string {
	if x != nil && x.AddressBookExtensionAttribute5 != nil {
		return *x.AddressBookExtensionAttribute5
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute6() string {
	if x != nil && x.AddressBookExtensionAttribute6 != nil {
		return *x.AddressBookExtensionAttribute6
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute7() string {
	if x != nil && x.AddressBookExtensionAttribute7 != nil {
		return *x.AddressBookExtensionAttribute7
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute8() string {
	if x != nil && x.AddressBookExtensionAttribute8 != nil {
		return *x.AddressBookExtensionAttribute8
	}
	return ""
}

func (x *AddressBook) GetAddressBookExtensionAttribute9() string {
	if x != nil && x.AddressBookExtensionAttribute9 != nil {
		return *x.AddressBookExtensionAttribute9
	}
	return ""
}

func (x *AddressBook) GetAddressBookFolderPathname() string {
	if x != nil && x.AddressBookFolderPathname != nil {
		return *x.AddressBookFolderPathname
	}
	return ""
}

func (x *AddressBook) GetAddressBookHierarchicalIsHierarchicalGroup() bool {
	if x != nil && x.AddressBookHierarchicalIsHierarchicalGroup != nil {
		return *x.AddressBookHierarchicalIsHierarchicalGroup
	}
	return false
}

func (x *AddressBook) GetAddressBookHierarchicalRootDepartment() string {
	if x != nil && x.AddressBookHierarchicalRootDepartment != nil {
		return *x.AddressBookHierarchicalRootDepartment
	}
	return ""
}

func (x *AddressBook) GetAddressBookHomeMessageDatabase() string {
	if x != nil && x.AddressBookHomeMessageDatabase != nil {
		return *x.AddressBookHomeMessageDatabase
	}
	return ""
}

func (x *AddressBook) GetAddressBookIsMaster() bool {
	if x != nil && x.AddressBookIsMaster != nil {
		return *x.AddressBookIsMaster
	}
	return false
}

func (x *AddressBook) GetAddressBookIsMemberOfDistributionList() string {
	if x != nil && x.AddressBookIsMemberOfDistributionList != nil {
		return *x.AddressBookIsMemberOfDistributionList
	}
	return ""
}

func (x *AddressBook) GetAddressBookManagerDistinguishedName() string {
	if x != nil && x.AddressBookManagerDistinguishedName != nil {
		return *x.AddressBookManagerDistinguishedName
	}
	return ""
}

func (x *AddressBook) GetAddressBookModerationEnabled() bool {
	if x != nil && x.AddressBookModerationEnabled != nil {
		return *x.AddressBookModerationEnabled
	}
	return false
}

func (x *AddressBook) GetAddressBookObjectDistinguishedName() string {
	if x != nil && x.AddressBookObjectDistinguishedName != nil {
		return *x.AddressBookObjectDistinguishedName
	}
	return ""
}

func (x *AddressBook) GetAddressBookObjectGuid() []byte {
	if x != nil {
		return x.AddressBookObjectGuid
	}
	return nil
}

func (x *AddressBook) GetAddressBookOrganizationalUnitRootDistinguishedName() string {
	if x != nil && x.AddressBookOrganizationalUnitRootDistinguishedName != nil {
		return *x.AddressBookOrganizationalUnitRootDistinguishedName
	}
	return ""
}

func (x *AddressBook) GetAddressBookParentEntryId() []byte {
	if x != nil {
		return x.AddressBookParentEntryId
	}
	return nil
}

func (x *AddressBook) GetAddressBookPhoneticCompanyName() string {
	if x != nil && x.AddressBookPhoneticCompanyName != nil {
		return *x.AddressBookPhoneticCompanyName
	}
	return ""
}

func (x *AddressBook) GetAddressBookPhoneticDepartmentName() string {
	if x != nil && x.AddressBookPhoneticDepartmentName != nil {
		return *x.AddressBookPhoneticDepartmentName
	}
	return ""
}

func (x *AddressBook) GetAddressBookPhoneticDisplayName() string {
	if x != nil && x.AddressBookPhoneticDisplayName != nil {
		return *x.AddressBookPhoneticDisplayName
	}
	return ""
}

func (x *AddressBook) GetAddressBookPhoneticGivenName() string {
	if x != nil && x.AddressBookPhoneticGivenName != nil {
		return *x.AddressBookPhoneticGivenName
	}
	return ""
}

func (x *AddressBook) GetAddressBookPhoneticSurname() string {
	if x != nil && x.AddressBookPhoneticSurname != nil {
		return *x.AddressBookPhoneticSurname
	}
	return ""
}

func (x *AddressBook) GetAddressBookRoomCapacity() int32 {
	if x != nil && x.AddressBookRoomCapacity != nil {
		return *x.AddressBookRoomCapacity
	}
	return 0
}

func (x *AddressBook) GetAddressBookRoomDescription() string {
	if x != nil && x.AddressBookRoomDescription != nil {
		return *x.AddressBookRoomDescription
	}
	return ""
}

func (x *AddressBook) GetAddressBookSeniorityIndex() int32 {
	if x != nil && x.AddressBookSeniorityIndex != nil {
		return *x.AddressBookSeniorityIndex
	}
	return 0
}

func (x *AddressBook) GetAddressBookTargetAddress() string {
	if x != nil && x.AddressBookTargetAddress != nil {
		return *x.AddressBookTargetAddress
	}
	return ""
}

func (x *AddressBook) GetAnr() string {
	if x != nil && x.Anr != nil {
		return *x.Anr
	}
	return ""
}

func (x *AddressBook) GetContainerFlags() int32 {
	if x != nil && x.ContainerFlags != nil {
		return *x.ContainerFlags
	}
	return 0
}

func (x *AddressBook) GetDisplayType() int32 {
	if x != nil && x.DisplayType != nil {
		return *x.DisplayType
	}
	return 0
}

func (x *AddressBook) GetDisplayTypeEx() int32 {
	if x != nil && x.DisplayTypeEx != nil {
		return *x.DisplayTypeEx
	}
	return 0
}

func (x *AddressBook) GetScriptData() []byte {
	if x != nil {
		return x.ScriptData
	}
	return nil
}

func (x *AddressBook) GetSpokenName() []byte {
	if x != nil {
		return x.SpokenName
	}
	return nil
}

func (x *AddressBook) GetTemplateData() []byte {
	if x != nil {
		return x.TemplateData
	}
	return nil
}

func (x *AddressBook) GetTemplateid() []byte {
	if x != nil {
		return x.Templateid
	}
	return nil
}

func (x *AddressBook) GetThumbnailPhoto() []byte {
	if x != nil {
		return x.ThumbnailPhoto
	}
	return nil
}

var File_address_book_proto protoreflect.FileDescriptor

var file_address_book_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x2c, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x23, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x1f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x22, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x34,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x2e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x60, 0x0a, 0x2b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x26, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x6f, 0x6f, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x07, 0x52, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x6f, 0x6f, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x22, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x30, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x1f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x30, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x22, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31,
	0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x1f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a,
	0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x31, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x1f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x50, 0x0a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x31, 0x33, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x1f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x33, 0x88, 0x01,
	0x01, 0x12, 0x50, 0x0a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x34, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x1f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x35, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x1f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x31, 0x35, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0f, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x33, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x10, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x33, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x34, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x34, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x35, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x12, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x35, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x36, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x13, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x36, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x37, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x37, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x38, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x15, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x38, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x39, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x16, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x39, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x19, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x68, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x2a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x6f, 0x6f, 0x6b, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x49,
	0x73, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x29, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x25, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x48,
	0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x5f, 0x0a, 0x2b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x25, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x6f, 0x6f, 0x6b, 0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x59, 0x0a, 0x27, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1d, 0x52, 0x23, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x1e, 0x52, 0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x6f, 0x6f, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x26, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x20, 0x52, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x79,
	0x0a, 0x38, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x21, 0x52, 0x32, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x22, 0x52, 0x18, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f,
	0x0a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x1e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x55, 0x0a, 0x25, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24,
	0x52, 0x21, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x25, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f,
	0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63,
	0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x26, 0x52, 0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x1a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x28, 0x52, 0x17, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x1d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x1a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x19,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x6e, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2b, 0x52, 0x18, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x6f, 0x6b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x61, 0x6e, 0x72, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52,
	0x03, 0x61, 0x6e, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x2d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2e, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x78,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x30, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x31, 0x52, 0x0a, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x32, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x69, 0x64, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x33, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x34,
	0x52, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x27, 0x0a,
	0x25, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x25,
	0x0a, 0x23, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x37, 0x0a, 0x35, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x2e,
	0x0a, 0x2c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x42, 0x25,
	0x0a, 0x23, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x31, 0x30, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x31, 0x42, 0x25, 0x0a, 0x23,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x31, 0x32, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x33, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31,
	0x34, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f,
	0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x35, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x32, 0x42, 0x24,
	0x0a, 0x22, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x33, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x34, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x35,
	0x42, 0x24, 0x0a, 0x22, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x36, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x37, 0x42, 0x24, 0x0a, 0x22,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x38, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x39, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x32, 0x0a, 0x30, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x2c, 0x0a,
	0x2a, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x68,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x25, 0x0a, 0x23, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x2e, 0x0a,
	0x2c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69,
	0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x2a, 0x0a,
	0x28, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x29, 0x0a,
	0x27, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x42, 0x3b, 0x0a, 0x39, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x28, 0x0a, 0x26, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f,
	0x6f, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x6e, 0x72, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x65, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6f, 0x69, 0x6a, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x73, 0x74, 0x3b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_address_book_proto_rawDescOnce sync.Once
	file_address_book_proto_rawDescData = file_address_book_proto_rawDesc
)

func file_address_book_proto_rawDescGZIP() []byte {
	file_address_book_proto_rawDescOnce.Do(func() {
		file_address_book_proto_rawDescData = protoimpl.X.CompressGZIP(file_address_book_proto_rawDescData)
	})
	return file_address_book_proto_rawDescData
}

var file_address_book_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_address_book_proto_goTypes = []interface{}{
	(*AddressBook)(nil), // 0: AddressBook
}
var file_address_book_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_address_book_proto_init() }
func file_address_book_proto_init() {
	if File_address_book_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_address_book_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_address_book_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_address_book_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_address_book_proto_goTypes,
		DependencyIndexes: file_address_book_proto_depIdxs,
		MessageInfos:      file_address_book_proto_msgTypes,
	}.Build()
	File_address_book_proto = out.File
	file_address_book_proto_rawDesc = nil
	file_address_book_proto_goTypes = nil
	file_address_book_proto_depIdxs = nil
}
