package properties

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Sharing) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "272425-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingAnonymity")
					return
				}
				z.SharingAnonymity = nil
			} else {
				if z.SharingAnonymity == nil {
					z.SharingAnonymity = new(int32)
				}
				*z.SharingAnonymity, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingAnonymity")
					return
				}
			}
		case "272545-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingBrowseUrl")
					return
				}
				z.SharingBrowseUrl = nil
			} else {
				if z.SharingBrowseUrl == nil {
					z.SharingBrowseUrl = new(string)
				}
				*z.SharingBrowseUrl, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingBrowseUrl")
					return
				}
			}
		case "272423-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingCapabilities")
					return
				}
				z.SharingCapabilities = nil
			} else {
				if z.SharingCapabilities == nil {
					z.SharingCapabilities = new(int32)
				}
				*z.SharingCapabilities, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingCapabilities")
					return
				}
			}
		case "272452-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingConfigurationUrl")
					return
				}
				z.SharingConfigurationUrl = nil
			} else {
				if z.SharingConfigurationUrl == nil {
					z.SharingConfigurationUrl = new(string)
				}
				*z.SharingConfigurationUrl, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingConfigurationUrl")
					return
				}
			}
		case "272517-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingDataRangeEnd")
					return
				}
				z.SharingDataRangeEnd = nil
			} else {
				if z.SharingDataRangeEnd == nil {
					z.SharingDataRangeEnd = new(int64)
				}
				*z.SharingDataRangeEnd, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingDataRangeEnd")
					return
				}
			}
		case "272516-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingDataRangeStart")
					return
				}
				z.SharingDataRangeStart = nil
			} else {
				if z.SharingDataRangeStart == nil {
					z.SharingDataRangeStart = new(int64)
				}
				*z.SharingDataRangeStart, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingDataRangeStart")
					return
				}
			}
		case "272459-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingDetail")
					return
				}
				z.SharingDetail = nil
			} else {
				if z.SharingDetail == nil {
					z.SharingDetail = new(int32)
				}
				*z.SharingDetail, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingDetail")
					return
				}
			}
		case "272449-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingExtensionXml")
					return
				}
				z.SharingExtensionXml = nil
			} else {
				if z.SharingExtensionXml == nil {
					z.SharingExtensionXml = new(string)
				}
				*z.SharingExtensionXml, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingExtensionXml")
					return
				}
			}
		case "272394-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingFlags")
					return
				}
				z.SharingFlags = nil
			} else {
				if z.SharingFlags == nil {
					z.SharingFlags = new(int32)
				}
				*z.SharingFlags, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingFlags")
					return
				}
			}
		case "272424-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingFlavor")
					return
				}
				z.SharingFlavor = nil
			} else {
				if z.SharingFlavor == nil {
					z.SharingFlavor = new(int32)
				}
				*z.SharingFlavor, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingFlavor")
					return
				}
			}
		case "272391-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingInitiatorName")
					return
				}
				z.SharingInitiatorName = nil
			} else {
				if z.SharingInitiatorName == nil {
					z.SharingInitiatorName = new(string)
				}
				*z.SharingInitiatorName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingInitiatorName")
					return
				}
			}
		case "272392-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingInitiatorSmtp")
					return
				}
				z.SharingInitiatorSmtp = nil
			} else {
				if z.SharingInitiatorSmtp == nil {
					z.SharingInitiatorSmtp = new(string)
				}
				*z.SharingInitiatorSmtp, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingInitiatorSmtp")
					return
				}
			}
		case "272549-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingLastAutoSyncTime")
					return
				}
				z.SharingLastAutoSyncTime = nil
			} else {
				if z.SharingLastAutoSyncTime == nil {
					z.SharingLastAutoSyncTime = new(int64)
				}
				*z.SharingLastAutoSyncTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingLastAutoSyncTime")
					return
				}
			}
		case "272431-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingLastSyncTime")
					return
				}
				z.SharingLastSyncTime = nil
			} else {
				if z.SharingLastSyncTime == nil {
					z.SharingLastSyncTime = new(int64)
				}
				*z.SharingLastSyncTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingLastSyncTime")
					return
				}
			}
		case "272525-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalComment")
					return
				}
				z.SharingLocalComment = nil
			} else {
				if z.SharingLocalComment == nil {
					z.SharingLocalComment = new(string)
				}
				*z.SharingLocalComment, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalComment")
					return
				}
			}
		case "272451-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalLastModificationTime")
					return
				}
				z.SharingLocalLastModificationTime = nil
			} else {
				if z.SharingLocalLastModificationTime == nil {
					z.SharingLocalLastModificationTime = new(int64)
				}
				*z.SharingLocalLastModificationTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalLastModificationTime")
					return
				}
			}
		case "272399-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalName")
					return
				}
				z.SharingLocalName = nil
			} else {
				if z.SharingLocalName == nil {
					z.SharingLocalName = new(string)
				}
				*z.SharingLocalName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalName")
					return
				}
			}
		case "272398-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalPath")
					return
				}
				z.SharingLocalPath = nil
			} else {
				if z.SharingLocalPath == nil {
					z.SharingLocalPath = new(string)
				}
				*z.SharingLocalPath, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalPath")
					return
				}
			}
		case "272521-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalStoreUid")
					return
				}
				z.SharingLocalStoreUid = nil
			} else {
				if z.SharingLocalStoreUid == nil {
					z.SharingLocalStoreUid = new(string)
				}
				*z.SharingLocalStoreUid, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalStoreUid")
					return
				}
			}
		case "272420-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalType")
					return
				}
				z.SharingLocalType = nil
			} else {
				if z.SharingLocalType == nil {
					z.SharingLocalType = new(string)
				}
				*z.SharingLocalType, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalType")
					return
				}
			}
		case "272416-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalUid")
					return
				}
				z.SharingLocalUid = nil
			} else {
				if z.SharingLocalUid == nil {
					z.SharingLocalUid = new(string)
				}
				*z.SharingLocalUid, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalUid")
					return
				}
			}
		case "272430-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingParticipants")
					return
				}
				z.SharingParticipants = nil
			} else {
				if z.SharingParticipants == nil {
					z.SharingParticipants = new(string)
				}
				*z.SharingParticipants, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingParticipants")
					return
				}
			}
		case "272427-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingPermissions")
					return
				}
				z.SharingPermissions = nil
			} else {
				if z.SharingPermissions == nil {
					z.SharingPermissions = new(int32)
				}
				*z.SharingPermissions, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingPermissions")
					return
				}
			}
		case "272395-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingProviderExtension")
					return
				}
				z.SharingProviderExtension = nil
			} else {
				if z.SharingProviderExtension == nil {
					z.SharingProviderExtension = new(string)
				}
				*z.SharingProviderExtension, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingProviderExtension")
					return
				}
			}
		case "272386-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingProviderName")
					return
				}
				z.SharingProviderName = nil
			} else {
				if z.SharingProviderName == nil {
					z.SharingProviderName = new(string)
				}
				*z.SharingProviderName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingProviderName")
					return
				}
			}
		case "272387-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingProviderUrl")
					return
				}
				z.SharingProviderUrl = nil
			} else {
				if z.SharingProviderUrl == nil {
					z.SharingProviderUrl = new(string)
				}
				*z.SharingProviderUrl, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingProviderUrl")
					return
				}
			}
		case "272519-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRangeEnd")
					return
				}
				z.SharingRangeEnd = nil
			} else {
				if z.SharingRangeEnd == nil {
					z.SharingRangeEnd = new(int32)
				}
				*z.SharingRangeEnd, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingRangeEnd")
					return
				}
			}
		case "272518-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRangeStart")
					return
				}
				z.SharingRangeStart = nil
			} else {
				if z.SharingRangeStart == nil {
					z.SharingRangeStart = new(int32)
				}
				*z.SharingRangeStart, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingRangeStart")
					return
				}
			}
		case "272426-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingReciprocation")
					return
				}
				z.SharingReciprocation = nil
			} else {
				if z.SharingReciprocation == nil {
					z.SharingReciprocation = new(int32)
				}
				*z.SharingReciprocation, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingReciprocation")
					return
				}
			}
		case "272523-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteByteSize")
					return
				}
				z.SharingRemoteByteSize = nil
			} else {
				if z.SharingRemoteByteSize == nil {
					z.SharingRemoteByteSize = new(int32)
				}
				*z.SharingRemoteByteSize, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteByteSize")
					return
				}
			}
		case "272463-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteComment")
					return
				}
				z.SharingRemoteComment = nil
			} else {
				if z.SharingRemoteComment == nil {
					z.SharingRemoteComment = new(string)
				}
				*z.SharingRemoteComment, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteComment")
					return
				}
			}
		case "272524-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteCrc")
					return
				}
				z.SharingRemoteCrc = nil
			} else {
				if z.SharingRemoteCrc == nil {
					z.SharingRemoteCrc = new(int32)
				}
				*z.SharingRemoteCrc, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteCrc")
					return
				}
			}
		case "272450-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteLastModificationTime")
					return
				}
				z.SharingRemoteLastModificationTime = nil
			} else {
				if z.SharingRemoteLastModificationTime == nil {
					z.SharingRemoteLastModificationTime = new(int64)
				}
				*z.SharingRemoteLastModificationTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteLastModificationTime")
					return
				}
			}
		case "272527-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteMessageCount")
					return
				}
				z.SharingRemoteMessageCount = nil
			} else {
				if z.SharingRemoteMessageCount == nil {
					z.SharingRemoteMessageCount = new(int32)
				}
				*z.SharingRemoteMessageCount, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteMessageCount")
					return
				}
			}
		case "272389-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteName")
					return
				}
				z.SharingRemoteName = nil
			} else {
				if z.SharingRemoteName == nil {
					z.SharingRemoteName = new(string)
				}
				*z.SharingRemoteName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteName")
					return
				}
			}
		case "272397-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemotePass")
					return
				}
				z.SharingRemotePass = nil
			} else {
				if z.SharingRemotePass == nil {
					z.SharingRemotePass = new(string)
				}
				*z.SharingRemotePass, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemotePass")
					return
				}
			}
		case "272388-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemotePath")
					return
				}
				z.SharingRemotePath = nil
			} else {
				if z.SharingRemotePath == nil {
					z.SharingRemotePath = new(string)
				}
				*z.SharingRemotePath, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemotePath")
					return
				}
			}
		case "272520-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteStoreUid")
					return
				}
				z.SharingRemoteStoreUid = nil
			} else {
				if z.SharingRemoteStoreUid == nil {
					z.SharingRemoteStoreUid = new(string)
				}
				*z.SharingRemoteStoreUid, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteStoreUid")
					return
				}
			}
		case "272429-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteType")
					return
				}
				z.SharingRemoteType = nil
			} else {
				if z.SharingRemoteType == nil {
					z.SharingRemoteType = new(string)
				}
				*z.SharingRemoteType, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteType")
					return
				}
			}
		case "272390-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteUid")
					return
				}
				z.SharingRemoteUid = nil
			} else {
				if z.SharingRemoteUid == nil {
					z.SharingRemoteUid = new(string)
				}
				*z.SharingRemoteUid, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteUid")
					return
				}
			}
		case "272396-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteUser")
					return
				}
				z.SharingRemoteUser = nil
			} else {
				if z.SharingRemoteUser == nil {
					z.SharingRemoteUser = new(string)
				}
				*z.SharingRemoteUser, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteUser")
					return
				}
			}
		case "272555-31":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteVersion")
					return
				}
				z.SharingRemoteVersion = nil
			} else {
				if z.SharingRemoteVersion == nil {
					z.SharingRemoteVersion = new(string)
				}
				*z.SharingRemoteVersion, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteVersion")
					return
				}
			}
		case "272456-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingResponseTime")
					return
				}
				z.SharingResponseTime = nil
			} else {
				if z.SharingResponseTime == nil {
					z.SharingResponseTime = new(int64)
				}
				*z.SharingResponseTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingResponseTime")
					return
				}
			}
		case "272455-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingResponseType")
					return
				}
				z.SharingResponseType = nil
			} else {
				if z.SharingResponseType == nil {
					z.SharingResponseType = new(int32)
				}
				*z.SharingResponseType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingResponseType")
					return
				}
			}
		case "272526-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingRoamLog")
					return
				}
				z.SharingRoamLog = nil
			} else {
				if z.SharingRoamLog == nil {
					z.SharingRoamLog = new(int32)
				}
				*z.SharingRoamLog, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingRoamLog")
					return
				}
			}
		case "272453-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingStart")
					return
				}
				z.SharingStart = nil
			} else {
				if z.SharingStart == nil {
					z.SharingStart = new(int64)
				}
				*z.SharingStart, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingStart")
					return
				}
			}
		case "272384-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingStatus")
					return
				}
				z.SharingStatus = nil
			} else {
				if z.SharingStatus == nil {
					z.SharingStatus = new(int32)
				}
				*z.SharingStatus, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingStatus")
					return
				}
			}
		case "272454-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingStop")
					return
				}
				z.SharingStop = nil
			} else {
				if z.SharingStop == nil {
					z.SharingStop = new(int64)
				}
				*z.SharingStop, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingStop")
					return
				}
			}
		case "272576-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingSyncFlags")
					return
				}
				z.SharingSyncFlags = nil
			} else {
				if z.SharingSyncFlags == nil {
					z.SharingSyncFlags = new(int32)
				}
				*z.SharingSyncFlags, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingSyncFlags")
					return
				}
			}
		case "272458-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingSyncInterval")
					return
				}
				z.SharingSyncInterval = nil
			} else {
				if z.SharingSyncInterval == nil {
					z.SharingSyncInterval = new(int32)
				}
				*z.SharingSyncInterval, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingSyncInterval")
					return
				}
			}
		case "272460-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingTimeToLive")
					return
				}
				z.SharingTimeToLive = nil
			} else {
				if z.SharingTimeToLive == nil {
					z.SharingTimeToLive = new(int32)
				}
				*z.SharingTimeToLive, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingTimeToLive")
					return
				}
			}
		case "272550-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingTimeToLiveAuto")
					return
				}
				z.SharingTimeToLiveAuto = nil
			} else {
				if z.SharingTimeToLiveAuto == nil {
					z.SharingTimeToLiveAuto = new(int32)
				}
				*z.SharingTimeToLiveAuto, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingTimeToLiveAuto")
					return
				}
			}
		case "272514-3":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingWorkingHoursDays")
					return
				}
				z.SharingWorkingHoursDays = nil
			} else {
				if z.SharingWorkingHoursDays == nil {
					z.SharingWorkingHoursDays = new(int32)
				}
				*z.SharingWorkingHoursDays, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "SharingWorkingHoursDays")
					return
				}
			}
		case "272513-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingWorkingHoursEnd")
					return
				}
				z.SharingWorkingHoursEnd = nil
			} else {
				if z.SharingWorkingHoursEnd == nil {
					z.SharingWorkingHoursEnd = new(int64)
				}
				*z.SharingWorkingHoursEnd, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingWorkingHoursEnd")
					return
				}
			}
		case "272512-64":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SharingWorkingHoursStart")
					return
				}
				z.SharingWorkingHoursStart = nil
			} else {
				if z.SharingWorkingHoursStart == nil {
					z.SharingWorkingHoursStart = new(int64)
				}
				*z.SharingWorkingHoursStart, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SharingWorkingHoursStart")
					return
				}
			}
		case "XSharingBrowseUrl_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingBrowseUrl_")
					return
				}
				z.XSharingBrowseUrl_ = nil
			} else {
				if z.XSharingBrowseUrl_ == nil {
					z.XSharingBrowseUrl_ = new(string)
				}
				*z.XSharingBrowseUrl_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingBrowseUrl_")
					return
				}
			}
		case "XSharingCapabilities_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingCapabilities_")
					return
				}
				z.XSharingCapabilities_ = nil
			} else {
				if z.XSharingCapabilities_ == nil {
					z.XSharingCapabilities_ = new(string)
				}
				*z.XSharingCapabilities_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingCapabilities_")
					return
				}
			}
		case "XSharingConfigUrl":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingConfigUrl")
					return
				}
				z.XSharingConfigUrl = nil
			} else {
				if z.XSharingConfigUrl == nil {
					z.XSharingConfigUrl = new(string)
				}
				*z.XSharingConfigUrl, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingConfigUrl")
					return
				}
			}
		case "XSharingExendedCaps":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingExendedCaps")
					return
				}
				z.XSharingExendedCaps = nil
			} else {
				if z.XSharingExendedCaps == nil {
					z.XSharingExendedCaps = new(string)
				}
				*z.XSharingExendedCaps, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingExendedCaps")
					return
				}
			}
		case "XSharingFlavor_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingFlavor_")
					return
				}
				z.XSharingFlavor_ = nil
			} else {
				if z.XSharingFlavor_ == nil {
					z.XSharingFlavor_ = new(string)
				}
				*z.XSharingFlavor_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingFlavor_")
					return
				}
			}
		case "XSharingInstanceGuid":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingInstanceGuid")
					return
				}
				z.XSharingInstanceGuid = nil
			} else {
				if z.XSharingInstanceGuid == nil {
					z.XSharingInstanceGuid = new(string)
				}
				*z.XSharingInstanceGuid, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingInstanceGuid")
					return
				}
			}
		case "XSharingLocalType_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingLocalType_")
					return
				}
				z.XSharingLocalType_ = nil
			} else {
				if z.XSharingLocalType_ == nil {
					z.XSharingLocalType_ = new(string)
				}
				*z.XSharingLocalType_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingLocalType_")
					return
				}
			}
		case "XSharingProviderGuid":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingProviderGuid")
					return
				}
				z.XSharingProviderGuid = nil
			} else {
				if z.XSharingProviderGuid == nil {
					z.XSharingProviderGuid = new(string)
				}
				*z.XSharingProviderGuid, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingProviderGuid")
					return
				}
			}
		case "XSharingProviderName_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingProviderName_")
					return
				}
				z.XSharingProviderName_ = nil
			} else {
				if z.XSharingProviderName_ == nil {
					z.XSharingProviderName_ = new(string)
				}
				*z.XSharingProviderName_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingProviderName_")
					return
				}
			}
		case "XSharingProviderUrl_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingProviderUrl_")
					return
				}
				z.XSharingProviderUrl_ = nil
			} else {
				if z.XSharingProviderUrl_ == nil {
					z.XSharingProviderUrl_ = new(string)
				}
				*z.XSharingProviderUrl_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingProviderUrl_")
					return
				}
			}
		case "XSharingRemoteName_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteName_")
					return
				}
				z.XSharingRemoteName_ = nil
			} else {
				if z.XSharingRemoteName_ == nil {
					z.XSharingRemoteName_ = new(string)
				}
				*z.XSharingRemoteName_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteName_")
					return
				}
			}
		case "XSharingRemotePath_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemotePath_")
					return
				}
				z.XSharingRemotePath_ = nil
			} else {
				if z.XSharingRemotePath_ == nil {
					z.XSharingRemotePath_ = new(string)
				}
				*z.XSharingRemotePath_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemotePath_")
					return
				}
			}
		case "XSharingRemoteStoreUid_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteStoreUid_")
					return
				}
				z.XSharingRemoteStoreUid_ = nil
			} else {
				if z.XSharingRemoteStoreUid_ == nil {
					z.XSharingRemoteStoreUid_ = new(string)
				}
				*z.XSharingRemoteStoreUid_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteStoreUid_")
					return
				}
			}
		case "XSharingRemoteType_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteType_")
					return
				}
				z.XSharingRemoteType_ = nil
			} else {
				if z.XSharingRemoteType_ == nil {
					z.XSharingRemoteType_ = new(string)
				}
				*z.XSharingRemoteType_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteType_")
					return
				}
			}
		case "XSharingRemoteUid_":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteUid_")
					return
				}
				z.XSharingRemoteUid_ = nil
			} else {
				if z.XSharingRemoteUid_ == nil {
					z.XSharingRemoteUid_ = new(string)
				}
				*z.XSharingRemoteUid_, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteUid_")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Sharing) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(70)
	var zb0001Mask [2]uint64 /* 70 bits */
	if z.SharingAnonymity == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1
	}
	if z.SharingBrowseUrl == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2
	}
	if z.SharingCapabilities == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4
	}
	if z.SharingConfigurationUrl == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8
	}
	if z.SharingDataRangeEnd == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10
	}
	if z.SharingDataRangeStart == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20
	}
	if z.SharingDetail == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40
	}
	if z.SharingExtensionXml == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80
	}
	if z.SharingFlags == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100
	}
	if z.SharingFlavor == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200
	}
	if z.SharingInitiatorName == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400
	}
	if z.SharingInitiatorSmtp == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800
	}
	if z.SharingLastAutoSyncTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000
	}
	if z.SharingLastSyncTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000
	}
	if z.SharingLocalComment == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000
	}
	if z.SharingLocalLastModificationTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000
	}
	if z.SharingLocalName == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000
	}
	if z.SharingLocalPath == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000
	}
	if z.SharingLocalStoreUid == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000
	}
	if z.SharingLocalType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000
	}
	if z.SharingLocalUid == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000
	}
	if z.SharingParticipants == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000
	}
	if z.SharingPermissions == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000
	}
	if z.SharingProviderExtension == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000
	}
	if z.SharingProviderName == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000
	}
	if z.SharingProviderUrl == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000
	}
	if z.SharingRangeEnd == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000
	}
	if z.SharingRangeStart == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000
	}
	if z.SharingReciprocation == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000
	}
	if z.SharingRemoteByteSize == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000
	}
	if z.SharingRemoteComment == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000
	}
	if z.SharingRemoteCrc == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000000
	}
	if z.SharingRemoteLastModificationTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000000
	}
	if z.SharingRemoteMessageCount == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000000
	}
	if z.SharingRemoteName == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000000
	}
	if z.SharingRemotePass == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000000
	}
	if z.SharingRemotePath == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000000
	}
	if z.SharingRemoteStoreUid == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000000
	}
	if z.SharingRemoteType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000000
	}
	if z.SharingRemoteUid == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000000
	}
	if z.SharingRemoteUser == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000000
	}
	if z.SharingRemoteVersion == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000000
	}
	if z.SharingResponseTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000000
	}
	if z.SharingResponseType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000000000
	}
	if z.SharingRoamLog == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000000000
	}
	if z.SharingStart == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000000000
	}
	if z.SharingStatus == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000000000
	}
	if z.SharingStop == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000000000
	}
	if z.SharingSyncFlags == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000000000
	}
	if z.SharingSyncInterval == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000000000
	}
	if z.SharingTimeToLive == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000000000
	}
	if z.SharingTimeToLiveAuto == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000000000
	}
	if z.SharingWorkingHoursDays == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000000000
	}
	if z.SharingWorkingHoursEnd == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000000000
	}
	if z.SharingWorkingHoursStart == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000000000
	}
	// variable map header, size zb0001Len
	err = en.WriteMapHeader(zb0001Len)
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask[0] & 0x1) == 0 { // if not empty
		// write "272425-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x34, 0x32, 0x35, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingAnonymity == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingAnonymity)
			if err != nil {
				err = msgp.WrapError(err, "SharingAnonymity")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2) == 0 { // if not empty
		// write "272545-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x35, 0x34, 0x35, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingBrowseUrl == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingBrowseUrl)
			if err != nil {
				err = msgp.WrapError(err, "SharingBrowseUrl")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4) == 0 { // if not empty
		// write "272423-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x34, 0x32, 0x33, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingCapabilities == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingCapabilities)
			if err != nil {
				err = msgp.WrapError(err, "SharingCapabilities")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8) == 0 { // if not empty
		// write "272452-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x32, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingConfigurationUrl == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingConfigurationUrl)
			if err != nil {
				err = msgp.WrapError(err, "SharingConfigurationUrl")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x10) == 0 { // if not empty
		// write "272517-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x35, 0x31, 0x37, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingDataRangeEnd == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingDataRangeEnd)
			if err != nil {
				err = msgp.WrapError(err, "SharingDataRangeEnd")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x20) == 0 { // if not empty
		// write "272516-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x35, 0x31, 0x36, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingDataRangeStart == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingDataRangeStart)
			if err != nil {
				err = msgp.WrapError(err, "SharingDataRangeStart")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x40) == 0 { // if not empty
		// write "272459-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x34, 0x35, 0x39, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingDetail == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingDetail)
			if err != nil {
				err = msgp.WrapError(err, "SharingDetail")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x80) == 0 { // if not empty
		// write "272449-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x34, 0x39, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingExtensionXml == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingExtensionXml)
			if err != nil {
				err = msgp.WrapError(err, "SharingExtensionXml")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x100) == 0 { // if not empty
		// write "272394-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x33, 0x39, 0x34, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingFlags == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingFlags)
			if err != nil {
				err = msgp.WrapError(err, "SharingFlags")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x200) == 0 { // if not empty
		// write "272424-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x34, 0x32, 0x34, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingFlavor == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingFlavor)
			if err != nil {
				err = msgp.WrapError(err, "SharingFlavor")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x400) == 0 { // if not empty
		// write "272391-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x31, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingInitiatorName == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingInitiatorName)
			if err != nil {
				err = msgp.WrapError(err, "SharingInitiatorName")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x800) == 0 { // if not empty
		// write "272392-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x32, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingInitiatorSmtp == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingInitiatorSmtp)
			if err != nil {
				err = msgp.WrapError(err, "SharingInitiatorSmtp")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x1000) == 0 { // if not empty
		// write "272549-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x35, 0x34, 0x39, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingLastAutoSyncTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingLastAutoSyncTime)
			if err != nil {
				err = msgp.WrapError(err, "SharingLastAutoSyncTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2000) == 0 { // if not empty
		// write "272431-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x33, 0x31, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingLastSyncTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingLastSyncTime)
			if err != nil {
				err = msgp.WrapError(err, "SharingLastSyncTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4000) == 0 { // if not empty
		// write "272525-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x35, 0x32, 0x35, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingLocalComment == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingLocalComment)
			if err != nil {
				err = msgp.WrapError(err, "SharingLocalComment")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8000) == 0 { // if not empty
		// write "272451-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x31, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingLocalLastModificationTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingLocalLastModificationTime)
			if err != nil {
				err = msgp.WrapError(err, "SharingLocalLastModificationTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x10000) == 0 { // if not empty
		// write "272399-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x39, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingLocalName == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingLocalName)
			if err != nil {
				err = msgp.WrapError(err, "SharingLocalName")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x20000) == 0 { // if not empty
		// write "272398-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x38, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingLocalPath == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingLocalPath)
			if err != nil {
				err = msgp.WrapError(err, "SharingLocalPath")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x40000) == 0 { // if not empty
		// write "272521-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x35, 0x32, 0x31, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingLocalStoreUid == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingLocalStoreUid)
			if err != nil {
				err = msgp.WrapError(err, "SharingLocalStoreUid")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x80000) == 0 { // if not empty
		// write "272420-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x32, 0x30, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingLocalType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingLocalType)
			if err != nil {
				err = msgp.WrapError(err, "SharingLocalType")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x100000) == 0 { // if not empty
		// write "272416-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x31, 0x36, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingLocalUid == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingLocalUid)
			if err != nil {
				err = msgp.WrapError(err, "SharingLocalUid")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x200000) == 0 { // if not empty
		// write "272430-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x33, 0x30, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingParticipants == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingParticipants)
			if err != nil {
				err = msgp.WrapError(err, "SharingParticipants")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x400000) == 0 { // if not empty
		// write "272427-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x34, 0x32, 0x37, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingPermissions == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingPermissions)
			if err != nil {
				err = msgp.WrapError(err, "SharingPermissions")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x800000) == 0 { // if not empty
		// write "272395-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x35, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingProviderExtension == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingProviderExtension)
			if err != nil {
				err = msgp.WrapError(err, "SharingProviderExtension")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x1000000) == 0 { // if not empty
		// write "272386-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x38, 0x36, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingProviderName == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingProviderName)
			if err != nil {
				err = msgp.WrapError(err, "SharingProviderName")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2000000) == 0 { // if not empty
		// write "272387-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x38, 0x37, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingProviderUrl == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingProviderUrl)
			if err != nil {
				err = msgp.WrapError(err, "SharingProviderUrl")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4000000) == 0 { // if not empty
		// write "272519-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x35, 0x31, 0x39, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingRangeEnd == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingRangeEnd)
			if err != nil {
				err = msgp.WrapError(err, "SharingRangeEnd")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8000000) == 0 { // if not empty
		// write "272518-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x35, 0x31, 0x38, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingRangeStart == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingRangeStart)
			if err != nil {
				err = msgp.WrapError(err, "SharingRangeStart")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x10000000) == 0 { // if not empty
		// write "272426-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x34, 0x32, 0x36, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingReciprocation == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingReciprocation)
			if err != nil {
				err = msgp.WrapError(err, "SharingReciprocation")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x20000000) == 0 { // if not empty
		// write "272523-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x35, 0x32, 0x33, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingRemoteByteSize == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingRemoteByteSize)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteByteSize")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x40000000) == 0 { // if not empty
		// write "272463-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x36, 0x33, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingRemoteComment == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingRemoteComment)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteComment")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x80000000) == 0 { // if not empty
		// write "272524-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x35, 0x32, 0x34, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingRemoteCrc == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingRemoteCrc)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteCrc")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x100000000) == 0 { // if not empty
		// write "272450-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x30, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingRemoteLastModificationTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingRemoteLastModificationTime)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteLastModificationTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x200000000) == 0 { // if not empty
		// write "272527-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x35, 0x32, 0x37, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingRemoteMessageCount == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingRemoteMessageCount)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteMessageCount")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x400000000) == 0 { // if not empty
		// write "272389-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x38, 0x39, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingRemoteName == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingRemoteName)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteName")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x800000000) == 0 { // if not empty
		// write "272397-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x37, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingRemotePass == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingRemotePass)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemotePass")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x1000000000) == 0 { // if not empty
		// write "272388-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x38, 0x38, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingRemotePath == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingRemotePath)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemotePath")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2000000000) == 0 { // if not empty
		// write "272520-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x35, 0x32, 0x30, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingRemoteStoreUid == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingRemoteStoreUid)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteStoreUid")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4000000000) == 0 { // if not empty
		// write "272429-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x32, 0x39, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingRemoteType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingRemoteType)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteType")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8000000000) == 0 { // if not empty
		// write "272390-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x30, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingRemoteUid == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingRemoteUid)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteUid")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x10000000000) == 0 { // if not empty
		// write "272396-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x36, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingRemoteUser == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingRemoteUser)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteUser")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x20000000000) == 0 { // if not empty
		// write "272555-31"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x35, 0x35, 0x35, 0x2d, 0x33, 0x31)
		if err != nil {
			return
		}
		if z.SharingRemoteVersion == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteString(*z.SharingRemoteVersion)
			if err != nil {
				err = msgp.WrapError(err, "SharingRemoteVersion")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x40000000000) == 0 { // if not empty
		// write "272456-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x36, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingResponseTime == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingResponseTime)
			if err != nil {
				err = msgp.WrapError(err, "SharingResponseTime")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x80000000000) == 0 { // if not empty
		// write "272455-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x34, 0x35, 0x35, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingResponseType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingResponseType)
			if err != nil {
				err = msgp.WrapError(err, "SharingResponseType")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x100000000000) == 0 { // if not empty
		// write "272526-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x35, 0x32, 0x36, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingRoamLog == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingRoamLog)
			if err != nil {
				err = msgp.WrapError(err, "SharingRoamLog")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x200000000000) == 0 { // if not empty
		// write "272453-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x33, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingStart == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingStart)
			if err != nil {
				err = msgp.WrapError(err, "SharingStart")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x400000000000) == 0 { // if not empty
		// write "272384-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x33, 0x38, 0x34, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingStatus == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingStatus)
			if err != nil {
				err = msgp.WrapError(err, "SharingStatus")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x800000000000) == 0 { // if not empty
		// write "272454-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x34, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingStop == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingStop)
			if err != nil {
				err = msgp.WrapError(err, "SharingStop")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x1000000000000) == 0 { // if not empty
		// write "272576-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x35, 0x37, 0x36, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingSyncFlags == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingSyncFlags)
			if err != nil {
				err = msgp.WrapError(err, "SharingSyncFlags")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x2000000000000) == 0 { // if not empty
		// write "272458-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x34, 0x35, 0x38, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingSyncInterval == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingSyncInterval)
			if err != nil {
				err = msgp.WrapError(err, "SharingSyncInterval")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x4000000000000) == 0 { // if not empty
		// write "272460-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x34, 0x36, 0x30, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingTimeToLive == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingTimeToLive)
			if err != nil {
				err = msgp.WrapError(err, "SharingTimeToLive")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x8000000000000) == 0 { // if not empty
		// write "272550-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x35, 0x35, 0x30, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingTimeToLiveAuto == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingTimeToLiveAuto)
			if err != nil {
				err = msgp.WrapError(err, "SharingTimeToLiveAuto")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x10000000000000) == 0 { // if not empty
		// write "272514-3"
		err = en.Append(0xa8, 0x32, 0x37, 0x32, 0x35, 0x31, 0x34, 0x2d, 0x33)
		if err != nil {
			return
		}
		if z.SharingWorkingHoursDays == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt32(*z.SharingWorkingHoursDays)
			if err != nil {
				err = msgp.WrapError(err, "SharingWorkingHoursDays")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x20000000000000) == 0 { // if not empty
		// write "272513-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x35, 0x31, 0x33, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingWorkingHoursEnd == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingWorkingHoursEnd)
			if err != nil {
				err = msgp.WrapError(err, "SharingWorkingHoursEnd")
				return
			}
		}
	}
	if (zb0001Mask[0] & 0x40000000000000) == 0 { // if not empty
		// write "272512-64"
		err = en.Append(0xa9, 0x32, 0x37, 0x32, 0x35, 0x31, 0x32, 0x2d, 0x36, 0x34)
		if err != nil {
			return
		}
		if z.SharingWorkingHoursStart == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SharingWorkingHoursStart)
			if err != nil {
				err = msgp.WrapError(err, "SharingWorkingHoursStart")
				return
			}
		}
	}
	// write "XSharingBrowseUrl_"
	err = en.Append(0xb2, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingBrowseUrl_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingBrowseUrl_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingBrowseUrl_")
			return
		}
	}
	// write "XSharingCapabilities_"
	err = en.Append(0xb5, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingCapabilities_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingCapabilities_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingCapabilities_")
			return
		}
	}
	// write "XSharingConfigUrl"
	err = en.Append(0xb1, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x72, 0x6c)
	if err != nil {
		return
	}
	if z.XSharingConfigUrl == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingConfigUrl)
		if err != nil {
			err = msgp.WrapError(err, "XSharingConfigUrl")
			return
		}
	}
	// write "XSharingExendedCaps"
	err = en.Append(0xb3, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x70, 0x73)
	if err != nil {
		return
	}
	if z.XSharingExendedCaps == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingExendedCaps)
		if err != nil {
			err = msgp.WrapError(err, "XSharingExendedCaps")
			return
		}
	}
	// write "XSharingFlavor_"
	err = en.Append(0xaf, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingFlavor_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingFlavor_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingFlavor_")
			return
		}
	}
	// write "XSharingInstanceGuid"
	err = en.Append(0xb4, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64)
	if err != nil {
		return
	}
	if z.XSharingInstanceGuid == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingInstanceGuid)
		if err != nil {
			err = msgp.WrapError(err, "XSharingInstanceGuid")
			return
		}
	}
	// write "XSharingLocalType_"
	err = en.Append(0xb2, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingLocalType_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingLocalType_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingLocalType_")
			return
		}
	}
	// write "XSharingProviderGuid"
	err = en.Append(0xb4, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64)
	if err != nil {
		return
	}
	if z.XSharingProviderGuid == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingProviderGuid)
		if err != nil {
			err = msgp.WrapError(err, "XSharingProviderGuid")
			return
		}
	}
	// write "XSharingProviderName_"
	err = en.Append(0xb5, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingProviderName_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingProviderName_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingProviderName_")
			return
		}
	}
	// write "XSharingProviderUrl_"
	err = en.Append(0xb4, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingProviderUrl_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingProviderUrl_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingProviderUrl_")
			return
		}
	}
	// write "XSharingRemoteName_"
	err = en.Append(0xb3, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingRemoteName_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingRemoteName_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingRemoteName_")
			return
		}
	}
	// write "XSharingRemotePath_"
	err = en.Append(0xb3, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingRemotePath_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingRemotePath_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingRemotePath_")
			return
		}
	}
	// write "XSharingRemoteStoreUid_"
	err = en.Append(0xb7, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x69, 0x64, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingRemoteStoreUid_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingRemoteStoreUid_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingRemoteStoreUid_")
			return
		}
	}
	// write "XSharingRemoteType_"
	err = en.Append(0xb3, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingRemoteType_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingRemoteType_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingRemoteType_")
			return
		}
	}
	// write "XSharingRemoteUid_"
	err = en.Append(0xb2, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x69, 0x64, 0x5f)
	if err != nil {
		return
	}
	if z.XSharingRemoteUid_ == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.XSharingRemoteUid_)
		if err != nil {
			err = msgp.WrapError(err, "XSharingRemoteUid_")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Sharing) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(70)
	var zb0001Mask [2]uint64 /* 70 bits */
	if z.SharingAnonymity == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1
	}
	if z.SharingBrowseUrl == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2
	}
	if z.SharingCapabilities == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4
	}
	if z.SharingConfigurationUrl == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8
	}
	if z.SharingDataRangeEnd == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10
	}
	if z.SharingDataRangeStart == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20
	}
	if z.SharingDetail == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40
	}
	if z.SharingExtensionXml == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80
	}
	if z.SharingFlags == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100
	}
	if z.SharingFlavor == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200
	}
	if z.SharingInitiatorName == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400
	}
	if z.SharingInitiatorSmtp == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800
	}
	if z.SharingLastAutoSyncTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000
	}
	if z.SharingLastSyncTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000
	}
	if z.SharingLocalComment == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000
	}
	if z.SharingLocalLastModificationTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000
	}
	if z.SharingLocalName == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000
	}
	if z.SharingLocalPath == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000
	}
	if z.SharingLocalStoreUid == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000
	}
	if z.SharingLocalType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000
	}
	if z.SharingLocalUid == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000
	}
	if z.SharingParticipants == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000
	}
	if z.SharingPermissions == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000
	}
	if z.SharingProviderExtension == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000
	}
	if z.SharingProviderName == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000
	}
	if z.SharingProviderUrl == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000
	}
	if z.SharingRangeEnd == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000
	}
	if z.SharingRangeStart == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000
	}
	if z.SharingReciprocation == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000
	}
	if z.SharingRemoteByteSize == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000
	}
	if z.SharingRemoteComment == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000
	}
	if z.SharingRemoteCrc == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000000
	}
	if z.SharingRemoteLastModificationTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000000
	}
	if z.SharingRemoteMessageCount == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000000
	}
	if z.SharingRemoteName == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000000
	}
	if z.SharingRemotePass == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000000
	}
	if z.SharingRemotePath == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000000
	}
	if z.SharingRemoteStoreUid == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000000
	}
	if z.SharingRemoteType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000000
	}
	if z.SharingRemoteUid == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000000
	}
	if z.SharingRemoteUser == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000000
	}
	if z.SharingRemoteVersion == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000000
	}
	if z.SharingResponseTime == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000000
	}
	if z.SharingResponseType == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x80000000000
	}
	if z.SharingRoamLog == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x100000000000
	}
	if z.SharingStart == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x200000000000
	}
	if z.SharingStatus == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x400000000000
	}
	if z.SharingStop == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x800000000000
	}
	if z.SharingSyncFlags == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x1000000000000
	}
	if z.SharingSyncInterval == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x2000000000000
	}
	if z.SharingTimeToLive == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x4000000000000
	}
	if z.SharingTimeToLiveAuto == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x8000000000000
	}
	if z.SharingWorkingHoursDays == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x10000000000000
	}
	if z.SharingWorkingHoursEnd == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x20000000000000
	}
	if z.SharingWorkingHoursStart == nil {
		zb0001Len--
		zb0001Mask[0] |= 0x40000000000000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask[0] & 0x1) == 0 { // if not empty
		// string "272425-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x34, 0x32, 0x35, 0x2d, 0x33)
		if z.SharingAnonymity == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingAnonymity)
		}
	}
	if (zb0001Mask[0] & 0x2) == 0 { // if not empty
		// string "272545-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x35, 0x34, 0x35, 0x2d, 0x33, 0x31)
		if z.SharingBrowseUrl == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingBrowseUrl)
		}
	}
	if (zb0001Mask[0] & 0x4) == 0 { // if not empty
		// string "272423-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x34, 0x32, 0x33, 0x2d, 0x33)
		if z.SharingCapabilities == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingCapabilities)
		}
	}
	if (zb0001Mask[0] & 0x8) == 0 { // if not empty
		// string "272452-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x32, 0x2d, 0x33, 0x31)
		if z.SharingConfigurationUrl == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingConfigurationUrl)
		}
	}
	if (zb0001Mask[0] & 0x10) == 0 { // if not empty
		// string "272517-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x35, 0x31, 0x37, 0x2d, 0x36, 0x34)
		if z.SharingDataRangeEnd == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingDataRangeEnd)
		}
	}
	if (zb0001Mask[0] & 0x20) == 0 { // if not empty
		// string "272516-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x35, 0x31, 0x36, 0x2d, 0x36, 0x34)
		if z.SharingDataRangeStart == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingDataRangeStart)
		}
	}
	if (zb0001Mask[0] & 0x40) == 0 { // if not empty
		// string "272459-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x34, 0x35, 0x39, 0x2d, 0x33)
		if z.SharingDetail == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingDetail)
		}
	}
	if (zb0001Mask[0] & 0x80) == 0 { // if not empty
		// string "272449-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x34, 0x39, 0x2d, 0x33, 0x31)
		if z.SharingExtensionXml == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingExtensionXml)
		}
	}
	if (zb0001Mask[0] & 0x100) == 0 { // if not empty
		// string "272394-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x33, 0x39, 0x34, 0x2d, 0x33)
		if z.SharingFlags == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingFlags)
		}
	}
	if (zb0001Mask[0] & 0x200) == 0 { // if not empty
		// string "272424-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x34, 0x32, 0x34, 0x2d, 0x33)
		if z.SharingFlavor == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingFlavor)
		}
	}
	if (zb0001Mask[0] & 0x400) == 0 { // if not empty
		// string "272391-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x31, 0x2d, 0x33, 0x31)
		if z.SharingInitiatorName == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingInitiatorName)
		}
	}
	if (zb0001Mask[0] & 0x800) == 0 { // if not empty
		// string "272392-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x32, 0x2d, 0x33, 0x31)
		if z.SharingInitiatorSmtp == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingInitiatorSmtp)
		}
	}
	if (zb0001Mask[0] & 0x1000) == 0 { // if not empty
		// string "272549-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x35, 0x34, 0x39, 0x2d, 0x36, 0x34)
		if z.SharingLastAutoSyncTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingLastAutoSyncTime)
		}
	}
	if (zb0001Mask[0] & 0x2000) == 0 { // if not empty
		// string "272431-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x33, 0x31, 0x2d, 0x36, 0x34)
		if z.SharingLastSyncTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingLastSyncTime)
		}
	}
	if (zb0001Mask[0] & 0x4000) == 0 { // if not empty
		// string "272525-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x35, 0x32, 0x35, 0x2d, 0x33, 0x31)
		if z.SharingLocalComment == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingLocalComment)
		}
	}
	if (zb0001Mask[0] & 0x8000) == 0 { // if not empty
		// string "272451-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x31, 0x2d, 0x36, 0x34)
		if z.SharingLocalLastModificationTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingLocalLastModificationTime)
		}
	}
	if (zb0001Mask[0] & 0x10000) == 0 { // if not empty
		// string "272399-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x39, 0x2d, 0x33, 0x31)
		if z.SharingLocalName == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingLocalName)
		}
	}
	if (zb0001Mask[0] & 0x20000) == 0 { // if not empty
		// string "272398-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x38, 0x2d, 0x33, 0x31)
		if z.SharingLocalPath == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingLocalPath)
		}
	}
	if (zb0001Mask[0] & 0x40000) == 0 { // if not empty
		// string "272521-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x35, 0x32, 0x31, 0x2d, 0x33, 0x31)
		if z.SharingLocalStoreUid == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingLocalStoreUid)
		}
	}
	if (zb0001Mask[0] & 0x80000) == 0 { // if not empty
		// string "272420-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x32, 0x30, 0x2d, 0x33, 0x31)
		if z.SharingLocalType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingLocalType)
		}
	}
	if (zb0001Mask[0] & 0x100000) == 0 { // if not empty
		// string "272416-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x31, 0x36, 0x2d, 0x33, 0x31)
		if z.SharingLocalUid == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingLocalUid)
		}
	}
	if (zb0001Mask[0] & 0x200000) == 0 { // if not empty
		// string "272430-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x33, 0x30, 0x2d, 0x33, 0x31)
		if z.SharingParticipants == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingParticipants)
		}
	}
	if (zb0001Mask[0] & 0x400000) == 0 { // if not empty
		// string "272427-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x34, 0x32, 0x37, 0x2d, 0x33)
		if z.SharingPermissions == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingPermissions)
		}
	}
	if (zb0001Mask[0] & 0x800000) == 0 { // if not empty
		// string "272395-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x35, 0x2d, 0x33, 0x31)
		if z.SharingProviderExtension == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingProviderExtension)
		}
	}
	if (zb0001Mask[0] & 0x1000000) == 0 { // if not empty
		// string "272386-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x38, 0x36, 0x2d, 0x33, 0x31)
		if z.SharingProviderName == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingProviderName)
		}
	}
	if (zb0001Mask[0] & 0x2000000) == 0 { // if not empty
		// string "272387-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x38, 0x37, 0x2d, 0x33, 0x31)
		if z.SharingProviderUrl == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingProviderUrl)
		}
	}
	if (zb0001Mask[0] & 0x4000000) == 0 { // if not empty
		// string "272519-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x35, 0x31, 0x39, 0x2d, 0x33)
		if z.SharingRangeEnd == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingRangeEnd)
		}
	}
	if (zb0001Mask[0] & 0x8000000) == 0 { // if not empty
		// string "272518-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x35, 0x31, 0x38, 0x2d, 0x33)
		if z.SharingRangeStart == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingRangeStart)
		}
	}
	if (zb0001Mask[0] & 0x10000000) == 0 { // if not empty
		// string "272426-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x34, 0x32, 0x36, 0x2d, 0x33)
		if z.SharingReciprocation == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingReciprocation)
		}
	}
	if (zb0001Mask[0] & 0x20000000) == 0 { // if not empty
		// string "272523-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x35, 0x32, 0x33, 0x2d, 0x33)
		if z.SharingRemoteByteSize == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingRemoteByteSize)
		}
	}
	if (zb0001Mask[0] & 0x40000000) == 0 { // if not empty
		// string "272463-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x36, 0x33, 0x2d, 0x33, 0x31)
		if z.SharingRemoteComment == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingRemoteComment)
		}
	}
	if (zb0001Mask[0] & 0x80000000) == 0 { // if not empty
		// string "272524-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x35, 0x32, 0x34, 0x2d, 0x33)
		if z.SharingRemoteCrc == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingRemoteCrc)
		}
	}
	if (zb0001Mask[0] & 0x100000000) == 0 { // if not empty
		// string "272450-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x30, 0x2d, 0x36, 0x34)
		if z.SharingRemoteLastModificationTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingRemoteLastModificationTime)
		}
	}
	if (zb0001Mask[0] & 0x200000000) == 0 { // if not empty
		// string "272527-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x35, 0x32, 0x37, 0x2d, 0x33)
		if z.SharingRemoteMessageCount == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingRemoteMessageCount)
		}
	}
	if (zb0001Mask[0] & 0x400000000) == 0 { // if not empty
		// string "272389-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x38, 0x39, 0x2d, 0x33, 0x31)
		if z.SharingRemoteName == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingRemoteName)
		}
	}
	if (zb0001Mask[0] & 0x800000000) == 0 { // if not empty
		// string "272397-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x37, 0x2d, 0x33, 0x31)
		if z.SharingRemotePass == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingRemotePass)
		}
	}
	if (zb0001Mask[0] & 0x1000000000) == 0 { // if not empty
		// string "272388-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x38, 0x38, 0x2d, 0x33, 0x31)
		if z.SharingRemotePath == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingRemotePath)
		}
	}
	if (zb0001Mask[0] & 0x2000000000) == 0 { // if not empty
		// string "272520-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x35, 0x32, 0x30, 0x2d, 0x33, 0x31)
		if z.SharingRemoteStoreUid == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingRemoteStoreUid)
		}
	}
	if (zb0001Mask[0] & 0x4000000000) == 0 { // if not empty
		// string "272429-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x32, 0x39, 0x2d, 0x33, 0x31)
		if z.SharingRemoteType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingRemoteType)
		}
	}
	if (zb0001Mask[0] & 0x8000000000) == 0 { // if not empty
		// string "272390-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x30, 0x2d, 0x33, 0x31)
		if z.SharingRemoteUid == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingRemoteUid)
		}
	}
	if (zb0001Mask[0] & 0x10000000000) == 0 { // if not empty
		// string "272396-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x33, 0x39, 0x36, 0x2d, 0x33, 0x31)
		if z.SharingRemoteUser == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingRemoteUser)
		}
	}
	if (zb0001Mask[0] & 0x20000000000) == 0 { // if not empty
		// string "272555-31"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x35, 0x35, 0x35, 0x2d, 0x33, 0x31)
		if z.SharingRemoteVersion == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendString(o, *z.SharingRemoteVersion)
		}
	}
	if (zb0001Mask[0] & 0x40000000000) == 0 { // if not empty
		// string "272456-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x36, 0x2d, 0x36, 0x34)
		if z.SharingResponseTime == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingResponseTime)
		}
	}
	if (zb0001Mask[0] & 0x80000000000) == 0 { // if not empty
		// string "272455-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x34, 0x35, 0x35, 0x2d, 0x33)
		if z.SharingResponseType == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingResponseType)
		}
	}
	if (zb0001Mask[0] & 0x100000000000) == 0 { // if not empty
		// string "272526-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x35, 0x32, 0x36, 0x2d, 0x33)
		if z.SharingRoamLog == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingRoamLog)
		}
	}
	if (zb0001Mask[0] & 0x200000000000) == 0 { // if not empty
		// string "272453-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x33, 0x2d, 0x36, 0x34)
		if z.SharingStart == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingStart)
		}
	}
	if (zb0001Mask[0] & 0x400000000000) == 0 { // if not empty
		// string "272384-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x33, 0x38, 0x34, 0x2d, 0x33)
		if z.SharingStatus == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingStatus)
		}
	}
	if (zb0001Mask[0] & 0x800000000000) == 0 { // if not empty
		// string "272454-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x34, 0x35, 0x34, 0x2d, 0x36, 0x34)
		if z.SharingStop == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingStop)
		}
	}
	if (zb0001Mask[0] & 0x1000000000000) == 0 { // if not empty
		// string "272576-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x35, 0x37, 0x36, 0x2d, 0x33)
		if z.SharingSyncFlags == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingSyncFlags)
		}
	}
	if (zb0001Mask[0] & 0x2000000000000) == 0 { // if not empty
		// string "272458-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x34, 0x35, 0x38, 0x2d, 0x33)
		if z.SharingSyncInterval == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingSyncInterval)
		}
	}
	if (zb0001Mask[0] & 0x4000000000000) == 0 { // if not empty
		// string "272460-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x34, 0x36, 0x30, 0x2d, 0x33)
		if z.SharingTimeToLive == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingTimeToLive)
		}
	}
	if (zb0001Mask[0] & 0x8000000000000) == 0 { // if not empty
		// string "272550-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x35, 0x35, 0x30, 0x2d, 0x33)
		if z.SharingTimeToLiveAuto == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingTimeToLiveAuto)
		}
	}
	if (zb0001Mask[0] & 0x10000000000000) == 0 { // if not empty
		// string "272514-3"
		o = append(o, 0xa8, 0x32, 0x37, 0x32, 0x35, 0x31, 0x34, 0x2d, 0x33)
		if z.SharingWorkingHoursDays == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt32(o, *z.SharingWorkingHoursDays)
		}
	}
	if (zb0001Mask[0] & 0x20000000000000) == 0 { // if not empty
		// string "272513-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x35, 0x31, 0x33, 0x2d, 0x36, 0x34)
		if z.SharingWorkingHoursEnd == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingWorkingHoursEnd)
		}
	}
	if (zb0001Mask[0] & 0x40000000000000) == 0 { // if not empty
		// string "272512-64"
		o = append(o, 0xa9, 0x32, 0x37, 0x32, 0x35, 0x31, 0x32, 0x2d, 0x36, 0x34)
		if z.SharingWorkingHoursStart == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SharingWorkingHoursStart)
		}
	}
	// string "XSharingBrowseUrl_"
	o = append(o, 0xb2, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x5f)
	if z.XSharingBrowseUrl_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingBrowseUrl_)
	}
	// string "XSharingCapabilities_"
	o = append(o, 0xb5, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f)
	if z.XSharingCapabilities_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingCapabilities_)
	}
	// string "XSharingConfigUrl"
	o = append(o, 0xb1, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x72, 0x6c)
	if z.XSharingConfigUrl == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingConfigUrl)
	}
	// string "XSharingExendedCaps"
	o = append(o, 0xb3, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x70, 0x73)
	if z.XSharingExendedCaps == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingExendedCaps)
	}
	// string "XSharingFlavor_"
	o = append(o, 0xaf, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f)
	if z.XSharingFlavor_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingFlavor_)
	}
	// string "XSharingInstanceGuid"
	o = append(o, 0xb4, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64)
	if z.XSharingInstanceGuid == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingInstanceGuid)
	}
	// string "XSharingLocalType_"
	o = append(o, 0xb2, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f)
	if z.XSharingLocalType_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingLocalType_)
	}
	// string "XSharingProviderGuid"
	o = append(o, 0xb4, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64)
	if z.XSharingProviderGuid == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingProviderGuid)
	}
	// string "XSharingProviderName_"
	o = append(o, 0xb5, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f)
	if z.XSharingProviderName_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingProviderName_)
	}
	// string "XSharingProviderUrl_"
	o = append(o, 0xb4, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x5f)
	if z.XSharingProviderUrl_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingProviderUrl_)
	}
	// string "XSharingRemoteName_"
	o = append(o, 0xb3, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f)
	if z.XSharingRemoteName_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingRemoteName_)
	}
	// string "XSharingRemotePath_"
	o = append(o, 0xb3, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x5f)
	if z.XSharingRemotePath_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingRemotePath_)
	}
	// string "XSharingRemoteStoreUid_"
	o = append(o, 0xb7, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x69, 0x64, 0x5f)
	if z.XSharingRemoteStoreUid_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingRemoteStoreUid_)
	}
	// string "XSharingRemoteType_"
	o = append(o, 0xb3, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f)
	if z.XSharingRemoteType_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingRemoteType_)
	}
	// string "XSharingRemoteUid_"
	o = append(o, 0xb2, 0x58, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x69, 0x64, 0x5f)
	if z.XSharingRemoteUid_ == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.XSharingRemoteUid_)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Sharing) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "272425-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingAnonymity = nil
			} else {
				if z.SharingAnonymity == nil {
					z.SharingAnonymity = new(int32)
				}
				*z.SharingAnonymity, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingAnonymity")
					return
				}
			}
		case "272545-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingBrowseUrl = nil
			} else {
				if z.SharingBrowseUrl == nil {
					z.SharingBrowseUrl = new(string)
				}
				*z.SharingBrowseUrl, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingBrowseUrl")
					return
				}
			}
		case "272423-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingCapabilities = nil
			} else {
				if z.SharingCapabilities == nil {
					z.SharingCapabilities = new(int32)
				}
				*z.SharingCapabilities, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingCapabilities")
					return
				}
			}
		case "272452-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingConfigurationUrl = nil
			} else {
				if z.SharingConfigurationUrl == nil {
					z.SharingConfigurationUrl = new(string)
				}
				*z.SharingConfigurationUrl, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingConfigurationUrl")
					return
				}
			}
		case "272517-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingDataRangeEnd = nil
			} else {
				if z.SharingDataRangeEnd == nil {
					z.SharingDataRangeEnd = new(int64)
				}
				*z.SharingDataRangeEnd, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingDataRangeEnd")
					return
				}
			}
		case "272516-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingDataRangeStart = nil
			} else {
				if z.SharingDataRangeStart == nil {
					z.SharingDataRangeStart = new(int64)
				}
				*z.SharingDataRangeStart, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingDataRangeStart")
					return
				}
			}
		case "272459-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingDetail = nil
			} else {
				if z.SharingDetail == nil {
					z.SharingDetail = new(int32)
				}
				*z.SharingDetail, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingDetail")
					return
				}
			}
		case "272449-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingExtensionXml = nil
			} else {
				if z.SharingExtensionXml == nil {
					z.SharingExtensionXml = new(string)
				}
				*z.SharingExtensionXml, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingExtensionXml")
					return
				}
			}
		case "272394-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingFlags = nil
			} else {
				if z.SharingFlags == nil {
					z.SharingFlags = new(int32)
				}
				*z.SharingFlags, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingFlags")
					return
				}
			}
		case "272424-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingFlavor = nil
			} else {
				if z.SharingFlavor == nil {
					z.SharingFlavor = new(int32)
				}
				*z.SharingFlavor, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingFlavor")
					return
				}
			}
		case "272391-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingInitiatorName = nil
			} else {
				if z.SharingInitiatorName == nil {
					z.SharingInitiatorName = new(string)
				}
				*z.SharingInitiatorName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingInitiatorName")
					return
				}
			}
		case "272392-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingInitiatorSmtp = nil
			} else {
				if z.SharingInitiatorSmtp == nil {
					z.SharingInitiatorSmtp = new(string)
				}
				*z.SharingInitiatorSmtp, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingInitiatorSmtp")
					return
				}
			}
		case "272549-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingLastAutoSyncTime = nil
			} else {
				if z.SharingLastAutoSyncTime == nil {
					z.SharingLastAutoSyncTime = new(int64)
				}
				*z.SharingLastAutoSyncTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingLastAutoSyncTime")
					return
				}
			}
		case "272431-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingLastSyncTime = nil
			} else {
				if z.SharingLastSyncTime == nil {
					z.SharingLastSyncTime = new(int64)
				}
				*z.SharingLastSyncTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingLastSyncTime")
					return
				}
			}
		case "272525-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingLocalComment = nil
			} else {
				if z.SharingLocalComment == nil {
					z.SharingLocalComment = new(string)
				}
				*z.SharingLocalComment, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalComment")
					return
				}
			}
		case "272451-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingLocalLastModificationTime = nil
			} else {
				if z.SharingLocalLastModificationTime == nil {
					z.SharingLocalLastModificationTime = new(int64)
				}
				*z.SharingLocalLastModificationTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalLastModificationTime")
					return
				}
			}
		case "272399-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingLocalName = nil
			} else {
				if z.SharingLocalName == nil {
					z.SharingLocalName = new(string)
				}
				*z.SharingLocalName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalName")
					return
				}
			}
		case "272398-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingLocalPath = nil
			} else {
				if z.SharingLocalPath == nil {
					z.SharingLocalPath = new(string)
				}
				*z.SharingLocalPath, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalPath")
					return
				}
			}
		case "272521-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingLocalStoreUid = nil
			} else {
				if z.SharingLocalStoreUid == nil {
					z.SharingLocalStoreUid = new(string)
				}
				*z.SharingLocalStoreUid, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalStoreUid")
					return
				}
			}
		case "272420-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingLocalType = nil
			} else {
				if z.SharingLocalType == nil {
					z.SharingLocalType = new(string)
				}
				*z.SharingLocalType, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalType")
					return
				}
			}
		case "272416-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingLocalUid = nil
			} else {
				if z.SharingLocalUid == nil {
					z.SharingLocalUid = new(string)
				}
				*z.SharingLocalUid, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingLocalUid")
					return
				}
			}
		case "272430-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingParticipants = nil
			} else {
				if z.SharingParticipants == nil {
					z.SharingParticipants = new(string)
				}
				*z.SharingParticipants, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingParticipants")
					return
				}
			}
		case "272427-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingPermissions = nil
			} else {
				if z.SharingPermissions == nil {
					z.SharingPermissions = new(int32)
				}
				*z.SharingPermissions, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingPermissions")
					return
				}
			}
		case "272395-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingProviderExtension = nil
			} else {
				if z.SharingProviderExtension == nil {
					z.SharingProviderExtension = new(string)
				}
				*z.SharingProviderExtension, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingProviderExtension")
					return
				}
			}
		case "272386-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingProviderName = nil
			} else {
				if z.SharingProviderName == nil {
					z.SharingProviderName = new(string)
				}
				*z.SharingProviderName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingProviderName")
					return
				}
			}
		case "272387-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingProviderUrl = nil
			} else {
				if z.SharingProviderUrl == nil {
					z.SharingProviderUrl = new(string)
				}
				*z.SharingProviderUrl, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingProviderUrl")
					return
				}
			}
		case "272519-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRangeEnd = nil
			} else {
				if z.SharingRangeEnd == nil {
					z.SharingRangeEnd = new(int32)
				}
				*z.SharingRangeEnd, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRangeEnd")
					return
				}
			}
		case "272518-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRangeStart = nil
			} else {
				if z.SharingRangeStart == nil {
					z.SharingRangeStart = new(int32)
				}
				*z.SharingRangeStart, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRangeStart")
					return
				}
			}
		case "272426-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingReciprocation = nil
			} else {
				if z.SharingReciprocation == nil {
					z.SharingReciprocation = new(int32)
				}
				*z.SharingReciprocation, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingReciprocation")
					return
				}
			}
		case "272523-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteByteSize = nil
			} else {
				if z.SharingRemoteByteSize == nil {
					z.SharingRemoteByteSize = new(int32)
				}
				*z.SharingRemoteByteSize, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteByteSize")
					return
				}
			}
		case "272463-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteComment = nil
			} else {
				if z.SharingRemoteComment == nil {
					z.SharingRemoteComment = new(string)
				}
				*z.SharingRemoteComment, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteComment")
					return
				}
			}
		case "272524-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteCrc = nil
			} else {
				if z.SharingRemoteCrc == nil {
					z.SharingRemoteCrc = new(int32)
				}
				*z.SharingRemoteCrc, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteCrc")
					return
				}
			}
		case "272450-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteLastModificationTime = nil
			} else {
				if z.SharingRemoteLastModificationTime == nil {
					z.SharingRemoteLastModificationTime = new(int64)
				}
				*z.SharingRemoteLastModificationTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteLastModificationTime")
					return
				}
			}
		case "272527-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteMessageCount = nil
			} else {
				if z.SharingRemoteMessageCount == nil {
					z.SharingRemoteMessageCount = new(int32)
				}
				*z.SharingRemoteMessageCount, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteMessageCount")
					return
				}
			}
		case "272389-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteName = nil
			} else {
				if z.SharingRemoteName == nil {
					z.SharingRemoteName = new(string)
				}
				*z.SharingRemoteName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteName")
					return
				}
			}
		case "272397-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemotePass = nil
			} else {
				if z.SharingRemotePass == nil {
					z.SharingRemotePass = new(string)
				}
				*z.SharingRemotePass, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemotePass")
					return
				}
			}
		case "272388-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemotePath = nil
			} else {
				if z.SharingRemotePath == nil {
					z.SharingRemotePath = new(string)
				}
				*z.SharingRemotePath, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemotePath")
					return
				}
			}
		case "272520-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteStoreUid = nil
			} else {
				if z.SharingRemoteStoreUid == nil {
					z.SharingRemoteStoreUid = new(string)
				}
				*z.SharingRemoteStoreUid, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteStoreUid")
					return
				}
			}
		case "272429-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteType = nil
			} else {
				if z.SharingRemoteType == nil {
					z.SharingRemoteType = new(string)
				}
				*z.SharingRemoteType, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteType")
					return
				}
			}
		case "272390-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteUid = nil
			} else {
				if z.SharingRemoteUid == nil {
					z.SharingRemoteUid = new(string)
				}
				*z.SharingRemoteUid, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteUid")
					return
				}
			}
		case "272396-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteUser = nil
			} else {
				if z.SharingRemoteUser == nil {
					z.SharingRemoteUser = new(string)
				}
				*z.SharingRemoteUser, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteUser")
					return
				}
			}
		case "272555-31":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRemoteVersion = nil
			} else {
				if z.SharingRemoteVersion == nil {
					z.SharingRemoteVersion = new(string)
				}
				*z.SharingRemoteVersion, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRemoteVersion")
					return
				}
			}
		case "272456-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingResponseTime = nil
			} else {
				if z.SharingResponseTime == nil {
					z.SharingResponseTime = new(int64)
				}
				*z.SharingResponseTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingResponseTime")
					return
				}
			}
		case "272455-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingResponseType = nil
			} else {
				if z.SharingResponseType == nil {
					z.SharingResponseType = new(int32)
				}
				*z.SharingResponseType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingResponseType")
					return
				}
			}
		case "272526-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingRoamLog = nil
			} else {
				if z.SharingRoamLog == nil {
					z.SharingRoamLog = new(int32)
				}
				*z.SharingRoamLog, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingRoamLog")
					return
				}
			}
		case "272453-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingStart = nil
			} else {
				if z.SharingStart == nil {
					z.SharingStart = new(int64)
				}
				*z.SharingStart, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingStart")
					return
				}
			}
		case "272384-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingStatus = nil
			} else {
				if z.SharingStatus == nil {
					z.SharingStatus = new(int32)
				}
				*z.SharingStatus, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingStatus")
					return
				}
			}
		case "272454-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingStop = nil
			} else {
				if z.SharingStop == nil {
					z.SharingStop = new(int64)
				}
				*z.SharingStop, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingStop")
					return
				}
			}
		case "272576-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingSyncFlags = nil
			} else {
				if z.SharingSyncFlags == nil {
					z.SharingSyncFlags = new(int32)
				}
				*z.SharingSyncFlags, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingSyncFlags")
					return
				}
			}
		case "272458-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingSyncInterval = nil
			} else {
				if z.SharingSyncInterval == nil {
					z.SharingSyncInterval = new(int32)
				}
				*z.SharingSyncInterval, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingSyncInterval")
					return
				}
			}
		case "272460-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingTimeToLive = nil
			} else {
				if z.SharingTimeToLive == nil {
					z.SharingTimeToLive = new(int32)
				}
				*z.SharingTimeToLive, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingTimeToLive")
					return
				}
			}
		case "272550-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingTimeToLiveAuto = nil
			} else {
				if z.SharingTimeToLiveAuto == nil {
					z.SharingTimeToLiveAuto = new(int32)
				}
				*z.SharingTimeToLiveAuto, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingTimeToLiveAuto")
					return
				}
			}
		case "272514-3":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingWorkingHoursDays = nil
			} else {
				if z.SharingWorkingHoursDays == nil {
					z.SharingWorkingHoursDays = new(int32)
				}
				*z.SharingWorkingHoursDays, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingWorkingHoursDays")
					return
				}
			}
		case "272513-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingWorkingHoursEnd = nil
			} else {
				if z.SharingWorkingHoursEnd == nil {
					z.SharingWorkingHoursEnd = new(int64)
				}
				*z.SharingWorkingHoursEnd, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingWorkingHoursEnd")
					return
				}
			}
		case "272512-64":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SharingWorkingHoursStart = nil
			} else {
				if z.SharingWorkingHoursStart == nil {
					z.SharingWorkingHoursStart = new(int64)
				}
				*z.SharingWorkingHoursStart, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SharingWorkingHoursStart")
					return
				}
			}
		case "XSharingBrowseUrl_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingBrowseUrl_ = nil
			} else {
				if z.XSharingBrowseUrl_ == nil {
					z.XSharingBrowseUrl_ = new(string)
				}
				*z.XSharingBrowseUrl_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingBrowseUrl_")
					return
				}
			}
		case "XSharingCapabilities_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingCapabilities_ = nil
			} else {
				if z.XSharingCapabilities_ == nil {
					z.XSharingCapabilities_ = new(string)
				}
				*z.XSharingCapabilities_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingCapabilities_")
					return
				}
			}
		case "XSharingConfigUrl":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingConfigUrl = nil
			} else {
				if z.XSharingConfigUrl == nil {
					z.XSharingConfigUrl = new(string)
				}
				*z.XSharingConfigUrl, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingConfigUrl")
					return
				}
			}
		case "XSharingExendedCaps":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingExendedCaps = nil
			} else {
				if z.XSharingExendedCaps == nil {
					z.XSharingExendedCaps = new(string)
				}
				*z.XSharingExendedCaps, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingExendedCaps")
					return
				}
			}
		case "XSharingFlavor_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingFlavor_ = nil
			} else {
				if z.XSharingFlavor_ == nil {
					z.XSharingFlavor_ = new(string)
				}
				*z.XSharingFlavor_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingFlavor_")
					return
				}
			}
		case "XSharingInstanceGuid":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingInstanceGuid = nil
			} else {
				if z.XSharingInstanceGuid == nil {
					z.XSharingInstanceGuid = new(string)
				}
				*z.XSharingInstanceGuid, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingInstanceGuid")
					return
				}
			}
		case "XSharingLocalType_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingLocalType_ = nil
			} else {
				if z.XSharingLocalType_ == nil {
					z.XSharingLocalType_ = new(string)
				}
				*z.XSharingLocalType_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingLocalType_")
					return
				}
			}
		case "XSharingProviderGuid":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingProviderGuid = nil
			} else {
				if z.XSharingProviderGuid == nil {
					z.XSharingProviderGuid = new(string)
				}
				*z.XSharingProviderGuid, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingProviderGuid")
					return
				}
			}
		case "XSharingProviderName_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingProviderName_ = nil
			} else {
				if z.XSharingProviderName_ == nil {
					z.XSharingProviderName_ = new(string)
				}
				*z.XSharingProviderName_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingProviderName_")
					return
				}
			}
		case "XSharingProviderUrl_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingProviderUrl_ = nil
			} else {
				if z.XSharingProviderUrl_ == nil {
					z.XSharingProviderUrl_ = new(string)
				}
				*z.XSharingProviderUrl_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingProviderUrl_")
					return
				}
			}
		case "XSharingRemoteName_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingRemoteName_ = nil
			} else {
				if z.XSharingRemoteName_ == nil {
					z.XSharingRemoteName_ = new(string)
				}
				*z.XSharingRemoteName_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteName_")
					return
				}
			}
		case "XSharingRemotePath_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingRemotePath_ = nil
			} else {
				if z.XSharingRemotePath_ == nil {
					z.XSharingRemotePath_ = new(string)
				}
				*z.XSharingRemotePath_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemotePath_")
					return
				}
			}
		case "XSharingRemoteStoreUid_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingRemoteStoreUid_ = nil
			} else {
				if z.XSharingRemoteStoreUid_ == nil {
					z.XSharingRemoteStoreUid_ = new(string)
				}
				*z.XSharingRemoteStoreUid_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteStoreUid_")
					return
				}
			}
		case "XSharingRemoteType_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingRemoteType_ = nil
			} else {
				if z.XSharingRemoteType_ == nil {
					z.XSharingRemoteType_ = new(string)
				}
				*z.XSharingRemoteType_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteType_")
					return
				}
			}
		case "XSharingRemoteUid_":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.XSharingRemoteUid_ = nil
			} else {
				if z.XSharingRemoteUid_ == nil {
					z.XSharingRemoteUid_ = new(string)
				}
				*z.XSharingRemoteUid_, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "XSharingRemoteUid_")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Sharing) Msgsize() (s int) {
	s = 3 + 9
	if z.SharingAnonymity == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingBrowseUrl == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingBrowseUrl)
	}
	s += 9
	if z.SharingCapabilities == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingConfigurationUrl == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingConfigurationUrl)
	}
	s += 10
	if z.SharingDataRangeEnd == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 10
	if z.SharingDataRangeStart == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 9
	if z.SharingDetail == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingExtensionXml == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingExtensionXml)
	}
	s += 9
	if z.SharingFlags == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.SharingFlavor == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingInitiatorName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingInitiatorName)
	}
	s += 10
	if z.SharingInitiatorSmtp == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingInitiatorSmtp)
	}
	s += 10
	if z.SharingLastAutoSyncTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 10
	if z.SharingLastSyncTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 10
	if z.SharingLocalComment == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingLocalComment)
	}
	s += 10
	if z.SharingLocalLastModificationTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 10
	if z.SharingLocalName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingLocalName)
	}
	s += 10
	if z.SharingLocalPath == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingLocalPath)
	}
	s += 10
	if z.SharingLocalStoreUid == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingLocalStoreUid)
	}
	s += 10
	if z.SharingLocalType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingLocalType)
	}
	s += 10
	if z.SharingLocalUid == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingLocalUid)
	}
	s += 10
	if z.SharingParticipants == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingParticipants)
	}
	s += 9
	if z.SharingPermissions == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingProviderExtension == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingProviderExtension)
	}
	s += 10
	if z.SharingProviderName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingProviderName)
	}
	s += 10
	if z.SharingProviderUrl == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingProviderUrl)
	}
	s += 9
	if z.SharingRangeEnd == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.SharingRangeStart == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.SharingReciprocation == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.SharingRemoteByteSize == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingRemoteComment == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingRemoteComment)
	}
	s += 9
	if z.SharingRemoteCrc == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingRemoteLastModificationTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 9
	if z.SharingRemoteMessageCount == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingRemoteName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingRemoteName)
	}
	s += 10
	if z.SharingRemotePass == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingRemotePass)
	}
	s += 10
	if z.SharingRemotePath == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingRemotePath)
	}
	s += 10
	if z.SharingRemoteStoreUid == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingRemoteStoreUid)
	}
	s += 10
	if z.SharingRemoteType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingRemoteType)
	}
	s += 10
	if z.SharingRemoteUid == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingRemoteUid)
	}
	s += 10
	if z.SharingRemoteUser == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingRemoteUser)
	}
	s += 10
	if z.SharingRemoteVersion == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.SharingRemoteVersion)
	}
	s += 10
	if z.SharingResponseTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 9
	if z.SharingResponseType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.SharingRoamLog == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingStart == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 9
	if z.SharingStatus == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingStop == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 9
	if z.SharingSyncFlags == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.SharingSyncInterval == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.SharingTimeToLive == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.SharingTimeToLiveAuto == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 9
	if z.SharingWorkingHoursDays == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 10
	if z.SharingWorkingHoursEnd == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 10
	if z.SharingWorkingHoursStart == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 19
	if z.XSharingBrowseUrl_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingBrowseUrl_)
	}
	s += 22
	if z.XSharingCapabilities_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingCapabilities_)
	}
	s += 18
	if z.XSharingConfigUrl == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingConfigUrl)
	}
	s += 20
	if z.XSharingExendedCaps == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingExendedCaps)
	}
	s += 16
	if z.XSharingFlavor_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingFlavor_)
	}
	s += 21
	if z.XSharingInstanceGuid == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingInstanceGuid)
	}
	s += 19
	if z.XSharingLocalType_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingLocalType_)
	}
	s += 21
	if z.XSharingProviderGuid == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingProviderGuid)
	}
	s += 22
	if z.XSharingProviderName_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingProviderName_)
	}
	s += 21
	if z.XSharingProviderUrl_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingProviderUrl_)
	}
	s += 20
	if z.XSharingRemoteName_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingRemoteName_)
	}
	s += 20
	if z.XSharingRemotePath_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingRemotePath_)
	}
	s += 24
	if z.XSharingRemoteStoreUid_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingRemoteStoreUid_)
	}
	s += 20
	if z.XSharingRemoteType_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingRemoteType_)
	}
	s += 19
	if z.XSharingRemoteUid_ == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.XSharingRemoteUid_)
	}
	return
}
